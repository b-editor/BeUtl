<?xml version="1.0"?>
<doc>
    <assembly>
        <name>BEditor.Core</name>
    </assembly>
    <members>
        <member name="T:BEditor.CommandExtensions">
            <summary>
            Represents a class that provides an extension method.
            </summary>
        </member>
        <member name="M:BEditor.CommandExtensions.Execute(BEditor.Command.IRecordCommand)">
            <summary>
            Execute IRecordCommand.
            </summary>
            <param name="command">The command to execute.</param>
        </member>
        <member name="M:BEditor.CommandExtensions.Execute(BEditor.Command.IRecordCommand,BEditor.Command.CommandManager)">
            <summary>
            Execute IRecordCommand with CommandManager specified.
            </summary>
            <param name="command">The command to execute.</param>
            <param name="manager">The command manager for executing commands.</param>
        </member>
        <member name="M:BEditor.CommandExtensions.Combine(BEditor.Command.IRecordCommand,BEditor.Command.IRecordCommand)">
            <summary>
            Combine the two commands.
            </summary>
            <param name="first">The first command.</param>
            <param name="second">The second command.</param>
            <returns>The command.</returns>
        </member>
        <member name="T:BEditor.Command.CommandType">
            <summary>
            Indicates the type of command.
            </summary>
        </member>
        <member name="F:BEditor.Command.CommandType.Do">
            <summary>
            Do.
            </summary>
        </member>
        <member name="F:BEditor.Command.CommandType.Undo">
            <summary>
            Undo.
            </summary>
        </member>
        <member name="F:BEditor.Command.CommandType.Redo">
            <summary>
            Redo.
            </summary>
        </member>
        <member name="T:BEditor.Command.CommandManager">
            <summary>
            Indicates the Undo and Redo functions by storing the history of the operations performed.
            </summary>
        </member>
        <member name="F:BEditor.Command.CommandManager.Default">
            <summary>
            Default instance of CommandManager.
            </summary>
        </member>
        <member name="E:BEditor.Command.CommandManager.Executed">
            <summary>
            Occurs at UnDo, Redo, and execution time.
            </summary>
        </member>
        <member name="E:BEditor.Command.CommandManager.CommandCancel">
            <summary>
            Occurs when a command is canceled.
            </summary>
        </member>
        <member name="E:BEditor.Command.CommandManager.CommandsClear">
            <summary>
            Occurs after <see cref="M:BEditor.Command.CommandManager.Clear"/>.
            </summary>
        </member>
        <member name="P:BEditor.Command.CommandManager.UndoStack">
            <summary>
            Gets the <see cref="T:System.Collections.Generic.Stack`1"/> that will be recorded after execution or redo.
            </summary>
        </member>
        <member name="P:BEditor.Command.CommandManager.RedoStack">
            <summary>
            Gets the <see cref="T:System.Collections.Generic.Stack`1"/> to be recorded after the Undo.
            </summary>
        </member>
        <member name="P:BEditor.Command.CommandManager.CanUndo">
            <summary>
            Gets a value indicating whether or not Undo is enabled.
            </summary>
        </member>
        <member name="P:BEditor.Command.CommandManager.CanRedo">
            <summary>
            Gets a value indicating whether or not Redo is enabled.
            </summary>
        </member>
        <member name="M:BEditor.Command.CommandManager.Do(BEditor.Command.IRecordCommand)">
            <summary>
            Execute the operation and add its contents to the stack.
            </summary>
            <param name="command">The command to execute.</param>
        </member>
        <member name="M:BEditor.Command.CommandManager.Undo">
            <summary>
            Undoes a command and returns to the previous state.
            </summary>
        </member>
        <member name="M:BEditor.Command.CommandManager.Redo">
            <summary>
            Redo the canceled command.
            </summary>
        </member>
        <member name="M:BEditor.Command.CommandManager.Clear">
            <summary>
            Clear the recorded commands.
            </summary>
        </member>
        <member name="T:BEditor.Command.EmptyCommand">
            <summary>
            Represents a class that implements an empty <see cref="T:BEditor.Command.IRecordCommand"/>.
            </summary>
        </member>
        <member name="M:BEditor.Command.EmptyCommand.Do">
            <inheritdoc/>
        </member>
        <member name="M:BEditor.Command.EmptyCommand.Redo">
            <inheritdoc/>
        </member>
        <member name="M:BEditor.Command.EmptyCommand.Undo">
            <inheritdoc/>
        </member>
        <member name="T:BEditor.Command.IRecordCommand">
            <summary>
            Represents the action of executing, undoing, or redoing.
            </summary>
        </member>
        <member name="P:BEditor.Command.IRecordCommand.Name">
            <summary>
            Gets the name of this <see cref="T:BEditor.Command.IRecordCommand"/>.
            </summary>
        </member>
        <member name="M:BEditor.Command.IRecordCommand.Do">
            <summary>
            Execute the operation.
            </summary>
        </member>
        <member name="M:BEditor.Command.IRecordCommand.Undo">
            <summary>
            Undo the operation.
            </summary>
        </member>
        <member name="M:BEditor.Command.IRecordCommand.Redo">
            <summary>
            Redo the operation.
            </summary>
        </member>
        <member name="T:BEditor.Command.RecordCommand">
            <summary>
            Represents the action of executing, undoing, or redoing.
            </summary>
        </member>
        <member name="M:BEditor.Command.RecordCommand.#ctor(System.Action,System.Action,System.Func{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:BEditor.Command.RecordCommand"/> class.
            </summary>
            <param name="onDo">Execute the operation.</param>
            <param name="onUndo">Undo the operation.</param>
            <param name="getName">Gets the name of the command.</param>
        </member>
        <member name="M:BEditor.Command.RecordCommand.#ctor(System.Action,System.Action,System.Action,System.Func{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:BEditor.Command.RecordCommand"/> class.
            </summary>
            <param name="onDo">Execute the operation.</param>
            <param name="onUndo">Undo the operation.</param>
            <param name="onRedo">Redo the operation.</param>
            <param name="getName">Gets the name of the command.</param>
        </member>
        <member name="P:BEditor.Command.RecordCommand.Empty">
            <summary>
            Gets the empty record command.
            </summary>
        </member>
        <member name="P:BEditor.Command.RecordCommand.Name">
            <inheritdoc/>
        </member>
        <member name="M:BEditor.Command.RecordCommand.Create``1(``0,System.Action{``0},System.Action{``0},System.Func{``0,System.String})">
            <summary>
            Create a RecordCommand.
            </summary>
            <typeparam name="TState">The type of state.</typeparam>
            <param name="state">The state.</param>
            <param name="onDo">Execute the operation.</param>
            <param name="onUndo">Undo the operation.</param>
            <param name="getName">Gets the name of the command.</param>
            <returns>An instance of <see cref="T:BEditor.Command.RecordCommand`1"/> created.</returns>
        </member>
        <member name="M:BEditor.Command.RecordCommand.Create``1(``0,System.Action{``0},System.Action{``0},System.Action{``0},System.Func{``0,System.String})">
            <summary>
            Create a RecordCommand.
            </summary>
            <typeparam name="TState">The type of state.</typeparam>
            <param name="state">The state.</param>
            <param name="onDo">Execute the operation.</param>
            <param name="onUndo">Undo the operation.</param>
            <param name="onRedo">Redo the operation.</param>
            <param name="getName">Gets the name of the command.</param>
            <returns>An instance of <see cref="T:BEditor.Command.RecordCommand`1"/> created.</returns>
        </member>
        <member name="M:BEditor.Command.RecordCommand.Do">
            <inheritdoc/>
        </member>
        <member name="M:BEditor.Command.RecordCommand.Redo">
            <inheritdoc/>
        </member>
        <member name="M:BEditor.Command.RecordCommand.Undo">
            <inheritdoc/>
        </member>
        <member name="T:BEditor.Command.RecordCommand`1">
            <summary>
            Represents the action of executing, undoing, or redoing.
            </summary>
            <typeparam name="TState">The type of state.</typeparam>
        </member>
        <member name="M:BEditor.Command.RecordCommand`1.#ctor(`0,System.Action{`0},System.Action{`0},System.Func{`0,System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:BEditor.Command.RecordCommand`1"/> class.
            </summary>
            <param name="state">The state.</param>
            <param name="onDo">Execute the operation.</param>
            <param name="onUndo">Undo the operation.</param>
            <param name="getName">Gets the name of the command.</param>
        </member>
        <member name="M:BEditor.Command.RecordCommand`1.#ctor(`0,System.Action{`0},System.Action{`0},System.Action{`0},System.Func{`0,System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:BEditor.Command.RecordCommand`1"/> class.
            </summary>
            <param name="state">The state.</param>
            <param name="onDo">Execute the operation.</param>
            <param name="onUndo">Undo the operation.</param>
            <param name="onRedo">Redo the operation.</param>
            <param name="getName">Gets the name of the command.</param>
        </member>
        <member name="P:BEditor.Command.RecordCommand`1.Name">
            <inheritdoc/>
        </member>
        <member name="M:BEditor.Command.RecordCommand`1.Do">
            <inheritdoc/>
        </member>
        <member name="M:BEditor.Command.RecordCommand`1.Redo">
            <inheritdoc/>
        </member>
        <member name="M:BEditor.Command.RecordCommand`1.Undo">
            <inheritdoc/>
        </member>
        <member name="T:BEditor.Data.ApplyType">
            <summary>
            Represents the type of rendering request.
            </summary>
        </member>
        <member name="F:BEditor.Data.ApplyType.Edit">
            <summary>
            Represents the preview rendering during editing.
            </summary>
        </member>
        <member name="F:BEditor.Data.ApplyType.Image">
            <summary>
            Represents the rendering in the image output.
            </summary>
        </member>
        <member name="F:BEditor.Data.ApplyType.Video">
            <summary>
            Represents the rendering in the video output.
            </summary>
        </member>
        <member name="F:BEditor.Data.ApplyType.Audio">
            <summary>
            Represents the rendering in the audio output.
            </summary>
        </member>
        <member name="T:BEditor.Data.Bindings.BindingHelper">
            <summary>
            バインディング関係の内部メソッドを提供します.
            </summary>
        </member>
        <member name="M:BEditor.Data.Bindings.BindingHelper.AutoLoad``1(BEditor.Data.Bindings.IBindable{``0},System.Nullable{System.Guid}@)">
            <summary>
            <see cref="M:BEditor.Data.IElementObject.Load"/> 時に自動で <see cref="M:BEditor.Data.Bindings.IBindable`1.Bind(BEditor.Data.Bindings.IBindable{`0})"/> を呼び出す必要があれば呼び出します.
            </summary>
            <typeparam name="T">バインドするオブジェクト.</typeparam>
            <param name="bindable">バインドソースのインスタンス.</param>
            <param name="id">バインドターゲットのID.</param>
        </member>
        <member name="M:BEditor.Data.Bindings.BindingHelper.Subscribe``1(System.Collections.Generic.IList{System.IObserver{``0}},System.IObserver{``0},``0)">
            <summary>
            <see cref="M:System.IObservable`1.Subscribe(System.IObserver{`0})"/> の動作.
            </summary>
            <typeparam name="T">通知情報を提供するオブジェクト.</typeparam>
            <param name="list"><paramref name="observer"/> を追加するリスト.</param>
            <param name="observer">購読する <see cref="T:System.IObserver`1"/> のインスタンス.</param>
            <param name="value">最初の通知の値.</param>
            <returns>プロバイダが通知の送信を完了する前に、オブザーバが通知の受信を停止できるようにするインターフェースへの参照.</returns>
        </member>
        <member name="M:BEditor.Data.Bindings.BindingHelper.Bind``1(BEditor.Data.Bindings.IBindable{``0},BEditor.Data.Bindings.IBindable{``0},BEditor.Data.Bindings.IBindable{``0}@,System.IDisposable@)">
            <summary>
            <see cref="M:BEditor.Data.Bindings.IBindable`1.Bind(BEditor.Data.Bindings.IBindable{`0})"/> の動作.
            </summary>
            <typeparam name="T">バインドするオブジェクト.</typeparam>
            <param name="bindable1">バインドソース.</param>
            <param name="bindable2">バインドターゲット.</param>
            <param name="outbindable"><paramref name="bindable2"/> が設定されます.</param>
            <param name="disposable">オブザーバが通知の受信を停止できるようにするインターフェースへの参照.</param>
            <returns><paramref name="bindable2"/> 又は <paramref name="bindable1"/> の値.</returns>
        </member>
        <member name="T:BEditor.Data.Bindings.Bindings">
            <summary>
            Represents a class that provides methods for objects that implement <see cref="T:BEditor.Data.Bindings.IBindable`1"/>.
            </summary>
        </member>
        <member name="M:BEditor.Data.Bindings.Bindings.GetBindable``1(BEditor.Data.Bindings.IBindable{``0},System.Nullable{System.Guid},BEditor.Data.Bindings.IBindable{``0}@)">
            <summary>
            Get <see cref="T:BEditor.Data.Bindings.IBindable`1"/> from <see cref="P:BEditor.Data.IEditingObject.Id"/>.
            </summary>
            <param name="bindable">The object used to get the target <see cref="T:BEditor.Data.Bindings.IBindable`1"/>.</param>
            <param name="id">The Id of the <see cref="T:BEditor.Data.Bindings.IBindable`1"/> to be retrieved.</param>
            <param name="result">The instance of the <see cref="T:BEditor.Data.Bindings.IBindable`1"/> that was retrieved.</param>
            <typeparam name="T">Type of object to bind.</typeparam>
            <returns>Returns a <see cref="T:System.Boolean"/> indicating whether it was retrieved or not, <see langword="true"/> on success, <see langword="false"/> on failure.</returns>
        </member>
        <member name="M:BEditor.Data.Bindings.Bindings.Bind``1(BEditor.Data.Bindings.IBindable{``0},BEditor.Data.Bindings.IBindable{``0})">
            <summary>
            Create a command to bind two objects implementing <see cref="T:BEditor.Data.Bindings.IBindable`1"/>.
            </summary>
            <typeparam name="T">Type of object to bind.</typeparam>
            <param name="src">Bind source object.</param>
            <param name="target">Bind destination object.</param>
            <returns>Created <see cref="T:BEditor.Command.IRecordCommand"/>.</returns>
        </member>
        <member name="M:BEditor.Data.Bindings.Bindings.Disconnect``1(BEditor.Data.Bindings.IBindable{``0})">
            <summary>
            Create a command to disconnect the binding.
            </summary>
            <typeparam name="T">Type of object to bind.</typeparam>
            <param name="bindable">An object that implements <see cref="T:BEditor.Data.Bindings.IBindable`1"/> to disconnect.</param>
            <returns>Created <see cref="T:BEditor.Command.IRecordCommand"/>.</returns>
        </member>
        <member name="T:BEditor.Data.Bindings.IBindable`1">
            <summary>
            Represents the Bindable object.
            </summary>
            <typeparam name="T">Type of object to bind.</typeparam>
        </member>
        <member name="P:BEditor.Data.Bindings.IBindable`1.Value">
            <summary>
            Gets the value.
            </summary>
        </member>
        <member name="P:BEditor.Data.Bindings.IBindable`1.TargetID">
            <summary>
            Gets a hint to use when searching for objects to Bind.
            </summary>
        </member>
        <member name="M:BEditor.Data.Bindings.IBindable`1.Bind(BEditor.Data.Bindings.IBindable{`0})">
            <summary>
            Bind this object to <paramref name="bindable"/>.
            </summary>
            <param name="bindable">The object to bind.</param>
        </member>
        <member name="T:BEditor.Data.ClipApplyArgs">
            <summary>
            Represents a data to be passed to the <see cref="T:BEditor.Data.ClipElement"/> at applying time.
            </summary>
        </member>
        <member name="M:BEditor.Data.ClipApplyArgs.#ctor(BEditor.Media.Frame,BEditor.Data.ApplyType)">
            <summary>
            Initializes a new instance of the <see cref="T:BEditor.Data.ClipApplyArgs"/> class.
            </summary>
            <param name="frame">The frame to apply.</param>
            <param name="type">The apply type.</param>
        </member>
        <member name="M:BEditor.Data.ClipApplyArgs.#ctor(BEditor.Media.Frame,BEditor.Graphics.GraphicsContext,BEditor.Audio.SamplingContext,BEditor.Drawing.DrawingContext,BEditor.Data.ApplyType)">
            <summary>
            Initializes a new instance of the <see cref="T:BEditor.Data.ClipApplyArgs"/> class.
            </summary>
            <param name="frame">The frame to render.</param>
            <param name="graphicsContext">The graphics context.</param>
            <param name="samplingContext">The sampling context.</param>
            <param name="drawingContext">The drawing context.</param>
            <param name="type">The rendering type.</param>
        </member>
        <member name="P:BEditor.Data.ClipApplyArgs.Frame">
            <summary>
            Gets the frame to render.
            </summary>
        </member>
        <member name="P:BEditor.Data.ClipApplyArgs.Handled">
            <summary>
            Gets or sets a value indicating whether the process has been executed or not.
            </summary>
        </member>
        <member name="P:BEditor.Data.ClipApplyArgs.Type">
            <summary>
            Gets the rendering type.
            </summary>
        </member>
        <member name="P:BEditor.Data.ClipApplyArgs.Contexts">
            <summary>
            Gets the contexts.
            </summary>
        </member>
        <member name="T:BEditor.Data.ClipElement">
            <summary>
            Represents a data of a clip to be placed in the timeline.
            </summary>
            <summary>
            Represents a data of a clip to be placed in the timeline.
            </summary>
            <summary>
            Represents a data of a clip to be placed in the timeline.
            </summary>
        </member>
        <member name="T:BEditor.Data.ClipElement.AddCommand">
            <summary>
            指定したシーンに新しいクリップを追加するコマンドを表します.
            </summary>
        </member>
        <member name="M:BEditor.Data.ClipElement.AddCommand.#ctor(BEditor.Data.Scene,BEditor.Media.Frame,System.Int32,BEditor.Data.ObjectMetadata)">
            <summary>
            Initializes a new instance of the <see cref="T:BEditor.Data.ClipElement.AddCommand"/> class.
            </summary>
            <param name="scene">新しいクリップを追加するシーンです.</param>
            <param name="startFrame">新しいクリップの開始フレームです.</param>
            <param name="layer">新しいクリップの配置レイヤーです.</param>
            <param name="metadata">新しいクリップのオブジェクトのメタデータです.</param>
        </member>
        <member name="M:BEditor.Data.ClipElement.AddCommand.#ctor(BEditor.Data.Scene,BEditor.Media.Frame,System.Int32,BEditor.Data.ObjectElement)">
            <summary>
            Initializes a new instance of the <see cref="T:BEditor.Data.ClipElement.AddCommand"/> class.
            </summary>
            <param name="scene">新しいクリップを追加するシーンです.</param>
            <param name="startFrame">新しいクリップの開始フレームです.</param>
            <param name="layer">新しいクリップの配置レイヤーです.</param>
            <param name="obj">新しいクリップのオブジェクトです.</param>
        </member>
        <member name="P:BEditor.Data.ClipElement.AddCommand.Clip">
            <summary>
            Gets the clip to add.
            </summary>
        </member>
        <member name="P:BEditor.Data.ClipElement.AddCommand.Name">
            <inheritdoc/>
        </member>
        <member name="M:BEditor.Data.ClipElement.AddCommand.Do">
            <inheritdoc/>
        </member>
        <member name="M:BEditor.Data.ClipElement.AddCommand.Redo">
            <inheritdoc/>
        </member>
        <member name="M:BEditor.Data.ClipElement.AddCommand.Undo">
            <inheritdoc/>
        </member>
        <member name="T:BEditor.Data.ClipElement.RemoveCommand">
            <summary>
            クリップを削除するコマンドを表します.
            </summary>
        </member>
        <member name="M:BEditor.Data.ClipElement.RemoveCommand.#ctor(BEditor.Data.ClipElement)">
            <summary>
            Initializes a new instance of the <see cref="T:BEditor.Data.ClipElement.RemoveCommand"/> class.
            </summary>
            <param name="clip">削除するクリップです.</param>
        </member>
        <member name="P:BEditor.Data.ClipElement.RemoveCommand.Name">
            <inheritdoc/>
        </member>
        <member name="M:BEditor.Data.ClipElement.RemoveCommand.Do">
            <inheritdoc/>
        </member>
        <member name="M:BEditor.Data.ClipElement.RemoveCommand.Redo">
            <inheritdoc/>
        </member>
        <member name="M:BEditor.Data.ClipElement.RemoveCommand.Undo">
            <inheritdoc/>
        </member>
        <member name="T:BEditor.Data.ClipElement.MoveCommand">
            <summary>
            クリップを移動するコマンドを表します.
            </summary>
        </member>
        <member name="M:BEditor.Data.ClipElement.MoveCommand.#ctor(BEditor.Data.ClipElement,BEditor.Media.Frame,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:BEditor.Data.ClipElement.MoveCommand"/> class.
            </summary>
            <param name="clip">移動するクリップです.</param>
            <param name="newframe">新しい開始フレームです.</param>
            <param name="newlayer">新しい配置レイヤーです.</param>
        </member>
        <member name="P:BEditor.Data.ClipElement.MoveCommand.Name">
            <inheritdoc/>
        </member>
        <member name="M:BEditor.Data.ClipElement.MoveCommand.Do">
            <inheritdoc/>
        </member>
        <member name="M:BEditor.Data.ClipElement.MoveCommand.Redo">
            <inheritdoc/>
        </member>
        <member name="M:BEditor.Data.ClipElement.MoveCommand.Undo">
            <inheritdoc/>
        </member>
        <member name="T:BEditor.Data.ClipElement.LengthChangeCommand">
            <summary>
            クリップの長さを変更するコマンドを表します.
            </summary>
        </member>
        <member name="P:BEditor.Data.ClipElement.LengthChangeCommand.Name">
            <inheritdoc/>
        </member>
        <member name="M:BEditor.Data.ClipElement.LengthChangeCommand.Do">
            <inheritdoc/>
        </member>
        <member name="M:BEditor.Data.ClipElement.LengthChangeCommand.Redo">
            <inheritdoc/>
        </member>
        <member name="M:BEditor.Data.ClipElement.LengthChangeCommand.Undo">
            <inheritdoc/>
        </member>
        <member name="T:BEditor.Data.ClipElement.SplitCommand">
            <summary>
            クリップを分割するコマンドを表します.
            </summary>
        </member>
        <member name="M:BEditor.Data.ClipElement.SplitCommand.#ctor(BEditor.Data.ClipElement,BEditor.Media.Frame)">
            <summary>
            Initializes a new instance of the <see cref="T:BEditor.Data.ClipElement.SplitCommand"/> class.
            </summary>
            <param name="clip">分割するクリップです.</param>
            <param name="frame">分割するフレームです.</param>
        </member>
        <member name="P:BEditor.Data.ClipElement.SplitCommand.Before">
            <summary>
            Gets the clip before the split frame.
            </summary>
        </member>
        <member name="P:BEditor.Data.ClipElement.SplitCommand.After">
            <summary>
            Gets the clip after the split frame.
            </summary>
        </member>
        <member name="P:BEditor.Data.ClipElement.SplitCommand.Name">
            <inheritdoc/>
        </member>
        <member name="M:BEditor.Data.ClipElement.SplitCommand.Do">
            <inheritdoc/>
        </member>
        <member name="M:BEditor.Data.ClipElement.SplitCommand.Redo">
            <inheritdoc/>
        </member>
        <member name="M:BEditor.Data.ClipElement.SplitCommand.Undo">
            <inheritdoc/>
        </member>
        <member name="M:BEditor.Data.ClipElement.#ctor(BEditor.Media.Frame,BEditor.Media.Frame,System.Int32,BEditor.Data.Scene,BEditor.Data.ObjectMetadata)">
            <summary>
            Initializes a new instance of the <see cref="T:BEditor.Data.ClipElement"/> class.
            </summary>
            <param name="start">The starting frame of the clip.</param>
            <param name="end">The ending frame of the clip.</param>
            <param name="layer">The layer number of the clip.</param>
            <param name="scene">The scene where this clip will be placed.</param>
            <param name="metadata">The metadata for the <see cref="T:BEditor.Data.ObjectElement"/> contained in this clip.</param>
        </member>
        <member name="M:BEditor.Data.ClipElement.#ctor(BEditor.Media.Frame,BEditor.Media.Frame,System.Int32,BEditor.Data.Scene,BEditor.Data.ObjectElement)">
            <summary>
            Initializes a new instance of the <see cref="T:BEditor.Data.ClipElement"/> class.
            </summary>
            <param name="start">The starting frame of the clip.</param>
            <param name="end">The ending frame of the clip.</param>
            <param name="layer">The layer number of the clip.</param>
            <param name="scene">The scene where this clip will be placed.</param>
            <param name="obj">The <see cref="T:BEditor.Data.ObjectElement"/> contained in this clip.</param>
        </member>
        <member name="E:BEditor.Data.ClipElement.Moved">
            <summary>
            Occurs when a clip is moved.
            </summary>
        </member>
        <member name="E:BEditor.Data.ClipElement.LengthChanging">
            <summary>
            Occurs when the length of the clip is changing.
            </summary>
        </member>
        <member name="E:BEditor.Data.ClipElement.LengthChanged">
            <summary>
            Occurs when the length of the clip is changed.
            </summary>
        </member>
        <member name="E:BEditor.Data.ClipElement.Splitted">
            <summary>
            Occurs when a clip is splitted.
            </summary>
        </member>
        <member name="P:BEditor.Data.ClipElement.Start">
            <summary>
            Gets or sets the starting frame of this <see cref="T:BEditor.Data.ClipElement"/>.
            </summary>
        </member>
        <member name="P:BEditor.Data.ClipElement.End">
            <summary>
            Gets or sets the ending frame of this <see cref="T:BEditor.Data.ClipElement"/>.
            </summary>
        </member>
        <member name="P:BEditor.Data.ClipElement.Length">
            <summary>
            Gets the length of this <see cref="T:BEditor.Data.ClipElement"/>.
            </summary>
        </member>
        <member name="P:BEditor.Data.ClipElement.Layer">
            <summary>
            Gets or sets the layer where this <see cref="T:BEditor.Data.ClipElement"/> will be placed.
            </summary>
        </member>
        <member name="P:BEditor.Data.ClipElement.LabelText">
            <summary>
            Gets or sets the character displayed in this <see cref="T:BEditor.Data.ClipElement"/>.
            </summary>
        </member>
        <member name="P:BEditor.Data.ClipElement.Parent">
            <inheritdoc/>
        </member>
        <member name="P:BEditor.Data.ClipElement.Metadata">
            <summary>
            Gets the metadata for the <see cref="T:BEditor.Data.ObjectElement"/> contained in this <see cref="T:BEditor.Data.ClipElement"/>.
            </summary>
        </member>
        <member name="P:BEditor.Data.ClipElement.Effect">
            <summary>
            Gets the effects included in this <see cref="T:BEditor.Data.ClipElement"/>.
            </summary>
        </member>
        <member name="P:BEditor.Data.ClipElement.Children">
            <inheritdoc/>
        </member>
        <member name="M:BEditor.Data.ClipElement.Clone">
            <inheritdoc cref="M:System.ICloneable.Clone"/>
        </member>
        <member name="M:BEditor.Data.ClipElement.GetObjectData(System.Text.Json.Utf8JsonWriter)">
            <inheritdoc/>
        </member>
        <member name="M:BEditor.Data.ClipElement.SetObjectData(BEditor.Data.DeserializeContext)">
            <inheritdoc/>
        </member>
        <member name="M:BEditor.Data.ClipElement.AddEffect(BEditor.Data.EffectElement)">
            <summary>
            Create a command to add an <see cref="T:BEditor.Data.EffectElement"/> to this <see cref="T:BEditor.Data.ClipElement"/>.
            </summary>
            <param name="effect">The <see cref="T:BEditor.Data.EffectElement"/> to add.</param>
            <returns>Created <see cref="T:BEditor.Command.IRecordCommand"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="effect"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:BEditor.Data.ClipElement.RemoveEffect(BEditor.Data.EffectElement)">
            <summary>
            Create a command to remove an <see cref="T:BEditor.Data.EffectElement"/> to this <see cref="T:BEditor.Data.ClipElement"/>.
            </summary>
            <param name="effect">The <see cref="T:BEditor.Data.EffectElement"/> to remove.</param>
            <returns>Created <see cref="T:BEditor.Command.IRecordCommand"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="effect"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:BEditor.Data.ClipElement.MoveFrameLayer(BEditor.Media.Frame,System.Int32)">
            <summary>
            Create a command to move this <see cref="T:BEditor.Data.ClipElement"/> frames and layers.
            </summary>
            <param name="newframe">The new starting frame of this <see cref="T:BEditor.Data.ClipElement"/>.</param>
            <param name="newlayer">The new layer of this <see cref="T:BEditor.Data.ClipElement"/>.</param>
            <returns>Created <see cref="T:BEditor.Command.IRecordCommand"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="newframe"/> or <paramref name="newlayer"/> is less than 0.</exception>
        </member>
        <member name="M:BEditor.Data.ClipElement.ChangeLength(BEditor.Media.Frame,BEditor.Media.Frame)">
            <summary>
            Create a command to change the length of this <see cref="T:BEditor.Data.ClipElement"/>.
            </summary>
            <param name="start">The new starting frame of this <see cref="T:BEditor.Data.ClipElement"/>.</param>
            <param name="end">The new ending frame of this <see cref="T:BEditor.Data.ClipElement"/>.</param>
            <returns>Created <see cref="T:BEditor.Command.IRecordCommand"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="start"/> or <paramref name="end"/> is less than 0.</exception>
        </member>
        <member name="M:BEditor.Data.ClipElement.ChangeLength(BEditor.Data.ClipLengthChangeAnchor,BEditor.Media.Frame)">
            <summary>
            Create a command to change the length of this <see cref="T:BEditor.Data.ClipElement"/>.
            </summary>
            <param name="anchor">The anchor.</param>
            <param name="length">The new length of this <see cref="T:BEditor.Data.ClipElement"/>.</param>
            <returns>Created <see cref="T:BEditor.Command.IRecordCommand"/>.</returns>
        </member>
        <member name="M:BEditor.Data.ClipElement.Split(BEditor.Media.Frame)">
            <summary>
            Create a command to split this clip at the specified frame.
            </summary>
            <param name="frame">The frame to be split.</param>
            <returns>Created <see cref="T:BEditor.Command.IRecordCommand"/>.</returns>
        </member>
        <member name="M:BEditor.Data.ClipElement.Apply(BEditor.Data.ClipApplyArgs)">
            <summary>
            Apply this <see cref="T:BEditor.Data.ClipElement"/>.
            </summary>
            <param name="args">The data used to apply the clip.</param>
            <exception cref="T:BEditor.Data.RenderingException">Faileds to rendering.</exception>
        </member>
        <member name="M:BEditor.Data.ClipElement.PreviewApply(BEditor.Data.ClipApplyArgs)">
            <summary>
            Prepare this <see cref="T:BEditor.Data.ClipElement"/> for applying.
            </summary>
            <param name="args">The data used to applying the clip.</param>
            <exception cref="T:BEditor.Data.RenderingException">Faileds to rendering.</exception>
        </member>
        <member name="M:BEditor.Data.ClipElement.System#ICloneable#Clone">
            <inheritdoc/>
        </member>
        <member name="M:BEditor.Data.ClipElement.MoveTo(BEditor.Media.Frame)">
            <summary>
            指定した開始フレームにクリップを移動します.
            </summary>
            <param name="start">開始フレームです.</param>
        </member>
        <member name="T:BEditor.Data.ClipLengthChangeAnchor">
            <summary>
            Types of anchors used in <see cref="T:BEditor.Data.ClipLengthChangedEventArgs"/>.
            </summary>
        </member>
        <member name="F:BEditor.Data.ClipLengthChangeAnchor.Start">
            <summary>
            The starting frame.
            </summary>
        </member>
        <member name="F:BEditor.Data.ClipLengthChangeAnchor.End">
            <summary>
            The ending frame.
            </summary>
        </member>
        <member name="T:BEditor.Data.ClipLengthChangedEventArgs">
            <summary>
            Provides data for the <see cref="E:BEditor.Data.ClipElement.LengthChanged"/> event.
            </summary>
        </member>
        <member name="M:BEditor.Data.ClipLengthChangedEventArgs.#ctor(BEditor.Data.ClipLengthChangeAnchor,BEditor.Media.Frame,BEditor.Media.Frame)">
            <summary>
            Initializes a new instance of the <see cref="T:BEditor.Data.ClipLengthChangedEventArgs"/> class.
            </summary>
            <param name="anchor">The anchor.</param>
            <param name="newLength">The new length.</param>
            <param name="oldLength">The old length.</param>
        </member>
        <member name="P:BEditor.Data.ClipLengthChangedEventArgs.Anchor">
            <summary>
            Gets the anchor.
            </summary>
        </member>
        <member name="P:BEditor.Data.ClipLengthChangedEventArgs.NewLength">
            <summary>
            Gets the new length.
            </summary>
        </member>
        <member name="P:BEditor.Data.ClipLengthChangedEventArgs.OldLength">
            <summary>
            Gets the old length.
            </summary>
        </member>
        <member name="T:BEditor.Data.ClipLengthChangingEventArgs">
            <summary>
            Provides data for the <see cref="E:BEditor.Data.ClipElement.LengthChanging"/> event.
            </summary>
        </member>
        <member name="M:BEditor.Data.ClipLengthChangingEventArgs.#ctor(BEditor.Data.ClipLengthChangeAnchor,BEditor.Media.Frame,BEditor.Media.Frame)">
            <summary>
            Initializes a new instance of the <see cref="T:BEditor.Data.ClipLengthChangingEventArgs"/> class.
            </summary>
            <param name="anchor">The anchor.</param>
            <param name="newLength">The new length.</param>
            <param name="oldLength">The old length.</param>
        </member>
        <member name="P:BEditor.Data.ClipLengthChangingEventArgs.Anchor">
            <summary>
            Gets or sets the anchor.
            </summary>
        </member>
        <member name="P:BEditor.Data.ClipLengthChangingEventArgs.NewLength">
            <summary>
            Gets or sets the new length.
            </summary>
        </member>
        <member name="P:BEditor.Data.ClipLengthChangingEventArgs.OldLength">
            <summary>
            Gets the old length.
            </summary>
        </member>
        <member name="T:BEditor.Data.ClipMovedEventArgs">
            <summary>
            Provides data for the <see cref="E:BEditor.Data.ClipElement.Moved"/> event.
            </summary>
        </member>
        <member name="M:BEditor.Data.ClipMovedEventArgs.#ctor(System.Int32,System.Int32,BEditor.Media.Frame,BEditor.Media.Frame)">
            <summary>
            Initializes a new instance of the <see cref="T:BEditor.Data.ClipMovedEventArgs"/> class.
            </summary>
            <param name="newLayer">The new layer.</param>
            <param name="oldLayer">The old layer.</param>
            <param name="newStart">The new starting frame.</param>
            <param name="oldStart">The old starting frame.</param>
        </member>
        <member name="P:BEditor.Data.ClipMovedEventArgs.NewLayer">
            <summary>
            Gets the new layer.
            </summary>
        </member>
        <member name="P:BEditor.Data.ClipMovedEventArgs.OldLayer">
            <summary>
            Gets the old layer.
            </summary>
        </member>
        <member name="P:BEditor.Data.ClipMovedEventArgs.NewStart">
            <summary>
            Gets the new starting frame.
            </summary>
        </member>
        <member name="P:BEditor.Data.ClipMovedEventArgs.OldStart">
            <summary>
            Gets the old starting frame.
            </summary>
        </member>
        <member name="T:BEditor.Data.ClipSplittedEventArgs">
            <summary>
            Provides data for the <see cref="E:BEditor.Data.ClipElement.Splitted"/> event.
            </summary>
        </member>
        <member name="M:BEditor.Data.ClipSplittedEventArgs.#ctor(BEditor.Data.ClipElement,BEditor.Data.ClipElement)">
            <summary>
            Initializes a new instance of the <see cref="T:BEditor.Data.ClipSplittedEventArgs"/> class.
            </summary>
            <param name="before">The clip before the split frame.</param>
            <param name="after">the clip after the split frame.</param>
        </member>
        <member name="P:BEditor.Data.ClipSplittedEventArgs.Before">
            <summary>
            Gets the clip before the split frame.
            </summary>
        </member>
        <member name="P:BEditor.Data.ClipSplittedEventArgs.After">
            <summary>
            Gets the clip after the split frame.
            </summary>
        </member>
        <member name="T:BEditor.Data.EffectApplyArgs">
            <summary>
            Represents data that is passed to <see cref="T:BEditor.Data.EffectElement"/> when it is applied.
            </summary>
        </member>
        <member name="M:BEditor.Data.EffectApplyArgs.#ctor(BEditor.Media.Frame,BEditor.Data.ApplyType)">
            <summary>
            Initializes a new instance of the <see cref="T:BEditor.Data.EffectApplyArgs"/> class.
            </summary>
            <param name="frame">The frame to render.</param>
            <param name="type">The rendering type.</param>
        </member>
        <member name="M:BEditor.Data.EffectApplyArgs.#ctor(BEditor.Media.Frame,System.ValueTuple{BEditor.Graphics.GraphicsContext,BEditor.Audio.SamplingContext,BEditor.Drawing.DrawingContext},BEditor.Data.ApplyType)">
            <summary>
            Initializes a new instance of the <see cref="T:BEditor.Data.EffectApplyArgs"/> class.
            </summary>
            <param name="frame">The frame to render.</param>
            <param name="contexts">The contexts.</param>
            <param name="type">The rendering type.</param>
        </member>
        <member name="M:BEditor.Data.EffectApplyArgs.#ctor(BEditor.Media.Frame,BEditor.Graphics.GraphicsContext,BEditor.Audio.SamplingContext,BEditor.Drawing.DrawingContext,BEditor.Data.ApplyType)">
            <summary>
            Initializes a new instance of the <see cref="T:BEditor.Data.EffectApplyArgs"/> class.
            </summary>
            <param name="frame">The frame to render.</param>
            <param name="graphicsContext">The graphics context.</param>
            <param name="samplingContext">The sampling context.</param>
            <param name="drawingContext">The drawing context.</param>
            <param name="type">The rendering type.</param>
        </member>
        <member name="P:BEditor.Data.EffectApplyArgs.Frame">
            <summary>
            Gets the frame to render.
            </summary>
        </member>
        <member name="P:BEditor.Data.EffectApplyArgs.Handled">
            <summary>
            Gets or sets a value indicating whether the process has been executed or not.
            </summary>
        </member>
        <member name="P:BEditor.Data.EffectApplyArgs.Type">
            <summary>
            Gets the rendering type.
            </summary>
        </member>
        <member name="P:BEditor.Data.EffectApplyArgs.Contexts">
            <summary>
            Gets the contexts.
            </summary>
        </member>
        <member name="T:BEditor.Data.EffectApplyArgs`1">
            <summary>
            Represents data that is passed to <see cref="T:BEditor.Data.EffectElement"/> when it is applied.
            </summary>
            <typeparam name="T">The type of value to pass to the <see cref="M:BEditor.Data.EffectElement.Apply(BEditor.Data.EffectApplyArgs)"/> method.</typeparam>
        </member>
        <member name="M:BEditor.Data.EffectApplyArgs`1.#ctor(BEditor.Media.Frame,`0,BEditor.Data.ApplyType)">
            <summary>
            Initializes a new instance of the <see cref="T:BEditor.Data.EffectApplyArgs`1"/> class.
            </summary>
            <param name="frame">The frame to render.</param>
            <param name="value">The value used to apply the effect.</param>
            <param name="type">The rendering type.</param>
        </member>
        <member name="M:BEditor.Data.EffectApplyArgs`1.#ctor(BEditor.Media.Frame,`0,System.ValueTuple{BEditor.Graphics.GraphicsContext,BEditor.Audio.SamplingContext,BEditor.Drawing.DrawingContext},BEditor.Data.ApplyType)">
            <summary>
            Initializes a new instance of the <see cref="T:BEditor.Data.EffectApplyArgs`1"/> class.
            </summary>
            <param name="frame">The frame to render.</param>
            <param name="value">The value used to apply the effect.</param>
            <param name="contexts">The contexts.</param>
            <param name="type">The rendering type.</param>
        </member>
        <member name="M:BEditor.Data.EffectApplyArgs`1.#ctor(BEditor.Media.Frame,`0,BEditor.Graphics.GraphicsContext,BEditor.Audio.SamplingContext,BEditor.Drawing.DrawingContext,BEditor.Data.ApplyType)">
            <summary>
            Initializes a new instance of the <see cref="T:BEditor.Data.EffectApplyArgs`1"/> class.
            </summary>
            <param name="frame">The frame to render.</param>
            <param name="value">The value used to apply the effect.</param>
            <param name="graphicsContext">The graphics context.</param>
            <param name="samplingContext">The sampling context.</param>
            <param name="drawingContext">The drawing context.</param>
            <param name="type">The rendering type.</param>
        </member>
        <member name="P:BEditor.Data.EffectApplyArgs`1.Value">
            <summary>
            Gets or sets the value used to apply the effect.
            </summary>
        </member>
        <member name="T:BEditor.Data.EffectElement">
            <summary>
            Represents a base class of the effect.
            </summary>
        </member>
        <member name="P:BEditor.Data.EffectElement.Children">
            <inheritdoc/>
        </member>
        <member name="P:BEditor.Data.EffectElement.Name">
            <summary>
            Gets the name of this <see cref="T:BEditor.Data.EffectElement"/>.
            </summary>
        </member>
        <member name="P:BEditor.Data.EffectElement.IsEnabled">
            <summary>
            Gets or sets a value indicating whether if this <see cref="T:BEditor.Data.EffectElement"/> is enabled.
            </summary>
            <remarks><see langword="true"/> if the <see cref="T:BEditor.Data.EffectElement"/> is enabled or <see langword="false"/> otherwise.</remarks>
        </member>
        <member name="P:BEditor.Data.EffectElement.IsExpanded">
            <summary>
            Gets or sets a value indicating whether the expander is open.
            </summary>
            <remarks><see langword="true"/> if the expander is open, otherwise <see langword="false"/>.</remarks>
        </member>
        <member name="P:BEditor.Data.EffectElement.Parent">
            <inheritdoc/>
        </member>
        <member name="P:BEditor.Data.EffectElement.BEditor#Data#IEditingObject#Name">
            <inheritdoc/>
        </member>
        <member name="M:BEditor.Data.EffectElement.GetProperties">
            <summary>
            Gets the <see cref="T:BEditor.Data.Property.PropertyElement"/> to display on the GUI.
            </summary>
            <returns>Returns the <see cref="T:BEditor.Data.Property.PropertyElement"/> to display on the GUI.</returns>
        </member>
        <member name="M:BEditor.Data.EffectElement.Clone">
            <inheritdoc/>
        </member>
        <member name="M:BEditor.Data.EffectElement.Apply(BEditor.Data.EffectApplyArgs)">
            <summary>
            Apply the effect.
            </summary>
            <param name="args">The data used to apply the effect.</param>
        </member>
        <member name="M:BEditor.Data.EffectElement.PreviewApply(BEditor.Data.EffectApplyArgs)">
            <summary>
            It will be called before applying.
            </summary>
            <param name="args">The data used to apply the effect.</param>
        </member>
        <member name="M:BEditor.Data.EffectElement.ChangeIsEnabled(System.Boolean)">
            <summary>
            Create a command to change whether the <see cref="T:BEditor.Data.EffectElement"/> is enabled.
            </summary>
            <param name="value">New value for <see cref="P:BEditor.Data.EffectElement.IsEnabled"/>.</param>
            <returns>Created <see cref="T:BEditor.Command.IRecordCommand"/>.</returns>
        </member>
        <member name="M:BEditor.Data.EffectElement.BringForward">
            <summary>
            Create a command to bring the order of this <see cref="T:BEditor.Data.EffectElement"/> forward.
            </summary>
            <returns>Created <see cref="T:BEditor.Command.IRecordCommand"/>.</returns>
        </member>
        <member name="M:BEditor.Data.EffectElement.SendBackward">
            <summary>
            Create a command to send the order of this <see cref="T:BEditor.Data.EffectElement"/> backward.
            </summary>
            <returns>Created <see cref="T:BEditor.Command.IRecordCommand"/>.</returns>
        </member>
        <member name="M:BEditor.Data.EffectElement.GetObjectData(System.Text.Json.Utf8JsonWriter)">
            <inheritdoc/>
        </member>
        <member name="M:BEditor.Data.EffectElement.SetObjectData(BEditor.Data.DeserializeContext)">
            <inheritdoc/>
        </member>
        <member name="T:BEditor.Data.EffectElement.RemoveCommand">
            <summary>
            クリップからエフェクトを削除するコマンドを表します.
            </summary>
        </member>
        <member name="M:BEditor.Data.EffectElement.RemoveCommand.#ctor(BEditor.Data.EffectElement,BEditor.Data.ClipElement)">
            <summary>
            Initializes a new instance of the <see cref="T:BEditor.Data.EffectElement.RemoveCommand"/> class.
            </summary>
            <param name="effect">削除するエフェクトです.</param>
            <param name="clip">削除するエフェクトを含むクリップです.</param>
        </member>
        <member name="P:BEditor.Data.EffectElement.RemoveCommand.Name">
            <inheritdoc/>
        </member>
        <member name="M:BEditor.Data.EffectElement.RemoveCommand.Do">
            <inheritdoc/>
        </member>
        <member name="M:BEditor.Data.EffectElement.RemoveCommand.Redo">
            <inheritdoc/>
        </member>
        <member name="M:BEditor.Data.EffectElement.RemoveCommand.Undo">
            <inheritdoc/>
        </member>
        <member name="T:BEditor.Data.EffectElement.AddCommand">
            <summary>
            クリップにエフェクトを追加するコマンドを表します.
            </summary>
        </member>
        <member name="M:BEditor.Data.EffectElement.AddCommand.#ctor(BEditor.Data.EffectElement,BEditor.Data.ClipElement)">
            <summary>
            Initializes a new instance of the <see cref="T:BEditor.Data.EffectElement.AddCommand"/> class.
            </summary>
            <param name="effect">追加するエフェクトです.</param>
            <param name="clip">エフェクトを追加するクリップです.</param>
        </member>
        <member name="P:BEditor.Data.EffectElement.AddCommand.Name">
            <inheritdoc/>
        </member>
        <member name="M:BEditor.Data.EffectElement.AddCommand.Do">
            <inheritdoc/>
        </member>
        <member name="M:BEditor.Data.EffectElement.AddCommand.Redo">
            <inheritdoc/>
        </member>
        <member name="M:BEditor.Data.EffectElement.AddCommand.Undo">
            <inheritdoc/>
        </member>
        <member name="T:BEditor.Data.EffectElement.EmptyClass">
            <summary>
            空のエフェクトを表します.
            </summary>
        </member>
        <member name="P:BEditor.Data.EffectElement.EmptyClass.Name">
            <inheritdoc/>
        </member>
        <member name="M:BEditor.Data.EffectElement.EmptyClass.GetProperties">
            <inheritdoc/>
        </member>
        <member name="M:BEditor.Data.EffectElement.EmptyClass.Apply(BEditor.Data.EffectApplyArgs)">
            <inheritdoc/>
        </member>
        <member name="T:BEditor.Data.EffectMetadata">
            <summary>
            The metadata of <see cref="T:BEditor.Data.EffectElement"/>.
            </summary>
        </member>
        <member name="M:BEditor.Data.EffectMetadata.#ctor(System.String,System.Func{BEditor.Data.EffectElement},System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:BEditor.Data.EffectMetadata"/> class.
            </summary>
            <param name="name">The name of the effect element.</param>
            <param name="createFunc">Create a new instance of the <see cref="T:BEditor.Data.EffectElement"/> object.</param>
            <param name="type">The type of the object that inherits from <see cref="T:BEditor.Data.EffectElement"/>.</param>
        </member>
        <member name="M:BEditor.Data.EffectMetadata.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:BEditor.Data.EffectMetadata"/> class.
            </summary>
            <param name="name">The name of the <see cref="T:BEditor.Data.EffectElement"/>.</param>
        </member>
        <member name="M:BEditor.Data.EffectMetadata.#ctor(System.String,System.Linq.Expressions.Expression{System.Func{BEditor.Data.EffectElement}})">
            <summary>
            Initializes a new instance of the <see cref="T:BEditor.Data.EffectMetadata"/> class.
            </summary>
            <param name="name">The name of the <see cref="T:BEditor.Data.EffectElement"/>.</param>
            <param name="create">This <see cref="T:System.Func`1"/> gets a new instance of the <see cref="T:BEditor.Data.EffectElement"/> object.</param>
        </member>
        <member name="P:BEditor.Data.EffectMetadata.LoadedEffects">
            <summary>
            Gets the loaded <see cref="T:BEditor.Data.EffectMetadata"/>.
            </summary>
        </member>
        <member name="P:BEditor.Data.EffectMetadata.Name">
            <summary>
            Gets the name of the effect element.
            </summary>
        </member>
        <member name="P:BEditor.Data.EffectMetadata.CreateFunc">
            <summary>
            Create a new instance of the <see cref="T:BEditor.Data.EffectElement"/> object.
            </summary>
        </member>
        <member name="P:BEditor.Data.EffectMetadata.Type">
            <summary>
            Gets the type of the object that inherits from <see cref="T:BEditor.Data.EffectElement"/>.
            </summary>
        </member>
        <member name="P:BEditor.Data.EffectMetadata.Children">
            <summary>
            Gets or sets the child elements of the group.
            </summary>
        </member>
        <member name="M:BEditor.Data.EffectMetadata.Create``1(System.String)">
            <summary>
            Create the <see cref="T:BEditor.Data.EffectMetadata"/>.
            </summary>
            <typeparam name="T">The type of object that inherits from <see cref="T:BEditor.Data.EffectElement"/>.</typeparam>
            <param name="name">The name of the effect element.</param>
            <returns>A new instance of <see cref="T:BEditor.Data.EffectMetadata"/>.</returns>
        </member>
        <member name="T:BEditor.Data.PlayerState">
            <summary>
            Represents the status of <see cref="T:BEditor.Data.IPlayer"/>.
            </summary>
        </member>
        <member name="F:BEditor.Data.PlayerState.Playing">
            <summary>
            Represents that the <see cref="T:BEditor.Data.IPlayer"/> is playing.
            </summary>
        </member>
        <member name="F:BEditor.Data.PlayerState.Stop">
            <summary>
            Represents that the <see cref="T:BEditor.Data.IPlayer"/> is stopped.
            </summary>
        </member>
        <member name="T:BEditor.Data.IPlayer">
            <summary>
            Represents a media player.
            </summary>
        </member>
        <member name="E:BEditor.Data.IPlayer.Playing">
            <summary>
            Occurs when playback is started.
            </summary>
        </member>
        <member name="E:BEditor.Data.IPlayer.Stopped">
            <summary>
            Occurs after playback has been stopped.
            </summary>
        </member>
        <member name="P:BEditor.Data.IPlayer.State">
            <summary>
            Gets the status of this <see cref="T:BEditor.Data.IPlayer"/>.
            </summary>
        </member>
        <member name="P:BEditor.Data.IPlayer.CurrentFrame">
            <summary>
            Gets the current frame in this <see cref="T:BEditor.Data.IPlayer"/>.
            </summary>
        </member>
        <member name="P:BEditor.Data.IPlayer.Speed">
            <summary>
            Gets or sets the speed of this <see cref="T:BEditor.Data.IPlayer"/>.
            </summary>
        </member>
        <member name="M:BEditor.Data.IPlayer.Play">
            <summary>
            Start playing.
            </summary>
        </member>
        <member name="M:BEditor.Data.IPlayer.Stop">
            <summary>
            Stop playing.
            </summary>
        </member>
        <member name="T:BEditor.Data.PlayingEventArgs">
            <summary>
            Represents the event argument at the start of playback.
            </summary>
        </member>
        <member name="M:BEditor.Data.PlayingEventArgs.#ctor(BEditor.Media.Frame)">
            <summary>
            Initializes a new instance of the <see cref="T:BEditor.Data.PlayingEventArgs"/> class.
            </summary>
            <param name="frame">The frame at the start of playback.</param>
        </member>
        <member name="P:BEditor.Data.PlayingEventArgs.StartFrame">
            <summary>
            Gets the frame at the start of playback.
            </summary>
        </member>
        <member name="T:BEditor.Data.Internals.ScenePlayer">
            <summary>
            Represents a <see cref="P:BEditor.Data.Internals.ScenePlayer.Scene"/> player.
            </summary>
        </member>
        <member name="M:BEditor.Data.Internals.ScenePlayer.#ctor(BEditor.Data.Scene)">
            <summary>
            Initializes a new instance of the <see cref="T:BEditor.Data.Internals.ScenePlayer"/> class.
            </summary>
            <param name="scene">This is the scene to play.</param>
        </member>
        <member name="E:BEditor.Data.Internals.ScenePlayer.Playing">
            <inheritdoc/>
        </member>
        <member name="E:BEditor.Data.Internals.ScenePlayer.Stopped">
            <inheritdoc/>
        </member>
        <member name="P:BEditor.Data.Internals.ScenePlayer.Scene">
            <summary>
            Gets the scene to play.
            </summary>
        </member>
        <member name="P:BEditor.Data.Internals.ScenePlayer.State">
            <inheritdoc/>
        </member>
        <member name="P:BEditor.Data.Internals.ScenePlayer.CurrentFrame">
            <inheritdoc/>
        </member>
        <member name="P:BEditor.Data.Internals.ScenePlayer.Speed">
            <inheritdoc/>
        </member>
        <member name="M:BEditor.Data.Internals.ScenePlayer.Play">
            <inheritdoc/>
        </member>
        <member name="M:BEditor.Data.Internals.ScenePlayer.Stop">
            <inheritdoc/>
        </member>
        <member name="M:BEditor.Data.Internals.ScenePlayer.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:BEditor.Data.ObjectElement">
            <summary>
            Represents a base class of the object.
            </summary>
        </member>
        <member name="M:BEditor.Data.ObjectElement.EffectFilter(BEditor.Data.EffectElement)">
            <summary>
            Filter a effect.
            </summary>
            <param name="effect">The effect to see if they should be added.</param>
            <returns>Returns <see langword="true"/> if this effect is to be added, <see langword="false"/> if not.</returns>
        </member>
        <member name="T:BEditor.Data.ObjectMetadata">
            <summary>
            The metadata of <see cref="T:BEditor.Data.ObjectElement"/>.
            </summary>
            <param name="Name">The name of the object element.</param>
            <param name="CreateFunc">This <see cref="T:System.Func`1"/> gets a new instance of the <see cref="T:BEditor.Data.ObjectElement"/> object.</param>
            <param name="Type">The type of the object that inherits from <see cref="T:BEditor.Data.ObjectElement"/>.</param>
        </member>
        <member name="M:BEditor.Data.ObjectMetadata.#ctor(System.String,System.Func{BEditor.Data.ObjectElement},System.Type)">
            <summary>
            The metadata of <see cref="T:BEditor.Data.ObjectElement"/>.
            </summary>
            <param name="Name">The name of the object element.</param>
            <param name="CreateFunc">This <see cref="T:System.Func`1"/> gets a new instance of the <see cref="T:BEditor.Data.ObjectElement"/> object.</param>
            <param name="Type">The type of the object that inherits from <see cref="T:BEditor.Data.ObjectElement"/>.</param>
        </member>
        <member name="M:BEditor.Data.ObjectMetadata.#ctor(System.String,System.Linq.Expressions.Expression{System.Func{BEditor.Data.ObjectElement}})">
            <summary>
            Initializes a new instance of the <see cref="T:BEditor.Data.ObjectMetadata"/> class.
            </summary>
            <param name="name">The name of the object element.</param>
            <param name="create">This <see cref="T:System.Func`1"/> gets a new instance of the <see cref="T:BEditor.Data.ObjectElement"/> object.</param>
        </member>
        <member name="P:BEditor.Data.ObjectMetadata.AccentColor">
            <summary>
            Gets the accent color.
            </summary>
        </member>
        <member name="P:BEditor.Data.ObjectMetadata.PathIcon">
            <summary>
            Gets the path data of an icon.
            </summary>
        </member>
        <member name="P:BEditor.Data.ObjectMetadata.CreateFromFile">
            <summary>
            Creates an instance from a file name.
            </summary>
        </member>
        <member name="P:BEditor.Data.ObjectMetadata.IsSupported">
            <summary>
            Check to see if the file name is supported.
            </summary>
        </member>
        <member name="P:BEditor.Data.ObjectMetadata.LoadedObjects">
            <summary>
            Gets the loaded <see cref="T:BEditor.Data.ObjectMetadata"/>.
            </summary>
        </member>
        <member name="M:BEditor.Data.ObjectMetadata.Create``1(System.String,System.Nullable{BEditor.Drawing.Color},System.String,System.Func{System.String,``0},System.Func{System.String,System.Boolean})">
            <summary>
            Create the <see cref="T:BEditor.Data.ObjectMetadata"/>.
            </summary>
            <typeparam name="T">The type of object that inherits from <see cref="T:BEditor.Data.ObjectElement"/>.</typeparam>
            <param name="name">The name of the object element.</param>
            <param name="accentColor">The accent color.</param>
            <param name="pathIcon">The path data of an icon.</param>
            <param name="createFromFile">Creates an instance from a file name.</param>
            <param name="isSupported">Check to see if the file name is supported.</param>
            <returns>A new instance of <see cref="T:BEditor.Data.ObjectMetadata"/>.</returns>
        </member>
        <member name="T:BEditor.Data.Primitive.AudioEffect">
            <summary>
            Represents an effect that can be added to an <see cref="T:BEditor.Data.Primitive.AudioObject"/>.
            </summary>
        </member>
        <member name="M:BEditor.Data.Primitive.AudioEffect.Apply(BEditor.Data.EffectApplyArgs{BEditor.Media.Sound{BEditor.Media.PCM.StereoPCMFloat}})">
            <inheritdoc cref="M:BEditor.Data.Primitive.AudioEffect.Apply(BEditor.Data.EffectApplyArgs{BEditor.Media.Sound{BEditor.Media.PCM.StereoPCMFloat}})"/>
        </member>
        <member name="M:BEditor.Data.Primitive.AudioEffect.Apply(BEditor.Data.EffectApplyArgs)">
            <inheritdoc/>
        </member>
        <member name="T:BEditor.Data.Primitive.AudioObject">
            <summary>
            Represents the base class of the object that samples the audio.
            </summary>
        </member>
        <member name="F:BEditor.Data.Primitive.AudioObject.VolumeProperty">
            <summary>
            Defines the <see cref="P:BEditor.Data.Primitive.AudioObject.Volume"/> property.
            </summary>
        </member>
        <member name="M:BEditor.Data.Primitive.AudioObject.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:BEditor.Data.Primitive.AudioObject"/> class.
            </summary>
        </member>
        <member name="P:BEditor.Data.Primitive.AudioObject.Volume">
            <summary>
            Gets the volume.
            </summary>
        </member>
        <member name="M:BEditor.Data.Primitive.AudioObject.Apply(BEditor.Data.EffectApplyArgs)">
            <inheritdoc/>
        </member>
        <member name="M:BEditor.Data.Primitive.AudioObject.OnSample(BEditor.Data.EffectApplyArgs)">
            <inheritdoc cref="M:BEditor.Data.Primitive.AudioObject.Apply(BEditor.Data.EffectApplyArgs)"/>
        </member>
        <member name="T:BEditor.Data.Primitive.ImageEffect">
            <summary>
            Represents an effect that can be added to an <see cref="T:BEditor.Data.Primitive.ImageObject"/>.
            </summary>
        </member>
        <member name="M:BEditor.Data.Primitive.ImageEffect.Apply(BEditor.Data.EffectApplyArgs{BEditor.Drawing.Image{BEditor.Drawing.Pixel.BGRA32}})">
            <inheritdoc cref="M:BEditor.Data.Primitive.ImageEffect.Apply(BEditor.Data.EffectApplyArgs{BEditor.Drawing.Image{BEditor.Drawing.Pixel.BGRA32}})"/>
        </member>
        <member name="M:BEditor.Data.Primitive.ImageEffect.Apply(BEditor.Data.EffectApplyArgs{System.Collections.Generic.IEnumerable{BEditor.Graphics.Texture}})">
            <inheritdoc cref="M:BEditor.Data.Primitive.ImageEffect.Apply(BEditor.Data.EffectApplyArgs{BEditor.Drawing.Image{BEditor.Drawing.Pixel.BGRA32}})"/>
        </member>
        <member name="M:BEditor.Data.Primitive.ImageEffect.Apply(BEditor.Data.EffectApplyArgs)">
            <inheritdoc/>
        </member>
        <member name="T:BEditor.Data.Primitive.ImageObject">
            <summary>
            Represents the base class for drawing images.
            </summary>
        </member>
        <member name="F:BEditor.Data.Primitive.ImageObject.CoordinateProperty">
            <summary>
            Defines the <see cref="P:BEditor.Data.Primitive.ImageObject.Coordinate"/> property.
            </summary>
        </member>
        <member name="F:BEditor.Data.Primitive.ImageObject.ScaleProperty">
            <summary>
            Defines the <see cref="P:BEditor.Data.Primitive.ImageObject.Scale"/> property.
            </summary>
        </member>
        <member name="F:BEditor.Data.Primitive.ImageObject.BlendProperty">
            <summary>
            Defines the <see cref="P:BEditor.Data.Primitive.ImageObject.Blend"/> property.
            </summary>
        </member>
        <member name="F:BEditor.Data.Primitive.ImageObject.RotateProperty">
            <summary>
            Defines the <see cref="P:BEditor.Data.Primitive.ImageObject.Rotate"/> property.
            </summary>
        </member>
        <member name="F:BEditor.Data.Primitive.ImageObject.MaterialProperty">
            <summary>
            Defines the <see cref="P:BEditor.Data.Primitive.ImageObject.Rotate"/> property.
            </summary>
        </member>
        <member name="M:BEditor.Data.Primitive.ImageObject.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:BEditor.Data.Primitive.ImageObject"/> class.
            </summary>
        </member>
        <member name="P:BEditor.Data.Primitive.ImageObject.Name">
            <inheritdoc/>
        </member>
        <member name="P:BEditor.Data.Primitive.ImageObject.Coordinate">
            <summary>
            Gets the coordinates.
            </summary>
        </member>
        <member name="P:BEditor.Data.Primitive.ImageObject.Scale">
            <summary>
            Gets the scale.
            </summary>
        </member>
        <member name="P:BEditor.Data.Primitive.ImageObject.Blend">
            <summary>
            Gets the blend.
            </summary>
        </member>
        <member name="P:BEditor.Data.Primitive.ImageObject.Rotate">
            <summary>
            Gets the angle.
            </summary>
        </member>
        <member name="P:BEditor.Data.Primitive.ImageObject.Material">
            <summary>
            Gets the material.
            </summary>
        </member>
        <member name="M:BEditor.Data.Primitive.ImageObject.Apply(BEditor.Data.EffectApplyArgs)">
            <inheritdoc/>
        </member>
        <member name="M:BEditor.Data.Primitive.ImageObject.GetTransform(BEditor.Media.Frame)">
            <summary>
            <see cref="P:BEditor.Data.Primitive.ImageObject.Coordinate"/>, <see cref="P:BEditor.Data.Primitive.ImageObject.Scale"/>, <see cref="P:BEditor.Data.Primitive.ImageObject.Rotate"/> から <see cref="T:BEditor.Graphics.Transform"/> を取得します.
            </summary>
            <param name="frame">取得するフレームです.</param>
            <returns><see cref="P:BEditor.Data.Primitive.ImageObject.Coordinate"/>, <see cref="P:BEditor.Data.Primitive.ImageObject.Scale"/>, <see cref="P:BEditor.Data.Primitive.ImageObject.Rotate"/> の値から作成された <see cref="T:BEditor.Graphics.Transform"/>.</returns>
        </member>
        <member name="M:BEditor.Data.Primitive.ImageObject.Render(BEditor.Data.EffectApplyArgs,BEditor.Drawing.Image{BEditor.Drawing.Pixel.BGRA32}@)">
            <summary>
            Render the image.
            </summary>
            <param name="args">The data used to apply the effect.</param>
            <param name="image">Returns the rendered image.</param>
        </member>
        <member name="M:BEditor.Data.Primitive.ImageObject.EffectFilter(BEditor.Data.EffectElement)">
            <inheritdoc/>
        </member>
        <member name="M:BEditor.Data.Primitive.ImageObject.OnRender(BEditor.Data.EffectApplyArgs)">
            <inheritdoc cref="M:BEditor.Data.Primitive.ImageObject.Apply(BEditor.Data.EffectApplyArgs)"/>
        </member>
        <member name="M:BEditor.Data.Primitive.ImageObject.OnRender(BEditor.Data.EffectApplyArgs{System.Collections.Generic.IEnumerable{BEditor.Graphics.Texture}})">
            <inheritdoc cref="M:BEditor.Data.Primitive.ImageObject.Apply(BEditor.Data.EffectApplyArgs)"/>
        </member>
        <member name="T:BEditor.Data.Primitive.IMediaObject">
            <summary>
            Abstraction of media objects.
            </summary>
        </member>
        <member name="P:BEditor.Data.Primitive.IMediaObject.Length">
            <summary>
            Gets the length.
            </summary>
        </member>
        <member name="T:BEditor.Data.SaveType">
            <summary>
            Represents the type of save used in <see cref="T:BEditor.Data.ProjectSavedEventArgs"/>.
            </summary>
        </member>
        <member name="F:BEditor.Data.SaveType.Save">
            <summary>
            Save.
            </summary>
        </member>
        <member name="F:BEditor.Data.SaveType.Backup">
            <summary>
            Backup.
            </summary>
        </member>
        <member name="T:BEditor.Data.Project">
            <summary>
            Represents the project to be used in editing.
            </summary>
        </member>
        <member name="F:BEditor.Data.Project.CurrentSceneProperty">
            <summary>
            Defines the <see cref="P:BEditor.Data.Project.CurrentScene"/> property.
            </summary>
        </member>
        <member name="F:BEditor.Data.Project.CurrentSceneIndexProperty">
            <summary>
            Defines the <see cref="P:BEditor.Data.Project.CurrentSceneIndex"/> property.
            </summary>
        </member>
        <member name="F:BEditor.Data.Project.DirectoryNameProperty">
            <summary>
            Defines the <see cref="P:BEditor.Data.Project.DirectoryName"/> property.
            </summary>
        </member>
        <member name="F:BEditor.Data.Project.ProjectVersionProperty">
            <summary>
            Defines the ProjectVersion property.
            </summary>
        </member>
        <member name="M:BEditor.Data.Project.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,BEditor.IApplication,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:BEditor.Data.Project"/> class.
            </summary>
            <param name="width">The width of rootscene.</param>
            <param name="height">The height of rootscene.</param>
            <param name="framerate">The framerate of this project.</param>
            <param name="samplingrate">The samplingrate of this project.</param>
            <param name="app">The running <see cref="T:BEditor.IApplication"/>.</param>
            <param name="filename">The project file name.</param>
        </member>
        <member name="E:BEditor.Data.Project.Saved">
            <summary>
            Occurs after saving this <see cref="T:BEditor.Data.Project"/>.
            </summary>
        </member>
        <member name="P:BEditor.Data.Project.Framerate">
            <summary>
            Gets the framerate for this <see cref="T:BEditor.Data.Project"/>.
            </summary>
        </member>
        <member name="P:BEditor.Data.Project.Samplingrate">
            <summary>
            Gets the sampling rate for this <see cref="T:BEditor.Data.Project"/>.
            </summary>
        </member>
        <member name="P:BEditor.Data.Project.SceneList">
            <summary>
            Gets a list of Scenes in this <see cref="T:BEditor.Data.Project"/>.
            </summary>
        </member>
        <member name="P:BEditor.Data.Project.CurrentScene">
            <summary>
            Gets or sets the current <see cref="T:BEditor.Data.Scene"/>.
            </summary>
        </member>
        <member name="P:BEditor.Data.Project.CurrentSceneIndex">
            <summary>
            Gets or sets the index of the current scene.
            </summary>
        </member>
        <member name="P:BEditor.Data.Project.Children">
            <inheritdoc/>
        </member>
        <member name="P:BEditor.Data.Project.Parent">
            <inheritdoc/>
        </member>
        <member name="P:BEditor.Data.Project.DirectoryName">
            <summary>
            Gets or sets the directory name of this <see cref="T:BEditor.Data.Project"/>.
            </summary>
        </member>
        <member name="P:BEditor.Data.Project.Resources">
            <summary>
            Gets the class that manages the resources used by the project.
            </summary>
        </member>
        <member name="M:BEditor.Data.Project.FromFileAsync(System.String,BEditor.IApplication)">
            <summary>
            Load a <see cref="T:BEditor.Data.Project"/> from a file.
            </summary>
            <param name="file">The project file.</param>
            <param name="app">Specify the application.</param>
            <returns>Returns the loaded <see cref="T:BEditor.Data.Project"/> on success, or <see langword="null"/> on failure.</returns>
        </member>
        <member name="M:BEditor.Data.Project.FromFile(System.String,BEditor.IApplication)">
            <summary>
            Load a <see cref="T:BEditor.Data.Project"/> from a file.
            </summary>
            <param name="file">The project file.</param>
            <param name="app">Specify the application.</param>
            <returns>Returns the loaded <see cref="T:BEditor.Data.Project"/> on success, or <see langword="null"/> on failure.</returns>
        </member>
        <member name="M:BEditor.Data.Project.Save">
            <summary>
            Save this <see cref="T:BEditor.Data.Project"/>.
            </summary>
            <remarks>If <see cref="P:BEditor.Data.EditingObject.Name"/> is <see langword="null"/>, a dialog will appear.</remarks>
            <returns><see langword="true"/> if the save is successful, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:BEditor.Data.Project.SaveAsync">
            <summary>
            Save this <see cref="T:BEditor.Data.Project"/>.
            </summary>
            <remarks>If <see cref="P:BEditor.Data.EditingObject.Name"/> is <see langword="null"/>, a dialog will appear.</remarks>
            <returns><see langword="true"/> if the save is successful, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:BEditor.Data.Project.Save(System.String)">
            <summary>
            Save this <see cref="T:BEditor.Data.Project"/> with a name.
            </summary>
            <param name="filename">New File Name.</param>
            <returns><see langword="true"/> if the save is successful, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:BEditor.Data.Project.SaveAsync(System.String)">
            <summary>
            Save this <see cref="T:BEditor.Data.Project"/> with a name.
            </summary>
            <param name="filename">New File Name.</param>
            <returns><see langword="true"/> if the save is successful, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:BEditor.Data.Project.Save(System.IO.Stream)">
            <summary>
            Save this <see cref="T:BEditor.Data.Project"/> with a name.
            </summary>
            <param name="stream">Stream to save.</param>
            <returns><see langword="true"/> if the save is successful, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:BEditor.Data.Project.FindDependentPlugins">
            <summary>
            Find the plug-ins that this project depends on.
            </summary>
            <returns>Returns the plugins that this project depends on.</returns>
        </member>
        <member name="M:BEditor.Data.Project.GetObjectData(System.Text.Json.Utf8JsonWriter)">
            <inheritdoc/>
        </member>
        <member name="M:BEditor.Data.Project.SetObjectData(BEditor.Data.DeserializeContext)">
            <inheritdoc/>
        </member>
        <member name="M:BEditor.Data.Project.OnLoad">
            <inheritdoc/>
        </member>
        <member name="M:BEditor.Data.Project.OnUnload">
            <inheritdoc/>
        </member>
        <member name="T:BEditor.Data.ProjectPackage">
            <summary>
            Provides for the manipulation of project packages.
            </summary>
        </member>
        <member name="M:BEditor.Data.ProjectPackage.GetPluginInfo(System.String)">
            <summary>
            Get information about dependent plugins from the project package.
            </summary>
            <param name="file">The project package file.</param>
            <returns>Information on dependent plugins.</returns>
        </member>
        <member name="M:BEditor.Data.ProjectPackage.GetReadMe(System.String)">
            <summary>
            Gets the readme from the project package.
            </summary>
            <param name="file">The project package file.</param>
            <returns>The README.</returns>
        </member>
        <member name="M:BEditor.Data.ProjectPackage.OpenFile(System.String,System.String)">
            <summary>
            Open the project package.
            </summary>
            <param name="file">The project package file.</param>
            <param name="directry">The destination directory.</param>
            <returns>Returns the opened project.</returns>
        </member>
        <member name="T:BEditor.Data.ProjectPackage.PluginInfo">
            <summary>
            The plugin info.
            </summary>
        </member>
        <member name="M:BEditor.Data.ProjectPackage.PluginInfo.#ctor(BEditor.Plugin.PluginObject)">
            <summary>
            Initializes a new instance of the <see cref="T:BEditor.Data.ProjectPackage.PluginInfo"/> class.
            </summary>
            <param name="plugin">The plugin.</param>
        </member>
        <member name="M:BEditor.Data.ProjectPackage.PluginInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:BEditor.Data.ProjectPackage.PluginInfo"/> class.
            </summary>
        </member>
        <member name="P:BEditor.Data.ProjectPackage.PluginInfo.Id">
            <summary>
            Gets or sets the id of the plugin.
            </summary>
        </member>
        <member name="P:BEditor.Data.ProjectPackage.PluginInfo.Version">
            <summary>
            Gets or sets the version of the plugin.
            </summary>
        </member>
        <member name="P:BEditor.Data.ProjectPackage.PluginInfo.Name">
            <summary>
            Gets or sets the name of the plugin.
            </summary>
        </member>
        <member name="M:BEditor.Data.ProjectPackage.PluginInfo.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:BEditor.Data.ProjectPackage.PluginInfo.Equals(BEditor.Data.ProjectPackage.PluginInfo)">
            <inheritdoc/>
        </member>
        <member name="M:BEditor.Data.ProjectPackage.PluginInfo.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="T:BEditor.Data.ProjectPackageBuilder">
            <summary>
            Create a project package.
            </summary>
        </member>
        <member name="P:BEditor.Data.ProjectPackageBuilder.Fonts">
            <summary>
            Gets the fonts.
            </summary>
        </member>
        <member name="P:BEditor.Data.ProjectPackageBuilder.Files">
            <summary>
            Gets the files.
            </summary>
        </member>
        <member name="P:BEditor.Data.ProjectPackageBuilder.Plugins">
            <summary>
            Gets the plugins.
            </summary>
        </member>
        <member name="P:BEditor.Data.ProjectPackageBuilder.OtherFiles">
            <summary>
            Gets the files that are not used for the project.
            </summary>
        </member>
        <member name="P:BEditor.Data.ProjectPackageBuilder.ReadMe">
            <summary>
            Gets or sets the README.
            </summary>
        </member>
        <member name="M:BEditor.Data.ProjectPackageBuilder.Configure(BEditor.Data.Project)">
            <summary>
            Begin configuring an project package.
            </summary>
            <param name="project">Projects to include in the project package.</param>
            <returns>The same instance of the <see cref="T:BEditor.Data.ProjectPackageBuilder"/> for chaining.</returns>
        </member>
        <member name="M:BEditor.Data.ProjectPackageBuilder.ExcludeFont(BEditor.Drawing.Font)">
            <summary>
            Exclude the specified font.
            </summary>
            <param name="font">The font to be excluded.</param>
            <returns>The same instance of the <see cref="T:BEditor.Data.ProjectPackageBuilder"/> for chaining.</returns>
        </member>
        <member name="M:BEditor.Data.ProjectPackageBuilder.ExcludeFonts(System.Collections.Generic.IEnumerable{BEditor.Drawing.Font})">
            <summary>
            Exclude the specified fonts.
            </summary>
            <param name="fonts">The fonts to be excluded.</param>
            <returns>The same instance of the <see cref="T:BEditor.Data.ProjectPackageBuilder"/> for chaining.</returns>
        </member>
        <member name="M:BEditor.Data.ProjectPackageBuilder.IncludeFont(BEditor.Drawing.Font)">
            <summary>
            Include the specified font.
            </summary>
            <param name="font">The font to be include.</param>
            <returns>The same instance of the <see cref="T:BEditor.Data.ProjectPackageBuilder"/> for chaining.</returns>
        </member>
        <member name="M:BEditor.Data.ProjectPackageBuilder.IncludeFonts(System.Collections.Generic.IEnumerable{BEditor.Drawing.Font})">
            <summary>
            Include the specified fonts.
            </summary>
            <param name="fonts">The fonts to be include.</param>
            <returns>The same instance of the <see cref="T:BEditor.Data.ProjectPackageBuilder"/> for chaining.</returns>
        </member>
        <member name="M:BEditor.Data.ProjectPackageBuilder.Create(System.String)">
            <summary>
            Create a project package.
            </summary>
            <param name="file">The name of the file to be saved.</param>
            <returns>Returns true on success, false otherwise.</returns>
        </member>
        <member name="T:BEditor.Data.ProjectResources">
            <summary>
            Manage the resources that the project is using.
            </summary>
        </member>
        <member name="M:BEditor.Data.ProjectResources.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:BEditor.Data.ProjectResources"/> class.
            </summary>
        </member>
        <member name="P:BEditor.Data.ProjectResources.Items">
            <summary>
            Gets all registered resources.
            </summary>
        </member>
        <member name="M:BEditor.Data.ProjectResources.RegisterResource(BEditor.Data.ResourceItem)">
            <summary>
            Register the resources to be used.
            </summary>
            <param name="item">A resource to register.</param>
            <returns>Returns a registered resource.</returns>
        </member>
        <member name="M:BEditor.Data.ProjectResources.Release">
            <summary>
            Releases the registered resources.
            </summary>
        </member>
        <member name="M:BEditor.Data.ProjectResources.GetItem(System.String)">
            <summary>
            Gets a registered resource.
            </summary>
            <param name="key">The key of a resource to get.</param>
            <returns>Returns a resource that matches the key. If not found, <see langword="null"/> will be returned.</returns>
        </member>
        <member name="M:BEditor.Data.ProjectResources.RemoveItem(System.String)">
            <summary>
            Removes a resource with the specified key.
            </summary>
            <param name="key">The key of a resource to be removed.</param>
            <returns>Returns a resource if it has been removed, otherwise returns <see langword="null"/>.</returns>
        </member>
        <member name="T:BEditor.Data.ProjectSavedEventArgs">
            <summary>
            Provides data for the <see cref="E:BEditor.Data.Project.Saved"/> event.
            </summary>
        </member>
        <member name="M:BEditor.Data.ProjectSavedEventArgs.#ctor(BEditor.Data.SaveType)">
            <summary>
            Initializes a new instance of the <see cref="T:BEditor.Data.ProjectSavedEventArgs"/> class.
            </summary>
            <param name="type">The save type.</param>
        </member>
        <member name="P:BEditor.Data.ProjectSavedEventArgs.Type">
            <summary>
            Gets the save type.
            </summary>
        </member>
        <member name="T:BEditor.Data.Property.ButtonComponent">
            <summary>
            Represents a button in the UI.
            </summary>
        </member>
        <member name="M:BEditor.Data.Property.ButtonComponent.#ctor(BEditor.Data.Property.ButtonComponentMetadata)">
            <summary>
            Initializes a new instance of the <see cref="T:BEditor.Data.Property.ButtonComponent"/> class.
            </summary>
            <param name="metadata">Metadata of this property.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="metadata"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:BEditor.Data.Property.ButtonComponent.Subscribe(System.IObserver{System.Object})">
            <inheritdoc/>
        </member>
        <member name="M:BEditor.Data.Property.ButtonComponent.Execute">
            <summary>
            Execute the command after clicking the button.
            </summary>
        </member>
        <member name="T:BEditor.Data.Property.CheckProperty">
            <summary>
            Represents a checkbox property.
            </summary>
        </member>
        <member name="M:BEditor.Data.Property.CheckProperty.#ctor(BEditor.Data.Property.CheckPropertyMetadata)">
            <summary>
            Initializes a new instance of the <see cref="T:BEditor.Data.Property.CheckProperty"/> class.
            </summary>
            <param name="metadata">Metadata of this property.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="metadata"/> is <see langword="null"/>.</exception>
        </member>
        <member name="P:BEditor.Data.Property.CheckProperty.TargetID">
            <inheritdoc/>
        </member>
        <member name="P:BEditor.Data.Property.CheckProperty.Value">
            <summary>
            Gets or sets a value indicating whether the item is checked or not.
            </summary>
        </member>
        <member name="M:BEditor.Data.Property.CheckProperty.OnCompleted">
            <inheritdoc/>
        </member>
        <member name="M:BEditor.Data.Property.CheckProperty.OnError(System.Exception)">
            <inheritdoc/>
        </member>
        <member name="M:BEditor.Data.Property.CheckProperty.OnNext(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:BEditor.Data.Property.CheckProperty.Subscribe(System.IObserver{System.Boolean})">
            <inheritdoc/>
            <exception cref="T:System.ArgumentNullException"><paramref name="observer"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:BEditor.Data.Property.CheckProperty.Bind(BEditor.Data.Bindings.IBindable{System.Boolean})">
            <inheritdoc/>
        </member>
        <member name="M:BEditor.Data.Property.CheckProperty.GetObjectData(System.Text.Json.Utf8JsonWriter)">
            <inheritdoc/>
        </member>
        <member name="M:BEditor.Data.Property.CheckProperty.SetObjectData(BEditor.Data.DeserializeContext)">
            <inheritdoc/>
        </member>
        <member name="M:BEditor.Data.Property.CheckProperty.ChangeIsChecked(System.Boolean)">
            <summary>
            Create a command to change whether it is checked or not.
            </summary>
            <param name="value">New value for IsChecked.</param>
            <returns>Created <see cref="T:BEditor.Command.IRecordCommand"/>.</returns>
        </member>
        <member name="M:BEditor.Data.Property.CheckProperty.OnLoad">
            <inheritdoc/>
        </member>
        <member name="T:BEditor.Data.Property.ColorAnimationProperty">
            <summary>
            Represents a property that eases the value of a <see cref="T:BEditor.Drawing.Color"/> type.
            </summary>
        </member>
        <member name="M:BEditor.Data.Property.ColorAnimationProperty.#ctor(BEditor.Data.Property.ColorAnimationPropertyMetadata)">
            <summary>
            Initializes a new instance of the <see cref="T:BEditor.Data.Property.ColorAnimationProperty"/> class.
            </summary>
            <param name="metadata">Metadata of this property.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="metadata"/> is <see langword="null"/>.</exception>
        </member>
        <member name="E:BEditor.Data.Property.ColorAnimationProperty.Added">
            <inheritdoc/>
        </member>
        <member name="E:BEditor.Data.Property.ColorAnimationProperty.Removed">
            <inheritdoc/>
        </member>
        <member name="E:BEditor.Data.Property.ColorAnimationProperty.Moved">
            <inheritdoc/>
        </member>
        <member name="P:BEditor.Data.Property.ColorAnimationProperty.Pairs">
            <inheritdoc/>
        </member>
        <member name="P:BEditor.Data.Property.ColorAnimationProperty.EasingType">
            <summary>
            Gets or sets the current <see cref="T:BEditor.Data.Property.Easing.EasingFunc"/>.
            </summary>
        </member>
        <member name="P:BEditor.Data.Property.ColorAnimationProperty.Parent">
            <inheritdoc/>
        </member>
        <member name="P:BEditor.Data.Property.ColorAnimationProperty.EasingData">
            <summary>
            Gets or sets the metadata for <see cref="P:BEditor.Data.Property.ColorAnimationProperty.EasingType"/>.
            </summary>
        </member>
        <member name="P:BEditor.Data.Property.ColorAnimationProperty.Length">
            <summary>
            Gets the length of the clip.
            </summary>
        </member>
        <member name="P:BEditor.Data.Property.ColorAnimationProperty.Item(BEditor.Media.Frame)">
            <summary>
            Gets an eased value.
            </summary>
            <param name="frame">The frame of the value to get.</param>
        </member>
        <member name="M:BEditor.Data.Property.ColorAnimationProperty.GetValue(BEditor.Media.Frame)">
            <summary>
            Gets an eased value.
            </summary>
            <param name="frame">The frame of the value to get.</param>
            <returns>Returns an eased value.</returns>
        </member>
        <member name="M:BEditor.Data.Property.ColorAnimationProperty.InsertKeyframe(BEditor.Data.Property.KeyFramePair{BEditor.Drawing.Color})">
            <summary>
            Insert a keyframe at a specific frame.
            </summary>
            <param name="item">Item to be added.</param>
            <returns>Index of the added <see cref="P:BEditor.Data.Property.ColorAnimationProperty.Pairs"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="item"/> is outside the scope of the parent element.</exception>
        </member>
        <member name="M:BEditor.Data.Property.ColorAnimationProperty.InsertKeyframe(BEditor.Data.Property.KeyFramePair{BEditor.Drawing.Color},System.Int32)">
            <summary>
            Insert a keyframe at a specific frame.
            </summary>
            <param name="item">Item to be added.</param>
            <param name="index">The index.</param>
            <returns>Index of the added <see cref="P:BEditor.Data.Property.ColorAnimationProperty.Pairs"/>.</returns>
        </member>
        <member name="M:BEditor.Data.Property.ColorAnimationProperty.RemoveKeyframe(BEditor.Data.Property.PositionInfo)">
            <summary>
            Remove a keyframe of a specific frame.
            </summary>
            <param name="item">Item to be removed.</param>
            <returns>Index of the removed <see cref="P:BEditor.Data.Property.ColorAnimationProperty.Pairs"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="item"/> is outside the scope of the parent element.</exception>
        </member>
        <member name="M:BEditor.Data.Property.ColorAnimationProperty.GetObjectData(System.Text.Json.Utf8JsonWriter)">
            <inheritdoc/>
        </member>
        <member name="M:BEditor.Data.Property.ColorAnimationProperty.SetObjectData(BEditor.Data.DeserializeContext)">
            <inheritdoc/>
        </member>
        <member name="M:BEditor.Data.Property.ColorAnimationProperty.ChangeColor(System.Int32,BEditor.Drawing.Color)">
            <summary>
            Create a command to change the color of this <see cref="P:BEditor.Data.Property.ColorAnimationProperty.Pairs"/>.
            </summary>
            <param name="index">Index of colors to be changed.</param>
            <param name="color">New Color.</param>
            <returns>Created <see cref="T:BEditor.Command.IRecordCommand"/>.</returns>
        </member>
        <member name="M:BEditor.Data.Property.ColorAnimationProperty.ChangeEase(BEditor.Data.Property.Easing.EasingMetadata)">
            <summary>
            Create a command to change the easing function.
            </summary>
            <param name="metadata">New easing function metadata.</param>
            <returns>Created <see cref="T:BEditor.Command.IRecordCommand"/>.</returns>
        </member>
        <member name="M:BEditor.Data.Property.ColorAnimationProperty.AddFrame(BEditor.Data.Property.PositionInfo)">
            <inheritdoc/>
        </member>
        <member name="M:BEditor.Data.Property.ColorAnimationProperty.RemoveFrame(BEditor.Data.Property.PositionInfo)">
            <inheritdoc/>
        </member>
        <member name="M:BEditor.Data.Property.ColorAnimationProperty.MoveFrame(System.Int32,BEditor.Data.Property.PositionInfo)">
            <inheritdoc/>
        </member>
        <member name="M:BEditor.Data.Property.ColorAnimationProperty.UpdatePositionInfo(System.Int32,BEditor.Data.Property.PositionInfo)">
            <inheritdoc/>
        </member>
        <member name="M:BEditor.Data.Property.ColorAnimationProperty.IndexOf(BEditor.Data.Property.PositionInfo)">
            <inheritdoc/>
        </member>
        <member name="M:BEditor.Data.Property.ColorAnimationProperty.Enumerate">
            <inheritdoc/>
        </member>
        <member name="M:BEditor.Data.Property.ColorAnimationProperty.OnLoad">
            <inheritdoc/>
        </member>
        <member name="M:BEditor.Data.Property.ColorAnimationProperty.OnUnload">
            <inheritdoc/>
        </member>
        <member name="T:BEditor.Data.Property.ColorProperty">
            <summary>
            Represents a property to pick a color.
            </summary>
        </member>
        <member name="M:BEditor.Data.Property.ColorProperty.#ctor(BEditor.Data.Property.ColorPropertyMetadata)">
            <summary>
            Initializes a new instance of the <see cref="T:BEditor.Data.Property.ColorProperty"/> class.
            </summary>
            <param name="metadata">Metadata of this property.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="metadata"/> is <see langword="null"/>.</exception>
        </member>
        <member name="P:BEditor.Data.Property.ColorProperty.Value">
            <summary>
            Gets or sets the selected color.
            </summary>
        </member>
        <member name="P:BEditor.Data.Property.ColorProperty.TargetID">
            <inheritdoc/>
        </member>
        <member name="M:BEditor.Data.Property.ColorProperty.GetObjectData(System.Text.Json.Utf8JsonWriter)">
            <inheritdoc/>
        </member>
        <member name="M:BEditor.Data.Property.ColorProperty.SetObjectData(BEditor.Data.DeserializeContext)">
            <inheritdoc/>
        </member>
        <member name="M:BEditor.Data.Property.ColorProperty.ChangeColor(BEditor.Drawing.Color)">
            <summary>
            Create a command to change the color of this <see cref="T:BEditor.Drawing.Color"/>.
            </summary>
            <param name="color">New Color.</param>
            <returns>Created <see cref="T:BEditor.Command.IRecordCommand"/>.</returns>
        </member>
        <member name="M:BEditor.Data.Property.ColorProperty.Bind(BEditor.Data.Bindings.IBindable{BEditor.Drawing.Color})">
            <inheritdoc/>
        </member>
        <member name="M:BEditor.Data.Property.ColorProperty.Subscribe(System.IObserver{BEditor.Drawing.Color})">
            <inheritdoc/>
        </member>
        <member name="M:BEditor.Data.Property.ColorProperty.OnCompleted">
            <inheritdoc/>
        </member>
        <member name="M:BEditor.Data.Property.ColorProperty.OnError(System.Exception)">
            <inheritdoc/>
        </member>
        <member name="M:BEditor.Data.Property.ColorProperty.OnNext(BEditor.Drawing.Color)">
            <inheritdoc/>
        </member>
        <member name="M:BEditor.Data.Property.ColorProperty.OnLoad">
            <inheritdoc/>
        </member>
        <member name="T:BEditor.Data.Property.ColorProperty.ChangeColorCommand">
            <summary>
            色を変更するコマンド.
            </summary>
        </member>
        <member name="M:BEditor.Data.Property.ColorProperty.ChangeColorCommand.#ctor(BEditor.Data.Property.ColorProperty,BEditor.Drawing.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:BEditor.Data.Property.ColorProperty.ChangeColorCommand"/> class.
            </summary>
            <param name="property">対象の <see cref="T:BEditor.Data.Property.ColorProperty"/>.</param>
            <param name="color"><see cref="P:BEditor.Data.Property.ColorProperty.Value"/> の新しい値.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="property"/> が <see langword="null"/> です.</exception>
        </member>
        <member name="P:BEditor.Data.Property.ColorProperty.ChangeColorCommand.Name">
            <inheritdoc/>
        </member>
        <member name="M:BEditor.Data.Property.ColorProperty.ChangeColorCommand.Do">
            <inheritdoc/>
        </member>
        <member name="M:BEditor.Data.Property.ColorProperty.ChangeColorCommand.Redo">
            <inheritdoc/>
        </member>
        <member name="M:BEditor.Data.Property.ColorProperty.ChangeColorCommand.Undo">
            <inheritdoc/>
        </member>
        <member name="T:BEditor.Data.Property.DialogProperty">
            <summary>
            Represents a base class for showing multiple <see cref="T:BEditor.Data.Property.PropertyElement"/> in a dialog.
            </summary>
        </member>
        <member name="E:BEditor.Data.Property.DialogProperty.Showed">
            <summary>
            Occurs after the dialog is shown.
            </summary>
        </member>
        <member name="M:BEditor.Data.Property.DialogProperty.Show">
            <summary>
            Show the dialog.
            </summary>
        </member>
        <member name="T:BEditor.Data.Property.DocumentProperty">
            <summary>
            Represents a property of a multi-line string.
            </summary>
        </member>
        <member name="F:BEditor.Data.Property.DocumentProperty._valueArgs">
            <summary>
            <see cref="P:BEditor.Data.Bindings.IBindable`1.Value"/> のプロパティの変更を通知するイベントの引数.
            </summary>
        </member>
        <member name="M:BEditor.Data.Property.DocumentProperty.#ctor(BEditor.Data.Property.DocumentPropertyMetadata)">
            <summary>
            Initializes a new instance of the <see cref="T:BEditor.Data.Property.DocumentProperty"/> class.
            </summary>
            <param name="metadata">Metadata of this property.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="metadata"/> is <see langword="null"/>.</exception>
        </member>
        <member name="P:BEditor.Data.Property.DocumentProperty.Value">
            <summary>
            Gets or sets the string being entered.
            </summary>
        </member>
        <member name="P:BEditor.Data.Property.DocumentProperty.TargetID">
            <inheritdoc/>
        </member>
        <member name="M:BEditor.Data.Property.DocumentProperty.OnCompleted">
            <inheritdoc/>
        </member>
        <member name="M:BEditor.Data.Property.DocumentProperty.OnError(System.Exception)">
            <inheritdoc/>
        </member>
        <member name="M:BEditor.Data.Property.DocumentProperty.OnNext(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:BEditor.Data.Property.DocumentProperty.Subscribe(System.IObserver{System.String})">
            <inheritdoc/>
        </member>
        <member name="M:BEditor.Data.Property.DocumentProperty.Bind(BEditor.Data.Bindings.IBindable{System.String})">
            <inheritdoc/>
        </member>
        <member name="M:BEditor.Data.Property.DocumentProperty.GetObjectData(System.Text.Json.Utf8JsonWriter)">
            <inheritdoc/>
        </member>
        <member name="M:BEditor.Data.Property.DocumentProperty.SetObjectData(BEditor.Data.DeserializeContext)">
            <inheritdoc/>
        </member>
        <member name="M:BEditor.Data.Property.DocumentProperty.ChangeText(System.String)">
            <summary>
            Create a command to change the string.
            </summary>
            <param name="newtext">New value for <see cref="P:BEditor.Data.Property.DocumentProperty.Value"/>.</param>
            <returns>Created <see cref="T:BEditor.Command.IRecordCommand"/>.</returns>
        </member>
        <member name="M:BEditor.Data.Property.DocumentProperty.OnLoad">
            <inheritdoc/>
        </member>
        <member name="T:BEditor.Data.Property.EaseProperty">
            <summary>
            Represents the property that eases the value of a <see cref="T:System.Single"/> type.
            </summary>
        </member>
        <member name="M:BEditor.Data.Property.EaseProperty.#ctor(BEditor.Data.Property.EasePropertyMetadata)">
            <summary>
            Initializes a new instance of the <see cref="T:BEditor.Data.Property.EaseProperty"/> class.
            </summary>
            <param name="metadata">Metadata of this property.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="metadata"/> is <see langword="null"/>.</exception>
        </member>
        <member name="E:BEditor.Data.Property.EaseProperty.Added">
            <inheritdoc/>
        </member>
        <member name="E:BEditor.Data.Property.EaseProperty.Removed">
            <inheritdoc/>
        </member>
        <member name="E:BEditor.Data.Property.EaseProperty.Moved">
            <inheritdoc/>
        </member>
        <member name="P:BEditor.Data.Property.EaseProperty.Pairs">
            <inheritdoc/>
        </member>
        <member name="P:BEditor.Data.Property.EaseProperty.EasingType">
            <inheritdoc/>
        </member>
        <member name="P:BEditor.Data.Property.EaseProperty.Parent">
            <inheritdoc/>
        </member>
        <member name="P:BEditor.Data.Property.EaseProperty.Optional">
            <summary>
            Gets or sets an optional value.
            </summary>
        </member>
        <member name="P:BEditor.Data.Property.EaseProperty.EasingData">
            <summary>
            Gets or sets the metadata for <see cref="P:BEditor.Data.Property.EaseProperty.EasingType"/>.
            </summary>
        </member>
        <member name="P:BEditor.Data.Property.EaseProperty.Length">
            <summary>
            Gets the length of the clip.
            </summary>
        </member>
        <member name="P:BEditor.Data.Property.EaseProperty.Item(BEditor.Media.Frame)">
            <summary>
            Gets an eased value.
            </summary>
            <param name="frame">The frame of the value to get.</param>
        </member>
        <member name="M:BEditor.Data.Property.EaseProperty.GetValue(BEditor.Media.Frame)">
            <summary>
            Gets an eased value.
            </summary>
            <param name="frame">The frame of the value to get.</param>
            <returns>Returns an eased value.</returns>
        </member>
        <member name="M:BEditor.Data.Property.EaseProperty.Clamp(System.Single)">
            <summary>
            Returns <paramref name="value"/> clamped to the inclusive range of <see cref="P:BEditor.Data.Property.EasePropertyMetadata.Min"/> and <see cref="P:BEditor.Data.Property.EasePropertyMetadata.Max"/>.
            </summary>
            <param name="value">The value to be clamped.</param>
            <returns>value if min ≤ value ≤ max. -or- min if value &lt; min. -or- max if max &lt; value.</returns>
        </member>
        <member name="M:BEditor.Data.Property.EaseProperty.InsertKeyframe(BEditor.Data.Property.KeyFramePair{System.Single})">
            <summary>
            Insert a keyframe at a specific frame.
            </summary>
            <param name="item">Item to be added.</param>
            <returns>Index of the added <see cref="P:BEditor.Data.Property.EaseProperty.Pairs"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="item"/> is outside the scope of the parent element.</exception>
        </member>
        <member name="M:BEditor.Data.Property.EaseProperty.InsertKeyframe(BEditor.Data.Property.KeyFramePair{System.Single},System.Int32)">
            <summary>
            Insert a keyframe at a specific frame.
            </summary>
            <param name="item">Item to be added.</param>
            <param name="index">The index.</param>
            <returns>Index of the added <see cref="P:BEditor.Data.Property.EaseProperty.Pairs"/>.</returns>
        </member>
        <member name="M:BEditor.Data.Property.EaseProperty.RemoveKeyframe(BEditor.Data.Property.PositionInfo)">
            <summary>
            Remove a keyframe of a specific frame.
            </summary>
            <param name="item">Item to be removed.</param>
            <returns>Index of the removed <see cref="P:BEditor.Data.Property.EaseProperty.Pairs"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="item"/> is outside the scope of the parent element.</exception>
        </member>
        <member name="M:BEditor.Data.Property.EaseProperty.GetObjectData(System.Text.Json.Utf8JsonWriter)">
            <inheritdoc/>
        </member>
        <member name="M:BEditor.Data.Property.EaseProperty.SetObjectData(BEditor.Data.DeserializeContext)">
            <inheritdoc/>
        </member>
        <member name="M:BEditor.Data.Property.EaseProperty.ChangeValue(System.Int32,System.Single)">
            <summary>
            Create a command to change the value of this <see cref="P:BEditor.Data.Property.EaseProperty.Pairs"/>.
            </summary>
            <param name="index">Index of values to be changed.</param>
            <param name="value">New Value.</param>
            <returns>Created <see cref="T:BEditor.Command.IRecordCommand"/>.</returns>
        </member>
        <member name="M:BEditor.Data.Property.EaseProperty.ChangeEase(BEditor.Data.Property.Easing.EasingMetadata)">
            <summary>
            Create a command to change the easing function.
            </summary>
            <param name="metadata">New easing function metadata.</param>
            <returns>Created <see cref="T:BEditor.Command.IRecordCommand"/>.</returns>
        </member>
        <member name="M:BEditor.Data.Property.EaseProperty.AddFrame(BEditor.Data.Property.PositionInfo)">
            <inheritdoc/>
        </member>
        <member name="M:BEditor.Data.Property.EaseProperty.RemoveFrame(BEditor.Data.Property.PositionInfo)">
            <inheritdoc/>
        </member>
        <member name="M:BEditor.Data.Property.EaseProperty.MoveFrame(System.Int32,BEditor.Data.Property.PositionInfo)">
            <inheritdoc/>
        </member>
        <member name="M:BEditor.Data.Property.EaseProperty.UpdatePositionInfo(System.Int32,BEditor.Data.Property.PositionInfo)">
            <inheritdoc/>
        </member>
        <member name="M:BEditor.Data.Property.EaseProperty.IndexOf(BEditor.Data.Property.PositionInfo)">
            <inheritdoc/>
        </member>
        <member name="M:BEditor.Data.Property.EaseProperty.Enumerate">
            <inheritdoc/>
        </member>
        <member name="M:BEditor.Data.Property.EaseProperty.OnLoad">
            <inheritdoc/>
        </member>
        <member name="M:BEditor.Data.Property.EaseProperty.OnUnload">
            <inheritdoc/>
        </member>
        <member name="T:BEditor.Data.Property.Easing.EasingFunc">
            <summary>
            Represents an easing function that can be used with <see cref="T:BEditor.Data.Property.IKeyframeProperty"/>.
            </summary>
        </member>
        <member name="P:BEditor.Data.Property.Easing.EasingFunc.Children">
            <inheritdoc/>
        </member>
        <member name="P:BEditor.Data.Property.Easing.EasingFunc.Parent">
            <inheritdoc/>
        </member>
        <member name="P:BEditor.Data.Property.Easing.EasingFunc.Name">
            <inheritdoc/>
        </member>
        <member name="M:BEditor.Data.Property.Easing.EasingFunc.GetProperties">
            <summary>
            Gets the <see cref="T:BEditor.Data.Property.PropertyElement"/> to display on the GUI.
            </summary>
            <returns>Returns the <see cref="T:BEditor.Data.Property.PropertyElement"/> to display on the GUI.</returns>
        </member>
        <member name="M:BEditor.Data.Property.Easing.EasingFunc.EaseFunc(BEditor.Media.Frame,BEditor.Media.Frame,System.Single,System.Single)">
            <summary>
            Easing the value.
            </summary>
            <param name="frame">The frame.</param>
            <param name="totalframe">The total frame.</param>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <returns>Eased value.</returns>
        </member>
        <member name="M:BEditor.Data.Property.Easing.EasingFunc.SetObjectData(BEditor.Data.DeserializeContext)">
            <inheritdoc/>
        </member>
        <member name="T:BEditor.Data.Property.Easing.EasingMetadata">
            <summary>
            The metadata of <see cref="T:BEditor.Data.Property.Easing.EasingFunc"/>.
            </summary>
        </member>
        <member name="M:BEditor.Data.Property.Easing.EasingMetadata.#ctor(System.String,System.Func{BEditor.Data.Property.Easing.EasingFunc},System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:BEditor.Data.Property.Easing.EasingMetadata"/> class.
            </summary>
            <param name="name">The name of the easing func.</param>
            <param name="createFunc">Create a new instance of the <see cref="T:BEditor.Data.Property.Easing.EasingFunc"/> object.</param>
            <param name="type">The type of the object that inherits from <see cref="T:BEditor.Data.Property.Easing.EasingFunc"/>.</param>
        </member>
        <member name="M:BEditor.Data.Property.Easing.EasingMetadata.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:BEditor.Data.Property.Easing.EasingMetadata"/> class.
            </summary>
            <param name="name">The name of the <see cref="T:BEditor.Data.Property.Easing.EasingFunc"/>.</param>
        </member>
        <member name="M:BEditor.Data.Property.Easing.EasingMetadata.#ctor(System.String,System.Linq.Expressions.Expression{System.Func{BEditor.Data.Property.Easing.EasingFunc}})">
            <summary>
            Initializes a new instance of the <see cref="T:BEditor.Data.Property.Easing.EasingMetadata"/> class.
            </summary>
            <param name="name">The name of the <see cref="T:BEditor.Data.Property.Easing.EasingFunc"/>.</param>
            <param name="create">This <see cref="T:System.Func`1"/> gets a new instance of the <see cref="T:BEditor.Data.Property.Easing.EasingFunc"/> object.</param>
        </member>
        <member name="P:BEditor.Data.Property.Easing.EasingMetadata.LoadedEasingFunc">
            <summary>
            Gets the loaded <see cref="T:BEditor.Data.Property.Easing.EasingMetadata"/>.
            </summary>
        </member>
        <member name="P:BEditor.Data.Property.Easing.EasingMetadata.Name">
            <summary>
            Gets the name of the easing func.
            </summary>
        </member>
        <member name="P:BEditor.Data.Property.Easing.EasingMetadata.CreateFunc">
            <summary>
            Create a new instance of the <see cref="T:BEditor.Data.Property.Easing.EasingFunc"/> object.
            </summary>
        </member>
        <member name="P:BEditor.Data.Property.Easing.EasingMetadata.Type">
            <summary>
            Gets the type of the object that inherits from <see cref="T:BEditor.Data.Property.Easing.EasingFunc"/>.
            </summary>
        </member>
        <member name="P:BEditor.Data.Property.Easing.EasingMetadata.Children">
            <summary>
            Gets or sets the child elements of the group.
            </summary>
        </member>
        <member name="M:BEditor.Data.Property.Easing.EasingMetadata.Create``1(System.String)">
            <summary>
            Create the <see cref="T:BEditor.Data.Property.Easing.EasingMetadata"/>.
            </summary>
            <typeparam name="T">The type of object that inherits from EasingFunc.</typeparam>
            <param name="name">The name of the easing function.</param>
            <returns>A new instance of <see cref="T:BEditor.Data.Property.Easing.EasingMetadata"/>.</returns>
        </member>
        <member name="M:BEditor.Data.Property.Easing.EasingMetadata.Find(System.Type)">
            <summary>
            Find metadata from types that inherit from <see cref="T:BEditor.Data.Property.Easing.EasingFunc"/>.
            </summary>
            <param name="type">Types that inherit from <see cref="T:BEditor.Data.Property.Easing.EasingFunc"/>.</param>
            <returns>The metadata.</returns>
        </member>
        <member name="M:BEditor.Data.Property.Easing.EasingMetadata.GetDefault">
            <summary>
            Gets the default value of <see cref="T:BEditor.Data.Property.Easing.EasingMetadata"/>.
            </summary>
            <returns>Returns the default value of <see cref="T:BEditor.Data.Property.Easing.EasingMetadata"/>.</returns>
        </member>
        <member name="T:BEditor.Data.Property.Easing.PrimitiveEasing">
            <summary>
            Represents a standard <see cref="T:BEditor.Data.Property.Easing.EasingFunc"/>.
            </summary>
        </member>
        <member name="F:BEditor.Data.Property.Easing.PrimitiveEasing.EasingTypeProperty">
            <summary>
            Defines the <see cref="P:BEditor.Data.Property.Easing.PrimitiveEasing.EasingType"/> property.
            </summary>
        </member>
        <member name="M:BEditor.Data.Property.Easing.PrimitiveEasing.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:BEditor.Data.Property.Easing.PrimitiveEasing"/> class.
            </summary>
        </member>
        <member name="P:BEditor.Data.Property.Easing.PrimitiveEasing.EasingType">
            <summary>
            Gets the <see cref="T:BEditor.Data.Property.SelectorProperty"/> to select the easing function.
            </summary>
        </member>
        <member name="M:BEditor.Data.Property.Easing.PrimitiveEasing.EaseFunc(BEditor.Media.Frame,BEditor.Media.Frame,System.Single,System.Single)">
            <inheritdoc/>
        </member>
        <member name="M:BEditor.Data.Property.Easing.PrimitiveEasing.GetProperties">
            <inheritdoc/>
        </member>
        <member name="M:BEditor.Data.Property.Easing.PrimitiveEasing.OnLoad">
            <inheritdoc/>
        </member>
        <member name="M:BEditor.Data.Property.Easing.PrimitiveEasing.OnUnload">
            <inheritdoc/>
        </member>
        <member name="T:BEditor.Data.Property.ExpandGroup">
            <summary>
            Represents a base class for grouping <see cref="T:BEditor.Data.Property.PropertyElement"/> with expanders.
            </summary>
        </member>
        <member name="M:BEditor.Data.Property.ExpandGroup.#ctor(BEditor.Data.Property.PropertyElementMetadata)">
            <summary>
            Initializes a new instance of the <see cref="T:BEditor.Data.Property.ExpandGroup"/> class.
            </summary>
            <param name="metadata">Metadata of this property.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="metadata"/> is <see langword="null"/>.</exception>
        </member>
        <member name="P:BEditor.Data.Property.ExpandGroup.IsExpanded">
            <summary>
            Gets or sets a value indicating whether the expander is open or not.
            </summary>
        </member>
        <member name="P:BEditor.Data.Property.ExpandGroup.TargetID">
            <inheritdoc/>
        </member>
        <member name="P:BEditor.Data.Property.ExpandGroup.BEditor#Data#Bindings#IBindable{System#Boolean}#Value">
            <inheritdoc/>
        </member>
        <member name="M:BEditor.Data.Property.ExpandGroup.GetObjectData(System.Text.Json.Utf8JsonWriter)">
            <inheritdoc/>
        </member>
        <member name="M:BEditor.Data.Property.ExpandGroup.SetObjectData(BEditor.Data.DeserializeContext)">
            <inheritdoc/>
        </member>
        <member name="M:BEditor.Data.Property.ExpandGroup.OnCompleted">
            <inheritdoc/>
        </member>
        <member name="M:BEditor.Data.Property.ExpandGroup.OnError(System.Exception)">
            <inheritdoc/>
        </member>
        <member name="M:BEditor.Data.Property.ExpandGroup.OnNext(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:BEditor.Data.Property.ExpandGroup.Subscribe(System.IObserver{System.Boolean})">
            <inheritdoc/>
        </member>
        <member name="M:BEditor.Data.Property.ExpandGroup.Bind(BEditor.Data.Bindings.IBindable{System.Boolean})">
            <inheritdoc/>
        </member>
        <member name="M:BEditor.Data.Property.ExpandGroup.OnLoad">
            <inheritdoc/>
        </member>
        <member name="T:BEditor.Data.Property.FilePathType">
            <summary>
            Represents the type of file path.
            </summary>
        </member>
        <member name="F:BEditor.Data.Property.FilePathType.FullPath">
            <summary>
            File path is full path.
            </summary>
        </member>
        <member name="F:BEditor.Data.Property.FilePathType.FromProject">
            <summary>
            File paths are relative to the project.
            </summary>
        </member>
        <member name="T:BEditor.Data.Property.FileProperty">
            <summary>
            Represents a property to select a file.
            </summary>
        </member>
        <member name="M:BEditor.Data.Property.FileProperty.#ctor(BEditor.Data.Property.FilePropertyMetadata)">
            <summary>
            Initializes a new instance of the <see cref="T:BEditor.Data.Property.FileProperty"/> class.
            </summary>
            <param name="metadata">Metadata of this property.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="metadata"/> is <see langword="null"/>.</exception>
        </member>
        <member name="P:BEditor.Data.Property.FileProperty.RawValue">
            <summary>
            Gets the name of the selected file.
            </summary>
        </member>
        <member name="P:BEditor.Data.Property.FileProperty.Value">
            <summary>
            Gets or sets the name of the selected file.
            </summary>
        </member>
        <member name="P:BEditor.Data.Property.FileProperty.TargetID">
            <inheritdoc/>
        </member>
        <member name="P:BEditor.Data.Property.FileProperty.Mode">
            <summary>
            Gets or sets the mode of the file path.
            </summary>
        </member>
        <member name="M:BEditor.Data.Property.FileProperty.GetObjectData(System.Text.Json.Utf8JsonWriter)">
            <inheritdoc/>
        </member>
        <member name="M:BEditor.Data.Property.FileProperty.SetObjectData(BEditor.Data.DeserializeContext)">
            <inheritdoc/>
        </member>
        <member name="M:BEditor.Data.Property.FileProperty.ChangeFile(System.String)">
            <summary>
            Create a command to rename a file.
            </summary>
            <param name="path">New value for <see cref="T:System.IO.File"/>.</param>
            <returns>Created <see cref="T:BEditor.Command.IRecordCommand"/>.</returns>
        </member>
        <member name="M:BEditor.Data.Property.FileProperty.OnCompleted">
            <inheritdoc/>
        </member>
        <member name="M:BEditor.Data.Property.FileProperty.OnError(System.Exception)">
            <inheritdoc/>
        </member>
        <member name="M:BEditor.Data.Property.FileProperty.OnNext(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:BEditor.Data.Property.FileProperty.Subscribe(System.IObserver{System.String})">
            <inheritdoc/>
        </member>
        <member name="M:BEditor.Data.Property.FileProperty.Bind(BEditor.Data.Bindings.IBindable{System.String})">
            <inheritdoc/>
        </member>
        <member name="M:BEditor.Data.Property.FileProperty.OnLoad">
            <inheritdoc/>
        </member>
        <member name="T:BEditor.Data.Property.FileProperty.ChangeFileCommand">
            <summary>
            ファイルの名前を変更するコマンド.
            </summary>
        </member>
        <member name="M:BEditor.Data.Property.FileProperty.ChangeFileCommand.#ctor(BEditor.Data.Property.FileProperty,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:BEditor.Data.Property.FileProperty.ChangeFileCommand"/> class.
            </summary>
            <param name="property">対象の <see cref="T:BEditor.Data.Property.FileProperty"/>.</param>
            <param name="path">新しい値.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="property"/> が <see langword="null"/> です.</exception>
        </member>
        <member name="M:BEditor.Data.Property.FileProperty.ChangeFileCommand.Do">
            <inheritdoc/>
        </member>
        <member name="M:BEditor.Data.Property.FileProperty.ChangeFileCommand.Redo">
            <inheritdoc/>
        </member>
        <member name="M:BEditor.Data.Property.FileProperty.ChangeFileCommand.Undo">
            <inheritdoc/>
        </member>
        <member name="T:BEditor.Data.Property.FolderProperty">
            <summary>
            Represents a property to select a folder.
            </summary>
        </member>
        <member name="M:BEditor.Data.Property.FolderProperty.#ctor(BEditor.Data.Property.FolderPropertyMetadata)">
            <summary>
            Initializes a new instance of the <see cref="T:BEditor.Data.Property.FolderProperty"/> class.
            </summary>
            <param name="metadata">Metadata of this property.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="metadata"/> is <see langword="null"/>.</exception>
        </member>
        <member name="P:BEditor.Data.Property.FolderProperty.RawValue">
            <summary>
            Gets the name of the selected folder.
            </summary>
        </member>
        <member name="P:BEditor.Data.Property.FolderProperty.Value">
            <summary>
            Gets or sets the name of the selected folder.
            </summary>
        </member>
        <member name="P:BEditor.Data.Property.FolderProperty.TargetID">
            <inheritdoc/>
        </member>
        <member name="P:BEditor.Data.Property.FolderProperty.Mode">
            <summary>
            Gets or sets the mode of the file path.
            </summary>
        </member>
        <member name="M:BEditor.Data.Property.FolderProperty.GetObjectData(System.Text.Json.Utf8JsonWriter)">
            <inheritdoc/>
        </member>
        <member name="M:BEditor.Data.Property.FolderProperty.SetObjectData(BEditor.Data.DeserializeContext)">
            <inheritdoc/>
        </member>
        <member name="M:BEditor.Data.Property.FolderProperty.ChangeFolder(System.String)">
            <summary>
            Create a command to rename a folder.
            </summary>
            <param name="path">New value for <see cref="P:BEditor.Data.Property.FolderProperty.Value"/>.</param>
            <returns>Created <see cref="T:BEditor.Command.IRecordCommand"/>.</returns>
        </member>
        <member name="M:BEditor.Data.Property.FolderProperty.OnCompleted">
            <inheritdoc/>
        </member>
        <member name="M:BEditor.Data.Property.FolderProperty.OnError(System.Exception)">
            <inheritdoc/>
        </member>
        <member name="M:BEditor.Data.Property.FolderProperty.OnNext(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:BEditor.Data.Property.FolderProperty.Subscribe(System.IObserver{System.String})">
            <inheritdoc/>
        </member>
        <member name="M:BEditor.Data.Property.FolderProperty.Bind(BEditor.Data.Bindings.IBindable{System.String})">
            <inheritdoc/>
        </member>
        <member name="M:BEditor.Data.Property.FolderProperty.OnLoad">
            <inheritdoc/>
        </member>
        <member name="T:BEditor.Data.Property.FolderProperty.ChangeFolderCommand">
            <summary>
            ファイルの名前を変更するコマンド.
            </summary>
        </member>
        <member name="M:BEditor.Data.Property.FolderProperty.ChangeFolderCommand.#ctor(BEditor.Data.Property.FolderProperty,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:BEditor.Data.Property.FolderProperty.ChangeFolderCommand"/> class.
            </summary>
            <param name="property">対象の <see cref="T:BEditor.Data.Property.FolderProperty"/>.</param>
            <param name="path">新しい値.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="property"/> が <see langword="null"/> です.</exception>
        </member>
        <member name="M:BEditor.Data.Property.FolderProperty.ChangeFolderCommand.Do">
            <inheritdoc/>
        </member>
        <member name="M:BEditor.Data.Property.FolderProperty.ChangeFolderCommand.Redo">
            <inheritdoc/>
        </member>
        <member name="M:BEditor.Data.Property.FolderProperty.ChangeFolderCommand.Undo">
            <inheritdoc/>
        </member>
        <member name="T:BEditor.Data.Property.FontProperty">
            <summary>
            Represents a property for selecting a font.
            </summary>
        </member>
        <member name="M:BEditor.Data.Property.FontProperty.#ctor(BEditor.Data.Property.FontPropertyMetadata)">
            <summary>
            Initializes a new instance of the <see cref="T:BEditor.Data.Property.FontProperty"/> class.
            </summary>
            <param name="metadata">Metadata for this property.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="metadata"/> is <see langword="null"/>.</exception>
        </member>
        <member name="T:BEditor.Data.Property.FontProperty.FontSaveMode">
            <summary>
            Represents how the font will be saved.
            </summary>
        </member>
        <member name="F:BEditor.Data.Property.FontProperty.FontSaveMode.FullPath">
            <summary>
            File path is full path.
            </summary>
        </member>
        <member name="F:BEditor.Data.Property.FontProperty.FontSaveMode.FromProject">
            <summary>
            File paths are relative to the project.
            </summary>
        </member>
        <member name="F:BEditor.Data.Property.FontProperty.FontSaveMode.FamilyName">
            <summary>
            Font family name.
            </summary>
        </member>
        <member name="P:BEditor.Data.Property.FontProperty.Value">
            <summary>
            Gets or sets the selected font.
            </summary>
        </member>
        <member name="P:BEditor.Data.Property.FontProperty.TargetID">
            <inheritdoc/>
        </member>
        <member name="P:BEditor.Data.Property.FontProperty.Mode">
            <summary>
            Gets or sets the mode of the file path.
            </summary>
        </member>
        <member name="M:BEditor.Data.Property.FontProperty.GetObjectData(System.Text.Json.Utf8JsonWriter)">
            <inheritdoc/>
        </member>
        <member name="M:BEditor.Data.Property.FontProperty.SetObjectData(BEditor.Data.DeserializeContext)">
            <inheritdoc/>
        </member>
        <member name="M:BEditor.Data.Property.FontProperty.ChangeFont(BEditor.Drawing.Font)">
            <summary>
            Create a command to change the font.
            </summary>
            <param name="font">New value for <see cref="P:BEditor.Data.Property.FontProperty.Value"/>.</param>
            <returns>Created <see cref="T:BEditor.Command.IRecordCommand"/>.</returns>
        </member>
        <member name="M:BEditor.Data.Property.FontProperty.Subscribe(System.IObserver{BEditor.Drawing.Font})">
            <inheritdoc/>
        </member>
        <member name="M:BEditor.Data.Property.FontProperty.OnCompleted">
            <inheritdoc/>
        </member>
        <member name="M:BEditor.Data.Property.FontProperty.OnError(System.Exception)">
            <inheritdoc/>
        </member>
        <member name="M:BEditor.Data.Property.FontProperty.OnNext(BEditor.Drawing.Font)">
            <inheritdoc/>
        </member>
        <member name="M:BEditor.Data.Property.FontProperty.Bind(BEditor.Data.Bindings.IBindable{BEditor.Drawing.Font})">
            <inheritdoc/>
        </member>
        <member name="M:BEditor.Data.Property.FontProperty.OnLoad">
            <inheritdoc/>
        </member>
        <member name="T:BEditor.Data.Property.FontProperty.ChangeSelectCommand">
            <summary>
            フォントを変更するコマンド.
            </summary>
        </member>
        <member name="M:BEditor.Data.Property.FontProperty.ChangeSelectCommand.#ctor(BEditor.Data.Property.FontProperty,BEditor.Drawing.Font)">
            <summary>
            Initializes a new instance of the <see cref="T:BEditor.Data.Property.FontProperty.ChangeSelectCommand"/> class.
            </summary>
            <param name="property">対象の <see cref="T:BEditor.Data.Property.FontProperty"/>.</param>
            <param name="select">新しい値.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="property"/> が <see langword="null"/> です.</exception>
        </member>
        <member name="M:BEditor.Data.Property.FontProperty.ChangeSelectCommand.Do">
            <inheritdoc/>
        </member>
        <member name="M:BEditor.Data.Property.FontProperty.ChangeSelectCommand.Redo">
            <inheritdoc/>
        </member>
        <member name="M:BEditor.Data.Property.FontProperty.ChangeSelectCommand.Undo">
            <inheritdoc/>
        </member>
        <member name="T:BEditor.Data.Property.Group">
            <summary>
            Represents a base class for grouping <see cref="T:BEditor.Data.Property.PropertyElement"/>.
            </summary>
        </member>
        <member name="E:BEditor.Data.Property.Group.BEditor#Data#Property#IKeyframeProperty#Added">
            <inheritdoc/>
        </member>
        <member name="E:BEditor.Data.Property.Group.BEditor#Data#Property#IKeyframeProperty#Removed">
            <inheritdoc/>
        </member>
        <member name="E:BEditor.Data.Property.Group.BEditor#Data#Property#IKeyframeProperty#Moved">
            <inheritdoc/>
        </member>
        <member name="P:BEditor.Data.Property.Group.Children">
            <inheritdoc/>
        </member>
        <member name="P:BEditor.Data.Property.Group.Parent">
            <inheritdoc/>
        </member>
        <member name="P:BEditor.Data.Property.Group.BEditor#Data#Property#IKeyframeProperty#EasingType">
            <inheritdoc/>
        </member>
        <member name="M:BEditor.Data.Property.Group.GetProperties">
            <summary>
            Gets the <see cref="T:BEditor.Data.Property.PropertyElement"/> to display on the GUI.
            </summary>
            <returns>Returns the <see cref="T:BEditor.Data.Property.PropertyElement"/> to display on the GUI.</returns>
        </member>
        <member name="M:BEditor.Data.Property.Group.BEditor#Data#Property#IKeyframeProperty#AddFrame(BEditor.Data.Property.PositionInfo)">
            <inheritdoc/>
        </member>
        <member name="M:BEditor.Data.Property.Group.BEditor#Data#Property#IKeyframeProperty#Enumerate">
            <inheritdoc/>
        </member>
        <member name="M:BEditor.Data.Property.Group.BEditor#Data#Property#IKeyframeProperty#IndexOf(BEditor.Data.Property.PositionInfo)">
            <inheritdoc/>
        </member>
        <member name="M:BEditor.Data.Property.Group.BEditor#Data#Property#IKeyframeProperty#MoveFrame(System.Int32,BEditor.Data.Property.PositionInfo)">
            <inheritdoc/>
        </member>
        <member name="M:BEditor.Data.Property.Group.BEditor#Data#Property#IKeyframeProperty#RemoveFrame(BEditor.Data.Property.PositionInfo)">
            <inheritdoc/>
        </member>
        <member name="M:BEditor.Data.Property.Group.BEditor#Data#Property#IKeyframeProperty#UpdatePositionInfo(System.Int32,BEditor.Data.Property.PositionInfo)">
            <inheritdoc/>
        </member>
        <member name="T:BEditor.Data.Property.IEasingProperty">
            <summary>
            Represents a property that can be used by <see cref="T:BEditor.Data.Property.Easing.EasingFunc"/>.
            </summary>
        </member>
        <member name="P:BEditor.Data.Property.IEasingProperty.Parent">
            <inheritdoc cref="P:BEditor.Data.IChild`1.Parent"/>
        </member>
        <member name="T:BEditor.Data.Property.IKeyframeProperty">
            <summary>
            Represents a property that has an editing window on the timeline.
            </summary>
        </member>
        <member name="E:BEditor.Data.Property.IKeyframeProperty.Added">
            <summary>
            Occurs when a keyframe is added.
            <para>arg1: The added position.</para>
            </summary>
        </member>
        <member name="E:BEditor.Data.Property.IKeyframeProperty.Removed">
            <summary>
            Occurs when a keyframe is removed.
            <para>obj: The removed position.</para>
            </summary>
        </member>
        <member name="E:BEditor.Data.Property.IKeyframeProperty.Moved">
            <summary>
            Occurs when a keyframe is moved.
            <para>arg1: The index of the source Frames., arg2: The index of the destination Frames.</para>
            </summary>
        </member>
        <member name="P:BEditor.Data.Property.IKeyframeProperty.EasingType">
            <summary>
            Gets the current <see cref="T:BEditor.Data.Property.Easing.EasingFunc"/>.
            </summary>
        </member>
        <member name="P:BEditor.Data.Property.IKeyframeProperty.BEditor#Data#IParentSingle{BEditor#Data#Property#Easing#EasingFunc}#Child">
            <inheritdoc/>
        </member>
        <member name="M:BEditor.Data.Property.IKeyframeProperty.AddFrame(BEditor.Data.Property.PositionInfo)">
            <summary>
            Create a command to add a keyframe.
            </summary>
            <param name="frame">Position to be added.</param>
            <returns>Created <see cref="T:BEditor.Command.IRecordCommand"/>.</returns>
        </member>
        <member name="M:BEditor.Data.Property.IKeyframeProperty.RemoveFrame(BEditor.Data.Property.PositionInfo)">
            <summary>
            Create a command to remove a keyframe.
            </summary>
            <param name="frame">Position to be removed.</param>
            <returns>Created <see cref="T:BEditor.Command.IRecordCommand"/>.</returns>
        </member>
        <member name="M:BEditor.Data.Property.IKeyframeProperty.MoveFrame(System.Int32,BEditor.Data.Property.PositionInfo)">
            <summary>
            Create a command to move a keyframe.
            </summary>
            <param name="fromIndex">Index of the frame to be moved from.</param>
            <param name="toFrame">Destination position.</param>
            <returns>Created <see cref="T:BEditor.Command.IRecordCommand"/>.</returns>
        </member>
        <member name="M:BEditor.Data.Property.IKeyframeProperty.UpdatePositionInfo(System.Int32,BEditor.Data.Property.PositionInfo)">
            <summary>
            Create a command to update the <see cref="T:BEditor.Data.Property.PositionInfo"/> for the specified index.
            </summary>
            <param name="index">The index of <see cref="T:BEditor.Data.Property.PositionInfo"/> to update.</param>
            <param name="position">The new <see cref="T:BEditor.Data.Property.PositionInfo"/>.</param>
            <returns>Created <see cref="T:BEditor.Command.IRecordCommand"/>.</returns>
        </member>
        <member name="M:BEditor.Data.Property.IKeyframeProperty.IndexOf(BEditor.Data.Property.PositionInfo)">
            <summary>
            Determines the index of a specific item in the <see cref="T:BEditor.Data.Property.IKeyframeProperty"/>.
            </summary>
            <param name="position">The object to locate in the <see cref="T:BEditor.Data.Property.IKeyframeProperty"/>.</param>
            <returns>The index of item if found in the list; otherwise, -1.</returns>
        </member>
        <member name="M:BEditor.Data.Property.IKeyframeProperty.Enumerate">
            <summary>
            Gets an enumerable collection of position information.
            </summary>
            <returns>An enumerable collection of position information.</returns>
        </member>
        <member name="T:BEditor.Data.Property.IKeyframeProperty`1">
            <summary>
            Represents a property that has an editing window on the timeline.
            </summary>
            <typeparam name="T">The type of value.</typeparam>
        </member>
        <member name="P:BEditor.Data.Property.IKeyframeProperty`1.Pairs">
            <summary>
            Gets the <see cref="T:System.Collections.Generic.List`1"/> of the frame number corresponding to value.
            </summary>
        </member>
        <member name="T:BEditor.Data.Property.IPropertyElement">
            <summary>
            Represents a property used by <see cref="T:BEditor.Data.EffectElement"/>.
            </summary>
        </member>
        <member name="P:BEditor.Data.Property.IPropertyElement.PropertyMetadata">
            <summary>
            Gets or sets the metadata for this <see cref="T:BEditor.Data.Property.IPropertyElement"/>.
            </summary>
        </member>
        <member name="P:BEditor.Data.Property.IPropertyElement.BEditor#Data#IEditingObject#Name">
            <inheritdoc/>
        </member>
        <member name="T:BEditor.Data.Property.KeyFramePair`1">
            <summary>
            Represents a position and value pair.
            </summary>
            <typeparam name="T">The type of the value.</typeparam>
        </member>
        <member name="M:BEditor.Data.Property.KeyFramePair`1.#ctor(BEditor.Data.Property.PositionInfo,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:BEditor.Data.Property.KeyFramePair`1"/> struct.
            </summary>
            <param name="position">The position.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:BEditor.Data.Property.KeyFramePair`1.#ctor(System.Single,`0,BEditor.Data.Property.PositionType)">
            <summary>
            Initializes a new instance of the <see cref="T:BEditor.Data.Property.KeyFramePair`1"/> struct.
            </summary>
            <param name="position">The position.</param>
            <param name="value">The value.</param>
            <param name="type">The type of the position.</param>
        </member>
        <member name="P:BEditor.Data.Property.KeyFramePair`1.Value">
            <summary>
            Gets the value.
            </summary>
        </member>
        <member name="P:BEditor.Data.Property.KeyFramePair`1.Position">
            <summary>
            Gets the position.
            </summary>
        </member>
        <member name="M:BEditor.Data.Property.KeyFramePair`1.op_Equality(BEditor.Data.Property.KeyFramePair{`0},BEditor.Data.Property.KeyFramePair{`0})">
            <summary>
            Indicates whether two <see cref="T:BEditor.Data.Property.KeyFramePair`1"/> instances are equal.
            </summary>
            <param name="left">The first color to compare.</param>
            <param name="right">The second color to compare.</param>
            <returns>true if the values of <paramref name="left"/> and <paramref name="right"/> are equal; otherwise, false.</returns>
        </member>
        <member name="M:BEditor.Data.Property.KeyFramePair`1.op_Inequality(BEditor.Data.Property.KeyFramePair{`0},BEditor.Data.Property.KeyFramePair{`0})">
            <summary>
            Indicates whether two <see cref="T:BEditor.Data.Property.KeyFramePair`1"/> instances are not equal.
            </summary>
            <param name="left">The first color to compare.</param>
            <param name="right">The second color to compare.</param>
            <returns>true if the values of <paramref name="left"/> and <paramref name="right"/> are not equal; otherwise, false.</returns>
        </member>
        <member name="M:BEditor.Data.Property.KeyFramePair`1.TryParse(System.String,BEditor.Data.Property.KeyFramePair{`0}@)">
            <summary>
            Parses a <see cref="T:BEditor.Data.Property.KeyFramePair`1"/> string.
            A return value indicates whether the conversion succeeded or failed.
            </summary>
            <param name="s">The string.</param>
            <param name="result">The parsed <see cref="T:BEditor.Data.Property.KeyFramePair`1"/>.</param>
            <returns>true if s was parsed successfully; otherwise, false.</returns>
        </member>
        <member name="M:BEditor.Data.Property.KeyFramePair`1.Parse(System.String)">
            <summary>
            Parses a <see cref="T:BEditor.Data.Property.KeyFramePair`1"/> string.
            </summary>
            <param name="s">The string.</param>
            <returns>The parsed <see cref="T:BEditor.Data.Property.KeyFramePair`1"/>.</returns>
        </member>
        <member name="M:BEditor.Data.Property.KeyFramePair`1.WithPosition(System.Single)">
            <summary>
            Returns a new <see cref="T:BEditor.Data.Property.KeyFramePair`1"/> with the specified position.
            </summary>
            <param name="position">The position.</param>
            <returns>The new <see cref="T:BEditor.Data.Property.KeyFramePair`1"/>.</returns>
        </member>
        <member name="M:BEditor.Data.Property.KeyFramePair`1.WithValue(`0)">
            <summary>
            Returns a new <see cref="T:BEditor.Data.Property.KeyFramePair`1"/> with the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns>The new <see cref="T:BEditor.Data.Property.KeyFramePair`1"/>.</returns>
        </member>
        <member name="M:BEditor.Data.Property.KeyFramePair`1.WithType(BEditor.Data.Property.PositionType)">
            <summary>
            Returns a new <see cref="T:BEditor.Data.Property.KeyFramePair`1"/> with the specified position type.
            </summary>
            <param name="type">The position type.</param>
            <returns>The new <see cref="T:BEditor.Data.Property.KeyFramePair`1"/>.</returns>
        </member>
        <member name="M:BEditor.Data.Property.KeyFramePair`1.WithType(BEditor.Data.Property.PositionType,System.Single)">
            <summary>
            Returns a new <see cref="T:BEditor.Data.Property.KeyFramePair`1"/> with the specified position type.
            </summary>
            <param name="type">The position type.</param>
            <param name="length">The length.</param>
            <returns>The new <see cref="T:BEditor.Data.Property.KeyFramePair`1"/>.</returns>
        </member>
        <member name="M:BEditor.Data.Property.KeyFramePair`1.ToString">
            <inheritdoc/>
        </member>
        <member name="M:BEditor.Data.Property.KeyFramePair`1.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:BEditor.Data.Property.KeyFramePair`1.Equals(BEditor.Data.Property.KeyFramePair{`0})">
            <inheritdoc/>
        </member>
        <member name="M:BEditor.Data.Property.KeyFramePair`1.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="T:BEditor.Data.Property.LabelComponent">
            <summary>
            Represents a project that shows a string in the UI.
            </summary>
        </member>
        <member name="P:BEditor.Data.Property.LabelComponent.Text">
            <summary>
            Gets or sets the string to be shown.
            </summary>
        </member>
        <member name="M:BEditor.Data.Property.LabelComponent.OnCompleted">
            <inheritdoc/>
        </member>
        <member name="M:BEditor.Data.Property.LabelComponent.OnError(System.Exception)">
            <inheritdoc/>
        </member>
        <member name="M:BEditor.Data.Property.LabelComponent.OnNext(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:BEditor.Data.Property.LabelComponent.Subscribe(System.IObserver{System.String})">
            <inheritdoc/>
        </member>
        <member name="M:BEditor.Data.Property.LabelComponent.GetObjectData(System.Text.Json.Utf8JsonWriter)">
            <inheritdoc/>
        </member>
        <member name="M:BEditor.Data.Property.LabelComponent.SetObjectData(BEditor.Data.DeserializeContext)">
            <inheritdoc/>
        </member>
        <member name="T:BEditor.Data.Property.ButtonComponentMetadata">
            <summary>
            The metadata of <see cref="T:BEditor.Data.Property.ButtonComponent"/>.
            </summary>
            <param name="Name">The string displayed in the property header.</param>
        </member>
        <member name="M:BEditor.Data.Property.ButtonComponentMetadata.#ctor(System.String)">
            <summary>
            The metadata of <see cref="T:BEditor.Data.Property.ButtonComponent"/>.
            </summary>
            <param name="Name">The string displayed in the property header.</param>
        </member>
        <member name="M:BEditor.Data.Property.ButtonComponentMetadata.Create">
            <inheritdoc/>
        </member>
        <member name="T:BEditor.Data.Property.CheckPropertyMetadata">
            <summary>
            The metadata of <see cref="T:BEditor.Data.Property.CheckProperty"/>.
            </summary>
            <param name="Name">The string displayed in the property header.</param>
            <param name="DefaultIsChecked">The default value for <see cref="P:BEditor.Data.Property.CheckProperty.Value"/>.</param>
        </member>
        <member name="M:BEditor.Data.Property.CheckPropertyMetadata.#ctor(System.String,System.Boolean)">
            <summary>
            The metadata of <see cref="T:BEditor.Data.Property.CheckProperty"/>.
            </summary>
            <param name="Name">The string displayed in the property header.</param>
            <param name="DefaultIsChecked">The default value for <see cref="P:BEditor.Data.Property.CheckProperty.Value"/>.</param>
        </member>
        <member name="M:BEditor.Data.Property.CheckPropertyMetadata.Create">
            <inheritdoc/>
        </member>
        <member name="T:BEditor.Data.Property.ColorAnimationPropertyMetadata">
            <summary>
            The metadata of <see cref="T:BEditor.Data.Property.ColorAnimationProperty"/>.
            </summary>
            <param name="Name">The string displayed in the property header.</param>
            <param name="DefaultColor">The default color.</param>
            <param name="DefaultEase">The default easing function.</param>
        </member>
        <member name="M:BEditor.Data.Property.ColorAnimationPropertyMetadata.#ctor(System.String,BEditor.Drawing.Color,BEditor.Data.Property.Easing.EasingMetadata)">
            <summary>
            The metadata of <see cref="T:BEditor.Data.Property.ColorAnimationProperty"/>.
            </summary>
            <param name="Name">The string displayed in the property header.</param>
            <param name="DefaultColor">The default color.</param>
            <param name="DefaultEase">The default easing function.</param>
        </member>
        <member name="M:BEditor.Data.Property.ColorAnimationPropertyMetadata.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:BEditor.Data.Property.ColorAnimationPropertyMetadata"/> class.
            </summary>
            <param name="name">The string displayed in the property header.</param>
        </member>
        <member name="M:BEditor.Data.Property.ColorAnimationPropertyMetadata.#ctor(System.String,BEditor.Drawing.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:BEditor.Data.Property.ColorAnimationPropertyMetadata"/> class.
            </summary>
            <param name="name">The string displayed in the property header.</param>
            <param name="defaultColor">The default color.</param>
        </member>
        <member name="M:BEditor.Data.Property.ColorAnimationPropertyMetadata.Create">
            <inheritdoc/>
        </member>
        <member name="T:BEditor.Data.Property.ColorPropertyMetadata">
            <summary>
            The metadata of <see cref="T:BEditor.Data.Property.ColorProperty"/>.
            </summary>
            <param name="Name">The string displayed in the property header.</param>
            <param name="DefaultColor">The default color.</param>
        </member>
        <member name="M:BEditor.Data.Property.ColorPropertyMetadata.#ctor(System.String,BEditor.Drawing.Color)">
            <summary>
            The metadata of <see cref="T:BEditor.Data.Property.ColorProperty"/>.
            </summary>
            <param name="Name">The string displayed in the property header.</param>
            <param name="DefaultColor">The default color.</param>
        </member>
        <member name="M:BEditor.Data.Property.ColorPropertyMetadata.Create">
            <inheritdoc/>
        </member>
        <member name="T:BEditor.Data.Property.DocumentPropertyMetadata">
            <summary>
            The metadata of <see cref="T:BEditor.Data.Property.DocumentProperty"/>.
            </summary>
            <param name="DefaultText">The default value of <see cref="P:BEditor.Data.Property.DocumentProperty.Value"/>.</param>
        </member>
        <member name="M:BEditor.Data.Property.DocumentPropertyMetadata.#ctor(System.String)">
            <summary>
            The metadata of <see cref="T:BEditor.Data.Property.DocumentProperty"/>.
            </summary>
            <param name="DefaultText">The default value of <see cref="P:BEditor.Data.Property.DocumentProperty.Value"/>.</param>
        </member>
        <member name="M:BEditor.Data.Property.DocumentPropertyMetadata.Create">
            <inheritdoc/>
        </member>
        <member name="T:BEditor.Data.Property.EasePropertyMetadata">
            <summary>
            The metadata of <see cref="T:BEditor.Data.Property.EaseProperty"/>.
            </summary>
            <param name="Name">The string displayed in the property header.</param>
            <param name="DefaultEase">The default easing function.</param>
            <param name="DefaultValue">The default value.</param>
            <param name="Max">The maximum value.</param>
            <param name="Min">The minimum value.</param>
            <param name="UseOptional">The bool of whether to use the Optional value.</param>
        </member>
        <member name="M:BEditor.Data.Property.EasePropertyMetadata.#ctor(System.String,BEditor.Data.Property.Easing.EasingMetadata,System.Single,System.Single,System.Single,System.Boolean)">
            <summary>
            The metadata of <see cref="T:BEditor.Data.Property.EaseProperty"/>.
            </summary>
            <param name="Name">The string displayed in the property header.</param>
            <param name="DefaultEase">The default easing function.</param>
            <param name="DefaultValue">The default value.</param>
            <param name="Max">The maximum value.</param>
            <param name="Min">The minimum value.</param>
            <param name="UseOptional">The bool of whether to use the Optional value.</param>
        </member>
        <member name="M:BEditor.Data.Property.EasePropertyMetadata.#ctor(System.String,System.Single,System.Single,System.Single,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:BEditor.Data.Property.EasePropertyMetadata"/> class.
            </summary>
            <param name="name">The string displayed in the property header.</param>
            <param name="defaultValue">The default value.</param>
            <param name="max">The maximum value.</param>
            <param name="min">The minimum value.</param>
            <param name="useOptional">The bool of whether to use the Optional value.</param>
        </member>
        <member name="P:BEditor.Data.Property.EasePropertyMetadata.FormatString">
            <summary>
            Gets the format string.
            </summary>
        </member>
        <member name="M:BEditor.Data.Property.EasePropertyMetadata.Create">
            <inheritdoc/>
        </member>
        <member name="T:BEditor.Data.Property.FilePropertyMetadata">
            <summary>
            The metadata of <see cref="T:BEditor.Data.Property.FileProperty"/>.
            </summary>
            <param name="Name">The string displayed in the property header.</param>
            <param name="DefaultFile">The default value of <see cref="P:BEditor.Data.Property.FileProperty.Value"/>.</param>
            <param name="Filter">The filter for the file to be selected.</param>
        </member>
        <member name="M:BEditor.Data.Property.FilePropertyMetadata.#ctor(System.String,System.String,BEditor.FileFilter)">
            <summary>
            The metadata of <see cref="T:BEditor.Data.Property.FileProperty"/>.
            </summary>
            <param name="Name">The string displayed in the property header.</param>
            <param name="DefaultFile">The default value of <see cref="P:BEditor.Data.Property.FileProperty.Value"/>.</param>
            <param name="Filter">The filter for the file to be selected.</param>
        </member>
        <member name="M:BEditor.Data.Property.FilePropertyMetadata.Create">
            <inheritdoc/>
        </member>
        <member name="T:BEditor.Data.Property.FolderPropertyMetadata">
            <summary>
            The metadata of <see cref="T:BEditor.Data.Property.FolderProperty"/>.
            </summary>
            <param name="Name">The string displayed in the property header.</param>
            <param name="Default">The default value of <see cref="P:BEditor.Data.Property.FolderProperty.Value"/>.</param>
        </member>
        <member name="M:BEditor.Data.Property.FolderPropertyMetadata.#ctor(System.String,System.String)">
            <summary>
            The metadata of <see cref="T:BEditor.Data.Property.FolderProperty"/>.
            </summary>
            <param name="Name">The string displayed in the property header.</param>
            <param name="Default">The default value of <see cref="P:BEditor.Data.Property.FolderProperty.Value"/>.</param>
        </member>
        <member name="M:BEditor.Data.Property.FolderPropertyMetadata.Create">
            <inheritdoc/>
        </member>
        <member name="T:BEditor.Data.Property.FontPropertyMetadata">
            <summary>
            The metadata of <see cref="T:BEditor.Data.Property.FontProperty"/>.
            </summary>
        </member>
        <member name="M:BEditor.Data.Property.FontPropertyMetadata.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:BEditor.Data.Property.FontPropertyMetadata"/> class.
            </summary>
        </member>
        <member name="P:BEditor.Data.Property.FontPropertyMetadata.SelectItem">
            <summary>
            Gets the default selected item.
            </summary>
        </member>
        <member name="M:BEditor.Data.Property.FontPropertyMetadata.Create">
            <inheritdoc/>
        </member>
        <member name="T:BEditor.Data.Property.LabelComponentMetadata">
            <summary>
            The metadata of <see cref="T:BEditor.Data.Property.LabelComponent"/>.
            </summary>
        </member>
        <member name="M:BEditor.Data.Property.LabelComponentMetadata.#ctor">
            <summary>
            The metadata of <see cref="T:BEditor.Data.Property.LabelComponent"/>.
            </summary>
        </member>
        <member name="M:BEditor.Data.Property.LabelComponentMetadata.Create">
            <inheritdoc/>
        </member>
        <member name="T:BEditor.Data.Property.PropertyElementMetadata">
            <summary>
            The metadata of <see cref="T:BEditor.Data.Property.PropertyElement"/>.
            </summary>
            <param name="Name">The string displayed in the property header.</param>
        </member>
        <member name="M:BEditor.Data.Property.PropertyElementMetadata.#ctor(System.String)">
            <summary>
            The metadata of <see cref="T:BEditor.Data.Property.PropertyElement"/>.
            </summary>
            <param name="Name">The string displayed in the property header.</param>
        </member>
        <member name="T:BEditor.Data.Property.SelectorPropertyMetadata">
            <summary>
            The metadata of <see cref="T:BEditor.Data.Property.SelectorProperty"/>.
            </summary>
            <param name="Name">The string displayed in the property header.</param>
            <param name="ItemSource">The source of the item to be selected.</param>
            <param name="DefaultIndex">The default value for <see cref="P:BEditor.Data.Property.SelectorProperty.Index"/>.</param>
        </member>
        <member name="M:BEditor.Data.Property.SelectorPropertyMetadata.#ctor(System.String,System.Collections.Generic.IList{System.String},System.Int32)">
            <summary>
            The metadata of <see cref="T:BEditor.Data.Property.SelectorProperty"/>.
            </summary>
            <param name="Name">The string displayed in the property header.</param>
            <param name="ItemSource">The source of the item to be selected.</param>
            <param name="DefaultIndex">The default value for <see cref="P:BEditor.Data.Property.SelectorProperty.Index"/>.</param>
        </member>
        <member name="M:BEditor.Data.Property.SelectorPropertyMetadata.Create">
            <inheritdoc/>
        </member>
        <member name="T:BEditor.Data.Property.SelectorPropertyMetadata`1">
            <summary>
            The metadata of <see cref="T:BEditor.Data.Property.SelectorProperty`1"/>.
            </summary>
            <typeparam name="T">The type of element.</typeparam>
            <param name="Name">The string displayed in the property header.</param>
            <param name="ItemSource">The source of the item to be selected.</param>
            <param name="Selector">A function to get a string from an item.</param>
            <param name="DefaultIndex">The default value for <see cref="P:BEditor.Data.Property.SelectorProperty`1.Index"/>.</param>
        </member>
        <member name="M:BEditor.Data.Property.SelectorPropertyMetadata`1.#ctor(System.String,System.Collections.Generic.IList{`0},System.Func{`0,System.String},System.Int32)">
            <summary>
            The metadata of <see cref="T:BEditor.Data.Property.SelectorProperty`1"/>.
            </summary>
            <typeparam name="T">The type of element.</typeparam>
            <param name="Name">The string displayed in the property header.</param>
            <param name="ItemSource">The source of the item to be selected.</param>
            <param name="Selector">A function to get a string from an item.</param>
            <param name="DefaultIndex">The default value for <see cref="P:BEditor.Data.Property.SelectorProperty`1.Index"/>.</param>
        </member>
        <member name="P:BEditor.Data.Property.SelectorPropertyMetadata`1.DisplayStrings">
            <summary>
            Gets the strings to display in the UI.
            </summary>
        </member>
        <member name="M:BEditor.Data.Property.SelectorPropertyMetadata`1.Create">
            <inheritdoc/>
        </member>
        <member name="T:BEditor.Data.Property.TextPropertyMetadata">
            <summary>
            The metadata of <see cref="T:BEditor.Data.Property.TextProperty"/>.
            </summary>
            <param name="Name">The string displayed in the property header.</param>
            <param name="DefaultText">The default value for <see cref="P:BEditor.Data.Property.TextProperty.Value"/>.</param>
        </member>
        <member name="M:BEditor.Data.Property.TextPropertyMetadata.#ctor(System.String,System.String)">
            <summary>
            The metadata of <see cref="T:BEditor.Data.Property.TextProperty"/>.
            </summary>
            <param name="Name">The string displayed in the property header.</param>
            <param name="DefaultText">The default value for <see cref="P:BEditor.Data.Property.TextProperty.Value"/>.</param>
        </member>
        <member name="M:BEditor.Data.Property.TextPropertyMetadata.Create">
            <inheritdoc/>
        </member>
        <member name="T:BEditor.Data.Property.ValuePropertyMetadata">
            <summary>
            The metadata of <see cref="T:BEditor.Data.Property.ValueProperty"/>.
            </summary>
            <param name="Name">The string displayed in the property header.</param>
            <param name="DefaultValue">The default value.</param>
            <param name="Max">The maximum value.</param>
            <param name="Min">The minimum value.</param>
        </member>
        <member name="M:BEditor.Data.Property.ValuePropertyMetadata.#ctor(System.String,System.Single,System.Single,System.Single)">
            <summary>
            The metadata of <see cref="T:BEditor.Data.Property.ValueProperty"/>.
            </summary>
            <param name="Name">The string displayed in the property header.</param>
            <param name="DefaultValue">The default value.</param>
            <param name="Max">The maximum value.</param>
            <param name="Min">The minimum value.</param>
        </member>
        <member name="P:BEditor.Data.Property.ValuePropertyMetadata.FormatString">
            <summary>
            Gets the format string.
            </summary>
        </member>
        <member name="M:BEditor.Data.Property.ValuePropertyMetadata.Create">
            <inheritdoc/>
        </member>
        <member name="T:BEditor.Data.Property.PositionInfo">
            <summary>
            Represents position information.
            </summary>
        </member>
        <member name="M:BEditor.Data.Property.PositionInfo.#ctor(System.Single,BEditor.Data.Property.PositionType)">
            <summary>
            Initializes a new instance of the <see cref="T:BEditor.Data.Property.PositionInfo"/> struct.
            </summary>
            <param name="position">The position.</param>
            <param name="type">The type of the position.</param>
        </member>
        <member name="P:BEditor.Data.Property.PositionInfo.Value">
            <summary>
            Gets the value.
            </summary>
        </member>
        <member name="P:BEditor.Data.Property.PositionInfo.Type">
            <summary>
            Gets the type of the position.
            </summary>
        </member>
        <member name="M:BEditor.Data.Property.PositionInfo.op_Equality(BEditor.Data.Property.PositionInfo,BEditor.Data.Property.PositionInfo)">
            <summary>
            Indicates whether two <see cref="T:BEditor.Data.Property.PositionInfo"/> instances are equal.
            </summary>
            <param name="left">The first color to compare.</param>
            <param name="right">The second color to compare.</param>
            <returns>true if the values of <paramref name="left"/> and <paramref name="right"/> are equal; otherwise, false.</returns>
        </member>
        <member name="M:BEditor.Data.Property.PositionInfo.op_Inequality(BEditor.Data.Property.PositionInfo,BEditor.Data.Property.PositionInfo)">
            <summary>
            Indicates whether two <see cref="T:BEditor.Data.Property.PositionInfo"/> instances are not equal.
            </summary>
            <param name="left">The first color to compare.</param>
            <param name="right">The second color to compare.</param>
            <returns>true if the values of <paramref name="left"/> and <paramref name="right"/> are not equal; otherwise, false.</returns>
        </member>
        <member name="M:BEditor.Data.Property.PositionInfo.TryParse(System.String,BEditor.Data.Property.PositionInfo@)">
            <summary>
            Parses a <see cref="T:BEditor.Data.Property.PositionInfo"/> string.
            A return value indicates whether the conversion succeeded or failed.
            </summary>
            <param name="s">The string.</param>
            <param name="result">The parsed <see cref="T:BEditor.Data.Property.PositionInfo"/>.</param>
            <returns>true if s was parsed successfully; otherwise, false.</returns>
        </member>
        <member name="M:BEditor.Data.Property.PositionInfo.Parse(System.String)">
            <summary>
            Parses a <see cref="T:BEditor.Data.Property.PositionInfo"/> string.
            </summary>
            <param name="s">The string.</param>
            <returns>The parsed <see cref="T:BEditor.Data.Property.PositionInfo"/>.</returns>
        </member>
        <member name="M:BEditor.Data.Property.PositionInfo.WithValue(System.Single)">
            <summary>
            Returns a new <see cref="T:BEditor.Data.Property.PositionInfo"/> with the specified position.
            </summary>
            <param name="value">The position.</param>
            <returns>The new <see cref="T:BEditor.Data.Property.PositionInfo"/>.</returns>
        </member>
        <member name="M:BEditor.Data.Property.PositionInfo.WithType(BEditor.Data.Property.PositionType)">
            <summary>
            Returns a new <see cref="T:BEditor.Data.Property.PositionInfo"/> with the specified position type.
            </summary>
            <param name="type">The type of the position.</param>
            <returns>The new <see cref="T:BEditor.Data.Property.PositionInfo"/>.</returns>
        </member>
        <member name="M:BEditor.Data.Property.PositionInfo.WithType(BEditor.Data.Property.PositionType,System.Single)">
            <summary>
            Returns a new <see cref="T:BEditor.Data.Property.PositionInfo"/> with the specified position type.
            </summary>
            <param name="type">The type of the position.</param>
            <param name="length">The length.</param>
            <returns>The new <see cref="T:BEditor.Data.Property.PositionInfo"/>.</returns>
        </member>
        <member name="M:BEditor.Data.Property.PositionInfo.GetAbsolutePosition(System.Single)">
            <summary>
            Gets the absolute position.
            </summary>
            <param name="length">The length.</param>
            <returns>The absolute position.</returns>
        </member>
        <member name="M:BEditor.Data.Property.PositionInfo.GetPercentagePosition(System.Single)">
            <summary>
            Gets the percentage.
            </summary>
            <param name="length">The length.</param>
            <returns>The percentage.</returns>
        </member>
        <member name="M:BEditor.Data.Property.PositionInfo.ToString">
            <inheritdoc/>
        </member>
        <member name="M:BEditor.Data.Property.PositionInfo.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:BEditor.Data.Property.PositionInfo.Equals(BEditor.Data.Property.PositionInfo)">
            <inheritdoc/>
        </member>
        <member name="M:BEditor.Data.Property.PositionInfo.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="T:BEditor.Data.Property.PositionType">
            <summary>
            Represents the type of position.
            </summary>
        </member>
        <member name="F:BEditor.Data.Property.PositionType.Absolute">
            <summary>
            Absolute position.
            </summary>
        </member>
        <member name="F:BEditor.Data.Property.PositionType.Percentage">
            <summary>
            Percentage.
            </summary>
        </member>
        <member name="T:BEditor.Data.Property.PrimitiveGroup.Blend">
            <summary>
            Represents a property for setting the blend Option.
            </summary>
        </member>
        <member name="F:BEditor.Data.Property.PrimitiveGroup.Blend.OpacityProperty">
            <summary>
            Defines the <see cref="P:BEditor.Data.Property.PrimitiveGroup.Blend.Opacity"/> property.
            </summary>
        </member>
        <member name="F:BEditor.Data.Property.PrimitiveGroup.Blend.ColorProperty">
            <summary>
            Defines the <see cref="P:BEditor.Data.Property.PrimitiveGroup.Blend.Color"/> property.
            </summary>
        </member>
        <member name="F:BEditor.Data.Property.PrimitiveGroup.Blend.BlendTypeProperty">
            <summary>
            Defines the <see cref="P:BEditor.Data.Property.PrimitiveGroup.Blend.BlendType"/> property.
            </summary>
        </member>
        <member name="M:BEditor.Data.Property.PrimitiveGroup.Blend.#ctor(BEditor.Data.Property.PrimitiveGroup.BlendMetadata)">
            <summary>
            Initializes a new instance of the <see cref="T:BEditor.Data.Property.PrimitiveGroup.Blend"/> class.
            </summary>
            <param name="metadata">Metadata of this property.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="metadata"/> is <see langword="null"/>.</exception>
        </member>
        <member name="P:BEditor.Data.Property.PrimitiveGroup.Blend.Opacity">
            <summary>
            Gets the opacity.
            </summary>
        </member>
        <member name="P:BEditor.Data.Property.PrimitiveGroup.Blend.Color">
            <summary>
            Gets the color.
            </summary>
        </member>
        <member name="P:BEditor.Data.Property.PrimitiveGroup.Blend.BlendType">
            <summary>
            Gets the BlendFunc.
            </summary>
        </member>
        <member name="M:BEditor.Data.Property.PrimitiveGroup.Blend.GetProperties">
            <inheritdoc/>
        </member>
        <member name="M:BEditor.Data.Property.PrimitiveGroup.Blend.ResetOptional">
            <summary>
            Reset the <see cref="P:BEditor.Data.Property.PrimitiveGroup.Blend.Opacity"/> Optionals.
            </summary>
        </member>
        <member name="T:BEditor.Data.Property.PrimitiveGroup.BlendMetadata">
            <summary>
            The metadata of <see cref="T:BEditor.Data.Property.PrimitiveGroup.Blend"/>.
            </summary>
            <param name="Name">The string displayed in the property header.</param>
        </member>
        <member name="M:BEditor.Data.Property.PrimitiveGroup.BlendMetadata.#ctor(System.String)">
            <summary>
            The metadata of <see cref="T:BEditor.Data.Property.PrimitiveGroup.Blend"/>.
            </summary>
            <param name="Name">The string displayed in the property header.</param>
        </member>
        <member name="M:BEditor.Data.Property.PrimitiveGroup.BlendMetadata.Create">
            <inheritdoc/>
        </member>
        <member name="T:BEditor.Data.Property.PrimitiveGroup.Coordinate">
            <summary>
            Represents a property for setting XYZ coordinates.
            </summary>
        </member>
        <member name="F:BEditor.Data.Property.PrimitiveGroup.Coordinate.XProperty">
            <summary>
            Defines the <see cref="P:BEditor.Data.Property.PrimitiveGroup.Coordinate.X"/> property.
            </summary>
        </member>
        <member name="F:BEditor.Data.Property.PrimitiveGroup.Coordinate.YProperty">
            <summary>
            Defines the <see cref="P:BEditor.Data.Property.PrimitiveGroup.Coordinate.Y"/> property.
            </summary>
        </member>
        <member name="F:BEditor.Data.Property.PrimitiveGroup.Coordinate.ZProperty">
            <summary>
            Defines the <see cref="P:BEditor.Data.Property.PrimitiveGroup.Coordinate.Z"/> property.
            </summary>
        </member>
        <member name="F:BEditor.Data.Property.PrimitiveGroup.Coordinate.CenterXProperty">
            <summary>
            Defines the <see cref="P:BEditor.Data.Property.PrimitiveGroup.Coordinate.CenterX"/> property.
            </summary>
        </member>
        <member name="F:BEditor.Data.Property.PrimitiveGroup.Coordinate.CenterYProperty">
            <summary>
            Defines the <see cref="P:BEditor.Data.Property.PrimitiveGroup.Coordinate.CenterY"/> property.
            </summary>
        </member>
        <member name="F:BEditor.Data.Property.PrimitiveGroup.Coordinate.CenterZProperty">
            <summary>
            Defines the <see cref="P:BEditor.Data.Property.PrimitiveGroup.Coordinate.CenterZ"/> property.
            </summary>
        </member>
        <member name="M:BEditor.Data.Property.PrimitiveGroup.Coordinate.#ctor(BEditor.Data.Property.PrimitiveGroup.CoordinateMetadata)">
            <summary>
            Initializes a new instance of the <see cref="T:BEditor.Data.Property.PrimitiveGroup.Coordinate"/> class.
            </summary>
            <param name="metadata">Metadata of this property.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="metadata"/> is <see langword="null"/>.</exception>
        </member>
        <member name="P:BEditor.Data.Property.PrimitiveGroup.Coordinate.X">
            <summary>
            Gets the X coordinate.
            </summary>
        </member>
        <member name="P:BEditor.Data.Property.PrimitiveGroup.Coordinate.Y">
            <summary>
            Gets the Y coordinate.
            </summary>
        </member>
        <member name="P:BEditor.Data.Property.PrimitiveGroup.Coordinate.Z">
            <summary>
            Gets the Z coordinate.
            </summary>
        </member>
        <member name="P:BEditor.Data.Property.PrimitiveGroup.Coordinate.CenterX">
            <summary>
            Gets the X coordinate of the center.
            </summary>
        </member>
        <member name="P:BEditor.Data.Property.PrimitiveGroup.Coordinate.CenterY">
            <summary>
            Gets the Y coordinate of the center.
            </summary>
        </member>
        <member name="P:BEditor.Data.Property.PrimitiveGroup.Coordinate.CenterZ">
            <summary>
            Gets the Z coordinate of the center.
            </summary>
        </member>
        <member name="M:BEditor.Data.Property.PrimitiveGroup.Coordinate.GetProperties">
            <inheritdoc/>
        </member>
        <member name="M:BEditor.Data.Property.PrimitiveGroup.Coordinate.ResetOptional">
            <summary>
            Reset the <see cref="P:BEditor.Data.Property.PrimitiveGroup.Coordinate.CenterX"/>, <see cref="P:BEditor.Data.Property.PrimitiveGroup.Coordinate.CenterY"/>, and <see cref="P:BEditor.Data.Property.PrimitiveGroup.Coordinate.CenterZ"/> Optionals.
            </summary>
        </member>
        <member name="T:BEditor.Data.Property.PrimitiveGroup.CoordinateMetadata">
            <summary>
            The metadata of <see cref="T:BEditor.Data.Property.PrimitiveGroup.Coordinate"/>.
            </summary>
            <param name="Name">The string displayed in the property header.</param>
        </member>
        <member name="M:BEditor.Data.Property.PrimitiveGroup.CoordinateMetadata.#ctor(System.String)">
            <summary>
            The metadata of <see cref="T:BEditor.Data.Property.PrimitiveGroup.Coordinate"/>.
            </summary>
            <param name="Name">The string displayed in the property header.</param>
        </member>
        <member name="M:BEditor.Data.Property.PrimitiveGroup.CoordinateMetadata.Create">
            <inheritdoc/>
        </member>
        <member name="T:BEditor.Data.Property.PrimitiveGroup.Material">
            <summary>
            Represents a property that sets the Material.
            </summary>
        </member>
        <member name="F:BEditor.Data.Property.PrimitiveGroup.Material.AmbientProperty">
            <summary>
            Defines the <see cref="P:BEditor.Data.Property.PrimitiveGroup.Material.Ambient"/> property.
            </summary>
        </member>
        <member name="F:BEditor.Data.Property.PrimitiveGroup.Material.DiffuseProperty">
            <summary>
            Defines the <see cref="P:BEditor.Data.Property.PrimitiveGroup.Material.Diffuse"/> property.
            </summary>
        </member>
        <member name="F:BEditor.Data.Property.PrimitiveGroup.Material.SpecularProperty">
            <summary>
            Defines the <see cref="P:BEditor.Data.Property.PrimitiveGroup.Material.Specular"/> property.
            </summary>
        </member>
        <member name="F:BEditor.Data.Property.PrimitiveGroup.Material.ShininessProperty">
            <summary>
            Defines the <see cref="P:BEditor.Data.Property.PrimitiveGroup.Material.Shininess"/> property.
            </summary>
        </member>
        <member name="M:BEditor.Data.Property.PrimitiveGroup.Material.#ctor(BEditor.Data.Property.PrimitiveGroup.MaterialMetadata)">
            <summary>
            Initializes a new instance of the <see cref="T:BEditor.Data.Property.PrimitiveGroup.Material"/> class.
            </summary>
            <param name="metadata">Metadata of this property.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="metadata"/> is <see langword="null"/>.</exception>
        </member>
        <member name="P:BEditor.Data.Property.PrimitiveGroup.Material.Ambient">
            <summary>
            Gets the ambient.
            </summary>
        </member>
        <member name="P:BEditor.Data.Property.PrimitiveGroup.Material.Diffuse">
            <summary>
            Gets the diffuse.
            </summary>
        </member>
        <member name="P:BEditor.Data.Property.PrimitiveGroup.Material.Specular">
            <summary>
            Gets the shininess.
            </summary>
        </member>
        <member name="P:BEditor.Data.Property.PrimitiveGroup.Material.Shininess">
            <summary>
            Gets the shininess.
            </summary>
        </member>
        <member name="M:BEditor.Data.Property.PrimitiveGroup.Material.GetProperties">
            <inheritdoc/>
        </member>
        <member name="T:BEditor.Data.Property.PrimitiveGroup.MaterialMetadata">
            <summary>
            The metadata of <see cref="T:BEditor.Data.Property.PrimitiveGroup.Material"/>.
            </summary>
            <param name="Name">The string displayed in the property header.</param>
        </member>
        <member name="M:BEditor.Data.Property.PrimitiveGroup.MaterialMetadata.#ctor(System.String)">
            <summary>
            The metadata of <see cref="T:BEditor.Data.Property.PrimitiveGroup.Material"/>.
            </summary>
            <param name="Name">The string displayed in the property header.</param>
        </member>
        <member name="M:BEditor.Data.Property.PrimitiveGroup.MaterialMetadata.Create">
            <inheritdoc/>
        </member>
        <member name="T:BEditor.Data.Property.PrimitiveGroup.Rotate">
            <summary>
            Represents a property for setting the angle of the XYZ axis.
            </summary>
        </member>
        <member name="F:BEditor.Data.Property.PrimitiveGroup.Rotate.RotateXProperty">
            <summary>
            Defines the <see cref="P:BEditor.Data.Property.PrimitiveGroup.Rotate.RotateX"/> property.
            </summary>
        </member>
        <member name="F:BEditor.Data.Property.PrimitiveGroup.Rotate.RotateYProperty">
            <summary>
            Defines the <see cref="P:BEditor.Data.Property.PrimitiveGroup.Rotate.RotateY"/> property.
            </summary>
        </member>
        <member name="F:BEditor.Data.Property.PrimitiveGroup.Rotate.RotateZProperty">
            <summary>
            Defines the <see cref="P:BEditor.Data.Property.PrimitiveGroup.Rotate.RotateZ"/> property.
            </summary>
        </member>
        <member name="M:BEditor.Data.Property.PrimitiveGroup.Rotate.#ctor(BEditor.Data.Property.PrimitiveGroup.RotateMetadata)">
            <summary>
            Initializes a new instance of the <see cref="T:BEditor.Data.Property.PrimitiveGroup.Rotate"/> class.
            </summary>
            <param name="metadata">Metadata of this property.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="metadata"/> is <see langword="null"/>.</exception>
        </member>
        <member name="P:BEditor.Data.Property.PrimitiveGroup.Rotate.RotateX">
            <summary>
            Gets the <see cref="T:BEditor.Data.Property.EaseProperty"/> of the X-axis angle.
            </summary>
        </member>
        <member name="P:BEditor.Data.Property.PrimitiveGroup.Rotate.RotateY">
            <summary>
            Gets the <see cref="T:BEditor.Data.Property.EaseProperty"/> of the Y-axis angle.
            </summary>
        </member>
        <member name="P:BEditor.Data.Property.PrimitiveGroup.Rotate.RotateZ">
            <summary>
            Gets the <see cref="T:BEditor.Data.Property.EaseProperty"/> of the Z-axis angle.
            </summary>
        </member>
        <member name="M:BEditor.Data.Property.PrimitiveGroup.Rotate.GetProperties">
            <inheritdoc/>
        </member>
        <member name="M:BEditor.Data.Property.PrimitiveGroup.Rotate.ResetOptional">
            <summary>
            Reset the <see cref="P:BEditor.Data.Property.PrimitiveGroup.Rotate.RotateX"/>, <see cref="P:BEditor.Data.Property.PrimitiveGroup.Rotate.RotateY"/>, and <see cref="P:BEditor.Data.Property.PrimitiveGroup.Rotate.RotateZ"/> Optionals.
            </summary>
        </member>
        <member name="T:BEditor.Data.Property.PrimitiveGroup.RotateMetadata">
            <summary>
            The metadata of <see cref="T:BEditor.Data.Property.PrimitiveGroup.Rotate"/>.
            </summary>
            <param name="Name">The string displayed in the property header.</param>
        </member>
        <member name="M:BEditor.Data.Property.PrimitiveGroup.RotateMetadata.#ctor(System.String)">
            <summary>
            The metadata of <see cref="T:BEditor.Data.Property.PrimitiveGroup.Rotate"/>.
            </summary>
            <param name="Name">The string displayed in the property header.</param>
        </member>
        <member name="M:BEditor.Data.Property.PrimitiveGroup.RotateMetadata.Create">
            <inheritdoc/>
        </member>
        <member name="T:BEditor.Data.Property.PrimitiveGroup.Scale">
            <summary>
            Represents a property that sets the scale.
            </summary>
        </member>
        <member name="F:BEditor.Data.Property.PrimitiveGroup.Scale.ScaleProperty">
            <summary>
            Defines the <see cref="P:BEditor.Data.Property.PrimitiveGroup.Scale.Scale1"/> property.
            </summary>
        </member>
        <member name="F:BEditor.Data.Property.PrimitiveGroup.Scale.ScaleXProperty">
            <summary>
            Defines the <see cref="P:BEditor.Data.Property.PrimitiveGroup.Scale.ScaleX"/> property.
            </summary>
        </member>
        <member name="F:BEditor.Data.Property.PrimitiveGroup.Scale.ScaleYProperty">
            <summary>
            Defines the <see cref="P:BEditor.Data.Property.PrimitiveGroup.Scale.ScaleY"/> property.
            </summary>
        </member>
        <member name="F:BEditor.Data.Property.PrimitiveGroup.Scale.ScaleZProperty">
            <summary>
            Defines the <see cref="P:BEditor.Data.Property.PrimitiveGroup.Scale.ScaleZ"/> property.
            </summary>
        </member>
        <member name="M:BEditor.Data.Property.PrimitiveGroup.Scale.#ctor(BEditor.Data.Property.PrimitiveGroup.ScaleMetadata)">
            <summary>
            Initializes a new instance of the <see cref="T:BEditor.Data.Property.PrimitiveGroup.Scale"/> class.
            </summary>
            <param name="metadata">Metadata of this property.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="metadata"/> is <see langword="null"/>.</exception>
        </member>
        <member name="P:BEditor.Data.Property.PrimitiveGroup.Scale.Scale1">
            <summary>
            Gets the EaseProperty representing the scale.
            </summary>
        </member>
        <member name="P:BEditor.Data.Property.PrimitiveGroup.Scale.ScaleX">
            <summary>
            Gets the scale in the Z-axis direction.
            </summary>
        </member>
        <member name="P:BEditor.Data.Property.PrimitiveGroup.Scale.ScaleY">
            <summary>
            Gets the scale in the Y-axis direction.
            </summary>
        </member>
        <member name="P:BEditor.Data.Property.PrimitiveGroup.Scale.ScaleZ">
            <summary>
            Gets the scale in the Z-axis direction.
            </summary>
        </member>
        <member name="M:BEditor.Data.Property.PrimitiveGroup.Scale.GetProperties">
            <inheritdoc/>
        </member>
        <member name="M:BEditor.Data.Property.PrimitiveGroup.Scale.ResetOptional">
            <summary>
            Reset the <see cref="P:BEditor.Data.Property.PrimitiveGroup.Scale.Scale1"/>, <see cref="P:BEditor.Data.Property.PrimitiveGroup.Scale.ScaleX"/>, <see cref="P:BEditor.Data.Property.PrimitiveGroup.Scale.ScaleY"/>, and <see cref="P:BEditor.Data.Property.PrimitiveGroup.Scale.ScaleZ"/> Optionals.
            </summary>
        </member>
        <member name="T:BEditor.Data.Property.PrimitiveGroup.ScaleMetadata">
            <summary>
            The metadata of <see cref="T:BEditor.Data.Property.PrimitiveGroup.Scale"/>.
            </summary>
            <param name="Name">The string displayed in the property header.</param>
        </member>
        <member name="M:BEditor.Data.Property.PrimitiveGroup.ScaleMetadata.#ctor(System.String)">
            <summary>
            The metadata of <see cref="T:BEditor.Data.Property.PrimitiveGroup.Scale"/>.
            </summary>
            <param name="Name">The string displayed in the property header.</param>
        </member>
        <member name="M:BEditor.Data.Property.PrimitiveGroup.ScaleMetadata.Create">
            <inheritdoc/>
        </member>
        <member name="T:BEditor.Data.Property.PropertyElement">
            <summary>
            Represents a property used by <see cref="T:BEditor.Data.EffectElement"/>.
            </summary>
        </member>
        <member name="P:BEditor.Data.Property.PropertyElement.Parent">
            <inheritdoc/>
        </member>
        <member name="P:BEditor.Data.Property.PropertyElement.PropertyMetadata">
            <summary>
            Gets or sets the metadata for this <see cref="T:BEditor.Data.Property.PropertyElement"/>.
            </summary>
        </member>
        <member name="P:BEditor.Data.Property.PropertyElement.Name">
            <inheritdoc/>
        </member>
        <member name="P:BEditor.Data.Property.PropertyElement.BEditor#Data#IHasMetadata#Metadata">
            <inheritdoc/>
        </member>
        <member name="M:BEditor.Data.Property.PropertyElement.SetObjectData(BEditor.Data.DeserializeContext)">
            <inheritdoc/>
        </member>
        <member name="T:BEditor.Data.Property.PropertyElement`1">
            <inheritdoc cref="T:BEditor.Data.Property.PropertyElement"/>
            <typeparam name="T">Type of <see cref="P:BEditor.Data.Property.PropertyElement`1.PropertyMetadata"/>.</typeparam>
        </member>
        <member name="P:BEditor.Data.Property.PropertyElement`1.PropertyMetadata">
            <inheritdoc cref="P:BEditor.Data.Property.PropertyElement.PropertyMetadata"/>
        </member>
        <member name="T:BEditor.Data.Property.SelectorProperty">
            <summary>
            Represents a property for selecting a single item from an array.
            </summary>
        </member>
        <member name="M:BEditor.Data.Property.SelectorProperty.#ctor(BEditor.Data.Property.SelectorPropertyMetadata)">
            <summary>
            Initializes a new instance of the <see cref="T:BEditor.Data.Property.SelectorProperty"/> class.
            </summary>
            <param name="metadata">Metadata of this property.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="metadata"/> is <see langword="null"/>.</exception>
        </member>
        <member name="P:BEditor.Data.Property.SelectorProperty.SelectItem">
            <summary>
            Gets or sets the selected item.
            </summary>
        </member>
        <member name="P:BEditor.Data.Property.SelectorProperty.Index">
            <summary>
            Gets or sets the index of the selected <see cref="P:BEditor.Data.Property.SelectorPropertyMetadata.ItemSource"/>.
            </summary>
        </member>
        <member name="P:BEditor.Data.Property.SelectorProperty.Value">
            <inheritdoc/>
        </member>
        <member name="P:BEditor.Data.Property.SelectorProperty.TargetID">
            <inheritdoc/>
        </member>
        <member name="M:BEditor.Data.Property.SelectorProperty.GetObjectData(System.Text.Json.Utf8JsonWriter)">
            <inheritdoc/>
        </member>
        <member name="M:BEditor.Data.Property.SelectorProperty.SetObjectData(BEditor.Data.DeserializeContext)">
            <inheritdoc/>
        </member>
        <member name="M:BEditor.Data.Property.SelectorProperty.ChangeSelect(System.Int32)">
            <summary>
            Create a command to change the selected item.
            </summary>
            <param name="index">New value for <see cref="P:BEditor.Data.Property.SelectorProperty.Index"/>.</param>
            <returns>Created <see cref="T:BEditor.Command.IRecordCommand"/>.</returns>
        </member>
        <member name="M:BEditor.Data.Property.SelectorProperty.Subscribe(System.IObserver{System.Int32})">
            <inheritdoc/>
        </member>
        <member name="M:BEditor.Data.Property.SelectorProperty.OnCompleted">
            <inheritdoc/>
        </member>
        <member name="M:BEditor.Data.Property.SelectorProperty.OnError(System.Exception)">
            <inheritdoc/>
        </member>
        <member name="M:BEditor.Data.Property.SelectorProperty.OnNext(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:BEditor.Data.Property.SelectorProperty.Bind(BEditor.Data.Bindings.IBindable{System.Int32})">
            <inheritdoc/>
        </member>
        <member name="M:BEditor.Data.Property.SelectorProperty.OnLoad">
            <inheritdoc/>
        </member>
        <member name="T:BEditor.Data.Property.SelectorProperty.ChangeSelectCommand">
            <summary>
            選択されているアイテムを変更するコマンド.
            </summary>
        </member>
        <member name="M:BEditor.Data.Property.SelectorProperty.ChangeSelectCommand.#ctor(BEditor.Data.Property.SelectorProperty,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:BEditor.Data.Property.SelectorProperty.ChangeSelectCommand"/> class.
            </summary>
            <param name="property">対象の <see cref="T:BEditor.Data.Property.SelectorProperty"/>.</param>
            <param name="select">新しいインデックス.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="property"/> が <see langword="null"/> です.</exception>
        </member>
        <member name="M:BEditor.Data.Property.SelectorProperty.ChangeSelectCommand.Do">
            <inheritdoc/>
        </member>
        <member name="M:BEditor.Data.Property.SelectorProperty.ChangeSelectCommand.Redo">
            <inheritdoc/>
        </member>
        <member name="M:BEditor.Data.Property.SelectorProperty.ChangeSelectCommand.Undo">
            <inheritdoc/>
        </member>
        <member name="T:BEditor.Data.Property.SelectorProperty`1">
            <summary>
            Represents a property for selecting a single item from an array.
            </summary>
            <typeparam name="T">The type of item.</typeparam>
        </member>
        <member name="M:BEditor.Data.Property.SelectorProperty`1.#ctor(BEditor.Data.Property.SelectorPropertyMetadata{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:BEditor.Data.Property.SelectorProperty`1"/> class.
            </summary>
            <param name="metadata">Metadata of this property.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="metadata"/> is <see langword="null"/>.</exception>
        </member>
        <member name="P:BEditor.Data.Property.SelectorProperty`1.SelectItem">
            <summary>
            Gets or sets the selected item.
            </summary>
        </member>
        <member name="P:BEditor.Data.Property.SelectorProperty`1.Index">
            <summary>
            Gets the index of the selected <see cref="P:BEditor.Data.Property.SelectorPropertyMetadata`1.ItemSource"/>.
            </summary>
        </member>
        <member name="P:BEditor.Data.Property.SelectorProperty`1.Value">
            <inheritdoc/>
        </member>
        <member name="P:BEditor.Data.Property.SelectorProperty`1.TargetID">
            <inheritdoc/>
        </member>
        <member name="M:BEditor.Data.Property.SelectorProperty`1.GetObjectData(System.Text.Json.Utf8JsonWriter)">
            <inheritdoc/>
        </member>
        <member name="M:BEditor.Data.Property.SelectorProperty`1.SetObjectData(BEditor.Data.DeserializeContext)">
            <inheritdoc/>
        </member>
        <member name="M:BEditor.Data.Property.SelectorProperty`1.ChangeSelect(System.Int32)">
            <summary>
            Create a command to change the selected item.
            </summary>
            <param name="index">New value for <see cref="P:BEditor.Data.Property.SelectorProperty`1.Index"/>.</param>
            <returns>Created <see cref="T:BEditor.Command.IRecordCommand"/>.</returns>
        </member>
        <member name="M:BEditor.Data.Property.SelectorProperty`1.ChangeSelect(`0)">
            <summary>
            Create a command to change the selected item.
            </summary>
            <param name="value">New value for <see cref="P:BEditor.Data.Property.SelectorProperty`1.SelectItem"/>.</param>
            <returns>Created <see cref="T:BEditor.Command.IRecordCommand"/>.</returns>
        </member>
        <member name="M:BEditor.Data.Property.SelectorProperty`1.Subscribe(System.IObserver{`0})">
            <inheritdoc/>
        </member>
        <member name="M:BEditor.Data.Property.SelectorProperty`1.OnCompleted">
            <inheritdoc/>
        </member>
        <member name="M:BEditor.Data.Property.SelectorProperty`1.OnError(System.Exception)">
            <inheritdoc/>
        </member>
        <member name="M:BEditor.Data.Property.SelectorProperty`1.OnNext(`0)">
            <inheritdoc/>
        </member>
        <member name="M:BEditor.Data.Property.SelectorProperty`1.Bind(BEditor.Data.Bindings.IBindable{`0})">
            <inheritdoc/>
        </member>
        <member name="M:BEditor.Data.Property.SelectorProperty`1.OnLoad">
            <inheritdoc/>
        </member>
        <member name="T:BEditor.Data.Property.SelectorProperty`1.ChangeSelectCommand">
            <summary>
            選択されているアイテムを変更するコマンド.
            </summary>
        </member>
        <member name="M:BEditor.Data.Property.SelectorProperty`1.ChangeSelectCommand.#ctor(BEditor.Data.Property.SelectorProperty{`0},`0)">
            <summary>
            Initializes a new instance of the <see cref="T:BEditor.Data.Property.SelectorProperty`1.ChangeSelectCommand"/> class.
            </summary>
            <param name="property">対象の <see cref="T:BEditor.Data.Property.SelectorProperty"/>.</param>
            <param name="select">新しいインデックス.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="property"/> が <see langword="null"/> です.</exception>
        </member>
        <member name="M:BEditor.Data.Property.SelectorProperty`1.ChangeSelectCommand.Do">
            <inheritdoc/>
        </member>
        <member name="M:BEditor.Data.Property.SelectorProperty`1.ChangeSelectCommand.Redo">
            <inheritdoc/>
        </member>
        <member name="M:BEditor.Data.Property.SelectorProperty`1.ChangeSelectCommand.Undo">
            <inheritdoc/>
        </member>
        <member name="T:BEditor.Data.Property.TextProperty">
            <summary>
            Represents a property of a string.
            </summary>
        </member>
        <member name="M:BEditor.Data.Property.TextProperty.#ctor(BEditor.Data.Property.TextPropertyMetadata)">
            <summary>
            Initializes a new instance of the <see cref="T:BEditor.Data.Property.TextProperty"/> class.
            </summary>
            <param name="metadata">Matadata of this property.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="metadata"/> is <see langword="null"/>.</exception>
        </member>
        <member name="P:BEditor.Data.Property.TextProperty.Value">
            <inheritdoc/>
        </member>
        <member name="P:BEditor.Data.Property.TextProperty.TargetID">
            <inheritdoc/>
        </member>
        <member name="M:BEditor.Data.Property.TextProperty.Bind(BEditor.Data.Bindings.IBindable{System.String})">
            <inheritdoc/>
        </member>
        <member name="M:BEditor.Data.Property.TextProperty.OnCompleted">
            <inheritdoc/>
        </member>
        <member name="M:BEditor.Data.Property.TextProperty.OnError(System.Exception)">
            <inheritdoc/>
        </member>
        <member name="M:BEditor.Data.Property.TextProperty.OnNext(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:BEditor.Data.Property.TextProperty.Subscribe(System.IObserver{System.String})">
            <inheritdoc/>
        </member>
        <member name="M:BEditor.Data.Property.TextProperty.GetObjectData(System.Text.Json.Utf8JsonWriter)">
            <inheritdoc/>
        </member>
        <member name="M:BEditor.Data.Property.TextProperty.SetObjectData(BEditor.Data.DeserializeContext)">
            <inheritdoc/>
        </member>
        <member name="M:BEditor.Data.Property.TextProperty.ChangeText(System.String)">
            <summary>
            Create a command to change the <see cref="P:BEditor.Data.Property.TextProperty.Value"/>.
            </summary>
            <param name="text">New value for <see cref="P:BEditor.Data.Property.TextProperty.Value"/>.</param>
            <returns>Created <see cref="T:BEditor.Command.IRecordCommand"/>.</returns>
        </member>
        <member name="M:BEditor.Data.Property.TextProperty.OnLoad">
            <inheritdoc/>
        </member>
        <member name="T:BEditor.Data.Property.ValueProperty">
            <summary>
            Represents a property of <see cref="T:System.Single"/> type.
            </summary>
        </member>
        <member name="M:BEditor.Data.Property.ValueProperty.#ctor(BEditor.Data.Property.ValuePropertyMetadata)">
            <summary>
            Initializes a new instance of the <see cref="T:BEditor.Data.Property.ValueProperty"/> class.
            </summary>
            <param name="metadata">Matadata of this property.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="metadata"/> is <see langword="null"/>.</exception>
        </member>
        <member name="P:BEditor.Data.Property.ValueProperty.Value">
            <inheritdoc/>
        </member>
        <member name="P:BEditor.Data.Property.ValueProperty.TargetID">
            <inheritdoc/>
        </member>
        <member name="M:BEditor.Data.Property.ValueProperty.Bind(BEditor.Data.Bindings.IBindable{System.Single})">
            <inheritdoc/>
        </member>
        <member name="M:BEditor.Data.Property.ValueProperty.OnCompleted">
            <inheritdoc/>
        </member>
        <member name="M:BEditor.Data.Property.ValueProperty.OnError(System.Exception)">
            <inheritdoc/>
        </member>
        <member name="M:BEditor.Data.Property.ValueProperty.OnNext(System.Single)">
            <inheritdoc/>
        </member>
        <member name="M:BEditor.Data.Property.ValueProperty.Subscribe(System.IObserver{System.Single})">
            <inheritdoc/>
        </member>
        <member name="M:BEditor.Data.Property.ValueProperty.GetObjectData(System.Text.Json.Utf8JsonWriter)">
            <inheritdoc/>
        </member>
        <member name="M:BEditor.Data.Property.ValueProperty.SetObjectData(BEditor.Data.DeserializeContext)">
            <inheritdoc/>
        </member>
        <member name="M:BEditor.Data.Property.ValueProperty.Clamp(System.Single)">
            <summary>
            Returns <paramref name="value"/> clamped to the inclusive range of <see cref="P:BEditor.Data.Property.ValuePropertyMetadata.Min"/> and <see cref="P:BEditor.Data.Property.ValuePropertyMetadata.Max"/>.
            </summary>
            <param name="value">The value to be clamped.</param>
            <returns>value if min ≤ value ≤ max. -or- min if value &lt; min. -or- max if max &lt; value.</returns>
        </member>
        <member name="M:BEditor.Data.Property.ValueProperty.ChangeValue(System.Single)">
            <summary>
            Create a command to change the <see cref="P:BEditor.Data.Property.ValueProperty.Value"/>.
            </summary>
            <param name="value">New value for <see cref="P:BEditor.Data.Property.ValueProperty.Value"/>.</param>
            <returns>Created <see cref="T:BEditor.Command.IRecordCommand"/>.</returns>
        </member>
        <member name="M:BEditor.Data.Property.ValueProperty.OnLoad">
            <inheritdoc/>
        </member>
        <member name="T:BEditor.Data.RenderingException">
            <summary>
            Represents errors that occur during rendering.
            </summary>
        </member>
        <member name="M:BEditor.Data.RenderingException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:BEditor.Data.RenderingException"/> class.
            </summary>
        </member>
        <member name="M:BEditor.Data.RenderingException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:BEditor.Data.RenderingException"/> class with a specified error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:BEditor.Data.RenderingException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:BEditor.Data.RenderingException"/> class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="inner">The exception that is the cause of the current exception, or a null reference(Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="M:BEditor.Data.RenderingException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:BEditor.Data.RenderingException"/> class with serialized data.
            </summary>
            <param name="info">The System.Runtime.Serialization.SerializationInfo that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The System.Runtime.Serialization.StreamingContext that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="info"/> is null.</exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult"/> is zero (0).</exception>
        </member>
        <member name="T:BEditor.Data.ResourceItem">
            <summary>
            Represents a resource used by the project.
            </summary>
        </member>
        <member name="M:BEditor.Data.ResourceItem.#ctor(System.String,System.Func{System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:BEditor.Data.ResourceItem"/> class.
            </summary>
            <param name="key">The key of the resource.</param>
            <param name="create">Create a value.</param>
        </member>
        <member name="P:BEditor.Data.ResourceItem.Key">
            <summary>
            Gets the key of this resource.
            </summary>
        </member>
        <member name="P:BEditor.Data.ResourceItem.Value">
            <summary>
            Gets the value.
            </summary>
        </member>
        <member name="M:BEditor.Data.ResourceItem.MakeReference(System.Object)">
            <summary>
            References this resource.
            </summary>
            <param name="obj">The object to reference.</param>
            <returns>Returns the <see cref="T:System.IDisposable"/> from which the reference will be removed.</returns>
        </member>
        <member name="M:BEditor.Data.ResourceItem.Build">
            <summary>
            Builds this resource.
            </summary>
        </member>
        <member name="T:BEditor.Data.SceneCache">
            <summary>
            Represents the scene cache.
            </summary>
        </member>
        <member name="M:BEditor.Data.SceneCache.#ctor(BEditor.Data.Scene)">
            <summary>
            Initializes a new instance of the <see cref="T:BEditor.Data.SceneCache"/> class.
            </summary>
            <param name="scene">The scene.</param>
        </member>
        <member name="E:BEditor.Data.SceneCache.Updated">
            <summary>
            Occurs when the cache is updated.
            </summary>
        </member>
        <member name="E:BEditor.Data.SceneCache.Building">
            <summary>
            Occurs when the cache is building.
            </summary>
        </member>
        <member name="P:BEditor.Data.SceneCache.Width">
            <summary>
            Gets the width of the cache.
            </summary>
        </member>
        <member name="P:BEditor.Data.SceneCache.Height">
            <summary>
            Gets the height of the cache.
            </summary>
        </member>
        <member name="P:BEditor.Data.SceneCache.Start">
            <summary>
            Gets the starting position of the cache.
            </summary>
        </member>
        <member name="P:BEditor.Data.SceneCache.Length">
            <summary>
            Gets the length of the cache.
            </summary>
        </member>
        <member name="P:BEditor.Data.SceneCache.LowColor">
            <summary>
            Gets a value indicating whether the color reproduction is reduced.
            </summary>
        </member>
        <member name="P:BEditor.Data.SceneCache.LowResolution">
            <summary>
            Gets a value indicating whether or not to lower the resolution.
            </summary>
        </member>
        <member name="M:BEditor.Data.SceneCache.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:BEditor.Data.SceneCache.Create(BEditor.Media.Frame,BEditor.Media.Frame,System.Boolean,System.Boolean)">
            <summary>
            Creates a cache for the specified range.
            </summary>
            <param name="start">The starting position of the cache.</param>
            <param name="length">The length of the cache.</param>
            <param name="lowColor">Whether the color reproduction is reduced.</param>
            <param name="lowResolution">Whether or not to lower the resolution.</param>
        </member>
        <member name="M:BEditor.Data.SceneCache.Clear">
            <summary>
            Clear the cache.
            </summary>
        </member>
        <member name="M:BEditor.Data.SceneCache.ReadImage(BEditor.Media.Frame)">
            <summary>
            Read the image from the cache.
            </summary>
            <param name="frame">The frame to read.</param>
            <returns>Returns the image that was read.</returns>
        </member>
        <member name="T:BEditor.Data.Scene">
            <summary>
            Represents a scene to be included in the <see cref="T:BEditor.Data.Project"/>.
            </summary>
            <summary>
            Represents a scene to be included in the <see cref="T:BEditor.Data.Project"/>.
            </summary>
            <summary>
            Represents a scene to be included in the <see cref="T:BEditor.Data.Project"/>.
            </summary>
        </member>
        <member name="M:BEditor.Data.Scene.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:BEditor.Data.Scene"/> class.
            </summary>
            <param name="width">The width of the frame buffer.</param>
            <param name="height">The height of the frame buffer.</param>
        </member>
        <member name="P:BEditor.Data.Scene.Item(System.String)">
            <summary>
            Gets the <see cref="T:BEditor.Data.ClipElement"/> from its <see cref="P:BEditor.Data.EditingObject.Name"/>.
            </summary>
            <param name="name">Value of <see cref="P:BEditor.Data.EditingObject.Name"/>.</param>
        </member>
        <member name="M:BEditor.Data.Scene.GetObjectData(System.Text.Json.Utf8JsonWriter)">
            <inheritdoc/>
        </member>
        <member name="M:BEditor.Data.Scene.SetObjectData(BEditor.Data.DeserializeContext)">
            <inheritdoc/>
        </member>
        <member name="M:BEditor.Data.Scene.Render(BEditor.Media.Frame,BEditor.Data.ApplyType)">
            <summary>
            Render this <see cref="T:BEditor.Data.Scene"/>.
            </summary>
            <param name="frame">The frame to render.</param>
            <param name="renderType">The type of rendering.</param>
            <returns>Returns the result of rendering.</returns>
            <exception cref="T:BEditor.Data.RenderingException">Faileds to rendering.</exception>
        </member>
        <member name="M:BEditor.Data.Scene.Render(BEditor.Data.ApplyType)">
            <summary>
            Render a frame of <see cref="P:BEditor.Data.Scene.PreviewFrame"/>.
            </summary>
            <param name="renderType">The type of rendering.</param>
            <returns>Returns the result of rendering.</returns>
            <exception cref="T:BEditor.Data.RenderingException">Faileds to rendering.</exception>
        </member>
        <member name="M:BEditor.Data.Scene.Render(BEditor.Drawing.Image{BEditor.Drawing.Pixel.BGRA32},BEditor.Media.Frame,BEditor.Data.ApplyType)">
            <summary>
            Render this <see cref="T:BEditor.Data.Scene"/>.
            </summary>
            <param name="image">The image to be drawn.</param>
            <param name="frame">The frame to render.</param>
            <param name="renderType">The type of rendering.</param>
            <exception cref="T:BEditor.Data.RenderingException">Faileds to rendering.</exception>
        </member>
        <member name="M:BEditor.Data.Scene.Render(BEditor.Drawing.Image{BEditor.Drawing.Pixel.BGRA32},BEditor.Data.ApplyType)">
            <summary>
            Render a frame of <see cref="P:BEditor.Data.Scene.PreviewFrame"/>.
            </summary>
            <param name="image">The image to be drawn.</param>
            <param name="renderType">The type of rendering.</param>
            <exception cref="T:BEditor.Data.RenderingException">Faileds to rendering.</exception>
        </member>
        <member name="M:BEditor.Data.Scene.Sample(BEditor.Media.Frame,BEditor.Data.ApplyType)">
            <summary>
            Samples this <see cref="T:BEditor.Data.Scene"/>.
            </summary>
            <param name="frame">The frame to sample.</param>
            <param name="applyType">The type of applying.</param>
            <returns>Returns the result of sampling.</returns>
        </member>
        <member name="M:BEditor.Data.Scene.Sample(BEditor.Data.ApplyType)">
            <summary>
            Sample a frame of <see cref="P:BEditor.Data.Scene.PreviewFrame"/>.
            </summary>
            <param name="applyType">The type of applying.</param>
            <returns>Returns the result of applying.</returns>
            <exception cref="T:BEditor.Data.RenderingException">Faileds to rendering.</exception>
        </member>
        <member name="M:BEditor.Data.Scene.GetFrame(BEditor.Media.Frame)">
            <summary>
            Get and sort the clips on the specified frame.
            </summary>
            <param name="frame">Target frame number.</param>
            <returns>Returns a clips that contains the specified frame.</returns>
        </member>
        <member name="M:BEditor.Data.Scene.GetLayer(System.Int32)">
            <summary>
            Get and sort the clips on the specified layer.
            </summary>
            <param name="layer">Target layer number.</param>
            <returns>Returns a clips that contains the specified layer.</returns>
        </member>
        <member name="M:BEditor.Data.Scene.Add(BEditor.Data.ClipElement)">
            <summary>
            Add a <see cref="T:BEditor.Data.ClipElement"/> to this <see cref="T:BEditor.Data.Scene"/>.
            </summary>
            <param name="clip">A <see cref="T:BEditor.Data.ClipElement"/> to add.</param>
        </member>
        <member name="M:BEditor.Data.Scene.Remove(BEditor.Data.ClipElement)">
            <summary>
            Remove certain a <see cref="T:BEditor.Data.ClipElement"/> from this <see cref="T:BEditor.Data.Scene"/>.
            </summary>
            <param name="clip"><see cref="T:BEditor.Data.ClipElement"/> to be removed.</param>
            <returns>
            <see langword="true"/> if item is successfully removed; otherwise, <see langword="false"/>. This method also returns
            <see langword="false"/> if item was not found in the original <see cref="T:System.Collections.ObjectModel.Collection`1"/>.
            </returns>
        </member>
        <member name="M:BEditor.Data.Scene.AddClip(BEditor.Data.ClipElement)">
            <summary>
            Create a command to add a <see cref="T:BEditor.Data.ClipElement"/> to this <see cref="T:BEditor.Data.Scene"/>.
            </summary>
            <param name="clip"><see cref="T:BEditor.Data.ClipElement"/> to be added.</param>
            <returns>Created <see cref="T:BEditor.Command.IRecordCommand"/>.</returns>
        </member>
        <member name="M:BEditor.Data.Scene.AddClip(BEditor.Media.Frame,System.Int32,BEditor.Data.ObjectMetadata,BEditor.Data.ClipElement@)">
            <summary>
            Create a command to add a <see cref="T:BEditor.Data.ClipElement"/> to this <see cref="T:BEditor.Data.Scene"/>.
            </summary>
            <param name="frame">Frame to add a clip.</param>
            <param name="layer">Layer to add a clip.</param>
            <param name="metadata">Clip metadata to be added.</param>
            <param name="generatedClip">Generated <see cref="T:BEditor.Data.ClipElement"/>.</param>
            <returns>Created <see cref="T:BEditor.Command.IRecordCommand"/>.</returns>
        </member>
        <member name="M:BEditor.Data.Scene.AddClip(BEditor.Media.Frame,System.Int32,BEditor.Data.ObjectElement,BEditor.Data.ClipElement@)">
            <summary>
            Create a command to add a <see cref="T:BEditor.Data.ClipElement"/> to this <see cref="T:BEditor.Data.Scene"/>.
            </summary>
            <param name="frame">Frame to add a clip.</param>
            <param name="layer">Layer to add a clip.</param>
            <param name="obj">Object to be added.</param>
            <param name="generatedClip">Generated <see cref="T:BEditor.Data.ClipElement"/>.</param>
            <returns>Created <see cref="T:BEditor.Command.IRecordCommand"/>.</returns>
        </member>
        <member name="M:BEditor.Data.Scene.RemoveClip(BEditor.Data.ClipElement)">
            <summary>
            Create a command to remove <see cref="T:BEditor.Data.ClipElement"/> from this <see cref="T:BEditor.Data.Scene"/>.
            </summary>
            <param name="clip"><see cref="T:BEditor.Data.ClipElement"/> to be removed.</param>
            <returns>Created <see cref="T:BEditor.Command.IRecordCommand"/>.</returns>
        </member>
        <member name="M:BEditor.Data.Scene.RemoveLayer(System.Int32)">
            <summary>
            Create a command to remove the specified layer from this <see cref="T:BEditor.Data.Scene"/>.
            </summary>
            <param name="layer">Layer number to be removed.</param>
            <returns>Created <see cref="T:BEditor.Command.IRecordCommand"/>.</returns>
        </member>
        <member name="M:BEditor.Data.Scene.OnLoad">
            <inheritdoc/>
        </member>
        <member name="M:BEditor.Data.Scene.OnUnload">
            <inheritdoc/>
        </member>
        <member name="P:BEditor.Data.Scene.Width">
            <summary>
            Gets the width of the frame buffer.
            </summary>
        </member>
        <member name="P:BEditor.Data.Scene.Height">
            <summary>
            Gets the height of the frame buffer.
            </summary>
        </member>
        <member name="P:BEditor.Data.Scene.SceneName">
            <summary>
            Gets or sets the name of this <see cref="T:BEditor.Data.Scene"/>.
            </summary>
        </member>
        <member name="P:BEditor.Data.Scene.TotalFrame">
            <summary>
            Gets or sets the total frame.
            </summary>
        </member>
        <member name="P:BEditor.Data.Scene.HideLayer">
            <summary>
            Gets the number of the hidden layer.
            </summary>
        </member>
        <member name="P:BEditor.Data.Scene.Datas">
            <summary>
            Gets the <see cref="T:BEditor.Data.ClipElement"/> contained in this <see cref="T:BEditor.Data.Scene"/>.
            </summary>
        </member>
        <member name="P:BEditor.Data.Scene.Cache">
            <summary>
            Gets the cache of this scene.
            </summary>
        </member>
        <member name="P:BEditor.Data.Scene.UseCache">
            <summary>
            Gets or sets a value indicating whether to use the cache or not.
            </summary>
        </member>
        <member name="P:BEditor.Data.Scene.SelectItem">
            <summary>
            Gets or sets the selected <see cref="T:BEditor.Data.ClipElement"/>.
            </summary>
        </member>
        <member name="P:BEditor.Data.Scene.GraphicsContext">
            <summary>
            Gets graphic context.
            </summary>
        </member>
        <member name="P:BEditor.Data.Scene.DrawingContext">
            <summary>
            Gets drawing context.
            </summary>
        </member>
        <member name="P:BEditor.Data.Scene.SamplingContext">
            <summary>
            Gets sampling context.
            </summary>
        </member>
        <member name="P:BEditor.Data.Scene.Player">
            <summary>
            Gets a player to play this <see cref="T:BEditor.Data.Scene"/>.
            </summary>
        </member>
        <member name="P:BEditor.Data.Scene.PreviewFrame">
            <summary>
            Gets or sets the frame number during preview.
            </summary>
        </member>
        <member name="P:BEditor.Data.Scene.TimeLineZoom">
            <summary>
            Gets or sets the scale of the timeline.
            </summary>
        </member>
        <member name="P:BEditor.Data.Scene.TimeLineScale">
            <summary>
            Gets or sets the scale of the timeline.
            </summary>
        </member>
        <member name="P:BEditor.Data.Scene.TimeLineHorizonOffset">
            <summary>
            Gets or sets the horizontal scrolling offset of the timeline.
            </summary>
        </member>
        <member name="P:BEditor.Data.Scene.TimeLineVerticalOffset">
            <summary>
            Gets or sets the vertical scrolling offset of the timeline.
            </summary>
        </member>
        <member name="P:BEditor.Data.Scene.Children">
            <inheritdoc/>
        </member>
        <member name="P:BEditor.Data.Scene.Parent">
            <inheritdoc/>
        </member>
        <member name="P:BEditor.Data.Scene.Settings">
            <summary>
            Gets or sets the settings for this scene.
            </summary>
        </member>
        <member name="T:BEditor.Data.SceneSettings">
            <summary>
            Represents a <see cref="T:BEditor.Data.Scene"/> setting.
            </summary>
        </member>
        <member name="M:BEditor.Data.SceneSettings.#ctor(System.Int32,System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:BEditor.Data.SceneSettings"/> class.
            </summary>
            <param name="width">The width of the frame buffer.</param>
            <param name="height">The height of the frame buffer.</param>
            <param name="name">The name of the <see cref="T:BEditor.Data.Scene"/>.</param>
        </member>
        <member name="P:BEditor.Data.SceneSettings.Width">
            <summary>
            Gets the width.
            </summary>
        </member>
        <member name="P:BEditor.Data.SceneSettings.Height">
            <summary>
            Gets the height.
            </summary>
        </member>
        <member name="P:BEditor.Data.SceneSettings.Name">
            <summary>
            Gets the name.
            </summary>
        </member>
        <member name="T:BEditor.IFileDialogService">
            <summary>
            Represents a service in a file dialog.
            </summary>
        </member>
        <member name="M:BEditor.IFileDialogService.ShowSaveFileDialogAsync(BEditor.SaveFileRecord)">
            <summary>
            Show the Save File dialog.
            </summary>
            <param name="record">A record that sets the name of the selected file.</param>
            <returns>Returns true if the save button is clicked, false otherwise.</returns>
        </member>
        <member name="M:BEditor.IFileDialogService.ShowOpenFileDialogAsync(BEditor.OpenFileRecord)">
            <summary>
            Show the Open File dialog.
            </summary>
            <param name="record">A record that sets the name of the selected file.</param>
            <returns>Returns true if the open button is clicked, false otherwise.</returns>
        </member>
        <member name="T:BEditor.SaveFileRecord">
            <summary>
            Represents the record to be used when showing the Save File dialog.
            </summary>
        </member>
        <member name="M:BEditor.SaveFileRecord.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:BEditor.SaveFileRecord"/> class.
            </summary>
            <param name="filename">The file name.</param>
        </member>
        <member name="P:BEditor.SaveFileRecord.DefaultFileName">
            <summary>
            Gets or sets the default file name.
            </summary>
        </member>
        <member name="P:BEditor.SaveFileRecord.FileName">
            <summary>
            Gets or sets the file name.
            </summary>
        </member>
        <member name="T:BEditor.OpenFileRecord">
            <summary>
            Represents the record to be used when showing the Open File dialog.
            </summary>
        </member>
        <member name="M:BEditor.OpenFileRecord.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:BEditor.OpenFileRecord"/> class.
            </summary>
        </member>
        <member name="P:BEditor.OpenFileRecord.DefaultFileName">
            <summary>
            Gets or sets the default file name.
            </summary>
        </member>
        <member name="P:BEditor.OpenFileRecord.FileName">
            <summary>
            Gets or sets the file name.
            </summary>
        </member>
        <member name="T:BEditor.FileFilter">
            <summary>
            Represents the filter of the file dialog.
            </summary>
        </member>
        <member name="M:BEditor.FileFilter.#ctor(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:BEditor.FileFilter"/> class.
            </summary>
            <param name="name">The filter name.</param>
            <param name="extensions">The filter extensions.</param>
        </member>
        <member name="M:BEditor.FileFilter.#ctor(System.String,System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:BEditor.FileFilter"/> class.
            </summary>
            <param name="name">The filter name.</param>
            <param name="extensions">The filter extensions.</param>
        </member>
        <member name="P:BEditor.FileFilter.Name">
            <summary>
            Gets the filter name.
            </summary>
        </member>
        <member name="P:BEditor.FileFilter.Extensions">
            <summary>
            Gets the filter extensions.
            </summary>
        </member>
        <member name="T:BEditor.FileDialogRecord">
            <summary>
            Represents the base class to be used when showing the File dialog.
            </summary>
        </member>
        <member name="M:BEditor.FileDialogRecord.#ctor(System.Collections.Generic.List{BEditor.FileFilter})">
            <summary>
            Initializes a new instance of the <see cref="T:BEditor.FileDialogRecord"/> class.
            </summary>
            <param name="filters">The filter for the file dialog.</param>
        </member>
        <member name="P:BEditor.FileDialogRecord.Filters">
            <summary>
            Gets the filter for the file dialog.
            </summary>
        </member>
        <member name="T:BEditor.IApplication">
            <summary>
            Represents an application.
            </summary>
        </member>
        <member name="E:BEditor.IApplication.ProjectOpened">
            <summary>
            Occurs when the project is opened.
            </summary>
        </member>
        <member name="E:BEditor.IApplication.Exit">
            <summary>
            Occurs when the application is exiting.
            </summary>
        </member>
        <member name="P:BEditor.IApplication.AppStatus">
            <summary>
            Gets or sets the status of an application.
            </summary>
        </member>
        <member name="P:BEditor.IApplication.AudioContext">
            <summary>
            Gets audio context.
            </summary>
        </member>
        <member name="P:BEditor.IApplication.DrawingContext">
            <summary>
            Gets drawing context.
            </summary>
        </member>
        <member name="P:BEditor.IApplication.DisplayedMenus">
            <summary>
            Gets the displayed menus.
            </summary>
        </member>
        <member name="M:BEditor.IApplication.RestoreAppConfig(BEditor.Data.Project,System.String)">
            <summary>
            Restore the application configuration.
            </summary>
            <param name="project">The project to restore the config.</param>
            <param name="directory">The directory of config.</param>
        </member>
        <member name="M:BEditor.IApplication.SaveAppConfig(BEditor.Data.Project,System.String)">
            <summary>
            Save the application configuration.
            </summary>
            <param name="project">The project to save the config.</param>
            <param name="directory">The directory of config.</param>
        </member>
        <member name="M:BEditor.IApplication.Navigate(System.Uri,System.Object)">
            <summary>
            Navigate to the location specified by Uri.
            </summary>
            <param name="uri">The uri.</param>
            <param name="parameter">The parameter.</param>
        </member>
        <member name="M:BEditor.IApplication.Navigate(System.String,System.Object)">
            <summary>
            Navigate to the location specified by Uri.
            </summary>
            <param name="uri">The uri.</param>
            <param name="parameter">The parameter.</param>
        </member>
        <member name="T:BEditor.IMessage">
            <summary>
            Represents a class that provides a service to notify users.
            </summary>
        </member>
        <member name="T:BEditor.IMessage.IconType">
            <summary>
            Represents the type of icon.
            </summary>
        </member>
        <member name="F:BEditor.IMessage.IconType.None">
            <summary>
            The none.
            </summary>
        </member>
        <member name="F:BEditor.IMessage.IconType.Info">
            <summary>
            The info.
            </summary>
        </member>
        <member name="F:BEditor.IMessage.IconType.Success">
            <summary>
            The success.
            </summary>
        </member>
        <member name="F:BEditor.IMessage.IconType.Warning">
            <summary>
            The warning.
            </summary>
        </member>
        <member name="F:BEditor.IMessage.IconType.Error">
            <summary>
            The error.
            </summary>
        </member>
        <member name="T:BEditor.IMessage.ButtonType">
            <summary>
            Represents a type of button.
            </summary>
        </member>
        <member name="F:BEditor.IMessage.ButtonType.Ok">
            <summary>
            Ok.
            </summary>
        </member>
        <member name="F:BEditor.IMessage.ButtonType.Yes">
            <summary>
            Yes.
            </summary>
        </member>
        <member name="F:BEditor.IMessage.ButtonType.No">
            <summary>
            No.
            </summary>
        </member>
        <member name="F:BEditor.IMessage.ButtonType.Cancel">
            <summary>
            Cancel.
            </summary>
        </member>
        <member name="F:BEditor.IMessage.ButtonType.Retry">
            <summary>
            Retry.
            </summary>
        </member>
        <member name="F:BEditor.IMessage.ButtonType.Close">
            <summary>
            Close.
            </summary>
        </member>
        <member name="M:BEditor.IMessage.DialogAsync(System.String,BEditor.IMessage.IconType,BEditor.IMessage.ButtonType[])">
            <summary>
            Show the dialog.
            </summary>
            <param name="text">The string to display.</param>
            <param name="icon">The icon to display.</param>
            <param name="types">The type of button to display.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:BEditor.IMessage.Snackbar(System.String)">
            <summary>
            Show the snackbar.
            </summary>
            <param name="text">The string to display.</param>
        </member>
        <member name="M:BEditor.IMessage.Snackbar(System.String,System.String,BEditor.IMessage.IconType,System.Action,System.Action{System.Object},System.String,System.Object)">
            <summary>
            Show the snackbar.
            </summary>
            <param name="text">The text.</param>
            <param name="title">The title.</param>
            <param name="icon">The icon.</param>
            <param name="close">The function invoked when the snack bar is closed.</param>
            <param name="action">The function invoked when the snack bar is clicked.</param>
            <param name="actionName">The name of <paramref name="action"/>.</param>
            <param name="parameter">The command parameter.</param>
        </member>
        <member name="T:BEditor.IProgressDialog">
            <summary>
            Represents a progress dialog.
            </summary>
        </member>
        <member name="P:BEditor.IProgressDialog.Maximum">
            <summary>
            Gets or sets the maximum value of the progress bar.
            </summary>
        </member>
        <member name="P:BEditor.IProgressDialog.Minimum">
            <summary>
            Gets or sets the minimum value of the progress bar.
            </summary>
        </member>
        <member name="P:BEditor.IProgressDialog.Value">
            <summary>
            Gets or sets the current value of the progress bar.
            </summary>
        </member>
        <member name="P:BEditor.IProgressDialog.Text">
            <summary>
            Gets or sets the string to be displayed in the dialog.
            </summary>
        </member>
        <member name="P:BEditor.IProgressDialog.IsIndeterminate">
            <summary>
            Gets or sets a value indicating whether the progress bar shows actual values or generic, continuous progress feedback.
            </summary>
        </member>
        <member name="T:BEditor.Plugin.CustomMenu">
            <inheritdoc cref="T:BEditor.Plugin.ICustomMenu"/>
        </member>
        <member name="M:BEditor.Plugin.CustomMenu.#ctor(System.String,System.Action)">
            <summary>
            Initializes a new instance of the <see cref="T:BEditor.Plugin.CustomMenu" /> class.
            </summary>
            <param name="name">The string to be displayed in the UI.</param>
            <param name="execute">Execute when the menu is clicked.</param>
        </member>
        <member name="P:BEditor.Plugin.CustomMenu.Name">
            <inheritdoc/>
        </member>
        <member name="P:BEditor.Plugin.CustomMenu.Execute">
            <summary>
            Execute when the menu is clicked.
            </summary>
        </member>
        <member name="M:BEditor.Plugin.CustomMenu.BEditor#Plugin#ICustomMenu#Execute">
            <inheritdoc/>
        </member>
        <member name="T:BEditor.Plugin.ICustomMenu">
            <summary>
            Represents a menu.
            </summary>
        </member>
        <member name="P:BEditor.Plugin.ICustomMenu.Name">
            <summary>
            Gets the string to be displayed in the UI.
            </summary>
        </member>
        <member name="M:BEditor.Plugin.ICustomMenu.Execute">
            <summary>
            Execute when the menu is clicked.
            </summary>
        </member>
        <member name="T:BEditor.Plugin.BaseMenu`1">
            <summary>
            Represents the custom file menu.
            </summary>
            <typeparam name="T">The type of argument.</typeparam>
        </member>
        <member name="F:BEditor.Plugin.BaseMenu`1.MainWindowProperty">
            <summary>
            Defines the <see cref="P:BEditor.Plugin.BaseMenu`1.MainWindow"/> property.
            </summary>
        </member>
        <member name="E:BEditor.Plugin.BaseMenu`1.Clicked">
            <summary>
            Occurs when the menu is clicked.
            </summary>
        </member>
        <member name="P:BEditor.Plugin.BaseMenu`1.MainWindow">
            <summary>
            Gets or sets the main window.
            </summary>
        </member>
        <member name="M:BEditor.Plugin.BaseMenu`1.Execute(`0)">
            <summary>
            Execute this menu.
            </summary>
            <param name="arg">The argument.</param>
        </member>
        <member name="M:BEditor.Plugin.BaseMenu`1.OnExecute(`0)">
            <summary>
            Execute this menu.
            </summary>
            <param name="arg">The argument.</param>
        </member>
        <member name="T:BEditor.Plugin.MenuLocation">
            <summary>
            Menu Location.
            </summary>
        </member>
        <member name="F:BEditor.Plugin.MenuLocation.Default">
            <summary>
            The default.
            </summary>
        </member>
        <member name="F:BEditor.Plugin.MenuLocation.Left">
            <summary>
            The menu will be placed on the left side.
            </summary>
        </member>
        <member name="F:BEditor.Plugin.MenuLocation.Right">
            <summary>
            The menu will be placed on the right side.
            </summary>
        </member>
        <member name="F:BEditor.Plugin.MenuLocation.Bottom">
            <summary>
            The menu will be placed below.
            </summary>
        </member>
        <member name="T:BEditor.Plugin.BasePluginMenu">
            <summary>
            Base class for the plugin menu.
            </summary>
        </member>
        <member name="F:BEditor.Plugin.BasePluginMenu.MenuLocationProperty">
            <summary>
            Defines the <see cref="P:BEditor.Plugin.BasePluginMenu.MenuLocation"/> property.
            </summary>
        </member>
        <member name="P:BEditor.Plugin.BasePluginMenu.MenuLocation">
            <summary>
            Gets or sets the menu location.
            </summary>
        </member>
        <member name="M:BEditor.Plugin.BasePluginMenu.Execute">
            <summary>
            Execute when the menu is clicked.
            </summary>
        </member>
        <member name="M:BEditor.Plugin.BasePluginMenu.OnExecute">
            <summary>
            Execute when the menu is clicked.
            </summary>
        </member>
        <member name="M:BEditor.Plugin.BasePluginMenu.OnExecute(System.Object)">
            <inheritdoc/>
        </member>
        <member name="T:BEditor.Plugin.FileMenu">
            <summary>
            Represents the custom file menu.
            </summary>
        </member>
        <member name="F:BEditor.Plugin.FileMenu.SupportedExtensionsProperty">
            <summary>
            Defines the <see cref="P:BEditor.Plugin.FileMenu.SupportedExtensions"/> property.
            </summary>
        </member>
        <member name="P:BEditor.Plugin.FileMenu.SupportedExtensions">
            <summary>
            Gets or sets the supported file extensions.
            </summary>
        </member>
        <member name="M:BEditor.Plugin.FileMenu.IsMatch(System.String)">
            <summary>
            Check if the file matches.
            </summary>
            <param name="file">The name of file.</param>
            <returns>true if the regular expression finds a match; otherwise, false.</returns>
        </member>
        <member name="T:BEditor.Plugin.PluginBuilder">
            <summary>
            Represents a class that initializes the services provided by the <see cref="T:BEditor.Plugin.PluginObject"/>.
            </summary>
        </member>
        <member name="P:BEditor.Plugin.PluginBuilder.Config">
            <summary>
            Gets or sets the plugin config.
            </summary>
        </member>
        <member name="M:BEditor.Plugin.PluginBuilder.Configure``1">
            <summary>
            Begin configuring an <see cref="T:BEditor.Plugin.PluginObject"/>.
            </summary>
            <typeparam name="T">Class that implements the <see cref="T:BEditor.Plugin.PluginObject"/> to be configure.</typeparam>
            <returns>The same instance of the <see cref="T:BEditor.Plugin.PluginBuilder"/> for chaining.</returns>
        </member>
        <member name="M:BEditor.Plugin.PluginBuilder.With(BEditor.Data.EffectMetadata)">
            <summary>
            Configure the options for the services to be provided.
            </summary>
            <param name="metadata">Metadata of the effects to be provided.</param>
            <returns>The same instance of the <see cref="T:BEditor.Plugin.PluginBuilder"/> for chaining.</returns>
        </member>
        <member name="M:BEditor.Plugin.PluginBuilder.With(BEditor.Data.ObjectMetadata)">
            <summary>
            Configure the options for the services to be provided.
            </summary>
            <param name="metadata">Metadata of the objects to be provided.</param>
            <returns>The same instance of the <see cref="T:BEditor.Plugin.PluginBuilder"/> for chaining.</returns>
        </member>
        <member name="M:BEditor.Plugin.PluginBuilder.With(BEditor.Data.Property.Easing.EasingMetadata)">
            <summary>
            Configure the options for the services to be provided.
            </summary>
            <param name="metadata">Metadata of the easings to be provided.</param>
            <returns>The same instance of the <see cref="T:BEditor.Plugin.PluginBuilder"/> for chaining.</returns>
        </member>
        <member name="M:BEditor.Plugin.PluginBuilder.With(BEditor.Media.IRegisterdDecoding)">
            <summary>
            Add an encoding.
            </summary>
            <param name="decoding">The decoding to be added.</param>
            <returns>The same instance of the <see cref="T:BEditor.Plugin.PluginBuilder"/> for chaining.</returns>
        </member>
        <member name="M:BEditor.Plugin.PluginBuilder.With(BEditor.Media.IRegisterdEncoding)">
            <summary>
            Add an encoding.
            </summary>
            <param name="encoding">The encoding to be added.</param>
            <returns>The same instance of the <see cref="T:BEditor.Plugin.PluginBuilder"/> for chaining.</returns>
        </member>
        <member name="M:BEditor.Plugin.PluginBuilder.Task(BEditor.PluginTask)">
            <summary>
            Add a task to be executed when the application is launched.
            </summary>
            <param name="task">The background task to run.</param>
            <returns>The same instance of the <see cref="T:BEditor.Plugin.PluginBuilder"/> for chaining.</returns>
        </member>
        <member name="M:BEditor.Plugin.PluginBuilder.Task(System.Func{BEditor.IProgressDialog,System.Threading.Tasks.ValueTask},System.String)">
            <summary>
            Add a task to be executed when the application is launched.
            </summary>
            <param name="func">The function to run.</param>
            <param name="name">The name of the <see cref="T:BEditor.PluginTask"/>.</param>
            <returns>The same instance of the <see cref="T:BEditor.Plugin.PluginBuilder"/> for chaining.</returns>
        </member>
        <member name="M:BEditor.Plugin.PluginBuilder.SetCustomMenu(System.String,System.Collections.Generic.IEnumerable{BEditor.Plugin.ICustomMenu})">
            <summary>
            Set the menu.
            </summary>
            <param name="header">The string to display in the menu header.</param>
            <param name="menus">Menu to be set.</param>
            <returns>The same instance of the <see cref="T:BEditor.Plugin.PluginBuilder"/> for chaining.</returns>
        </member>
        <member name="M:BEditor.Plugin.PluginBuilder.PluginMenu(System.String,BEditor.Plugin.BasePluginMenu[])">
            <summary>
            Add the menu.
            </summary>
            <param name="header">The string to display in the menu header.</param>
            <param name="menus">Menu to be set.</param>
            <returns>The same instance of the <see cref="T:BEditor.Plugin.PluginBuilder"/> for chaining.</returns>
        </member>
        <member name="M:BEditor.Plugin.PluginBuilder.FileMenu(BEditor.Plugin.FileMenu)">
            <summary>
            Add the file menu.
            </summary>
            <param name="menus">Menu to be set.</param>
            <returns>The same instance of the <see cref="T:BEditor.Plugin.PluginBuilder"/> for chaining.</returns>
        </member>
        <member name="M:BEditor.Plugin.PluginBuilder.ConfigureServices(System.Action{Microsoft.Extensions.DependencyInjection.IServiceCollection})">
            <summary>
            Register services into the <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/>.
            </summary>
            <param name="configureServices">A delegate for configuring the <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/>.</param>
            <returns>The same instance of the <see cref="T:BEditor.Plugin.PluginBuilder"/> for chaining.</returns>
        </member>
        <member name="M:BEditor.Plugin.PluginBuilder.Register(BEditor.Plugin.PluginManager)">
            <summary>
            Register this setting to the specified <see cref="T:BEditor.Plugin.PluginManager"/>.
            </summary>
            <param name="manager"><see cref="T:BEditor.Plugin.PluginManager"/> to register.</param>
        </member>
        <member name="M:BEditor.Plugin.PluginBuilder.Register">
            <summary>
            Register this setting to the <see cref="F:BEditor.Plugin.PluginManager.Default"/>.
            </summary>
        </member>
        <member name="T:BEditor.Plugin.PluginConfig">
            <summary>
            Represents a plugin config.
            </summary>
        </member>
        <member name="M:BEditor.Plugin.PluginConfig.#ctor(BEditor.IApplication)">
            <summary>
            Initializes a new instance of the <see cref="T:BEditor.Plugin.PluginConfig"/> class.
            </summary>
            <param name="app">The application.</param>
        </member>
        <member name="P:BEditor.Plugin.PluginConfig.Application">
            <summary>
            Gets the application.
            </summary>
        </member>
        <member name="T:BEditor.Plugin.PluginException">
            <summary>
            Represents an error that occurred while loading a plugin, etc.
            </summary>
        </member>
        <member name="M:BEditor.Plugin.PluginException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:BEditor.Plugin.PluginException"/> class.
            </summary>
        </member>
        <member name="M:BEditor.Plugin.PluginException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:BEditor.Plugin.PluginException"/> class with a specified error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:BEditor.Plugin.PluginException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:BEditor.Plugin.PluginException"/> class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="inner">The exception that is the cause of the current exception, or a null reference(Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="M:BEditor.Plugin.PluginException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:BEditor.Plugin.PluginException"/> class with serialized data.
            </summary>
            <param name="info">The System.Runtime.Serialization.SerializationInfo that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The System.Runtime.Serialization.StreamingContext that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="info"/> is null.</exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult"/> is zero (0).</exception>
        </member>
        <member name="P:BEditor.Plugin.PluginException.PluginName">
            <summary>
            Gets or sets the plugin name.
            </summary>
        </member>
        <member name="P:BEditor.Plugin.PluginException.Assembly">
            <summary>
            Gets or sets the plugin assembly.
            </summary>
        </member>
        <member name="T:BEditor.Plugin.PluginManager">
            <summary>
            Represents the class that manages the plugin.
            </summary>
        </member>
        <member name="F:BEditor.Plugin.PluginManager.Default">
            <summary>
            Gets a default <see cref="T:BEditor.Plugin.PluginManager"/> instance.
            </summary>
        </member>
        <member name="M:BEditor.Plugin.PluginManager.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:BEditor.Plugin.PluginManager"/> class.
            </summary>
        </member>
        <member name="P:BEditor.Plugin.PluginManager.Plugins">
            <summary>
            Gets the loaded plugins.
            </summary>
        </member>
        <member name="P:BEditor.Plugin.PluginManager.Failed">
            <summary>
            Gets the plugins that failed to load.
            </summary>
        </member>
        <member name="P:BEditor.Plugin.PluginManager.BaseDirectory">
            <summary>
            Gets the base directory from which to retrieve plugins.
            </summary>
        </member>
        <member name="P:BEditor.Plugin.PluginManager.FileMenus">
            <summary>
            Gets the file menus.
            </summary>
        </member>
        <member name="P:BEditor.Plugin.PluginManager.Menus">
            <summary>
            Gets the menus.
            </summary>
        </member>
        <member name="P:BEditor.Plugin.PluginManager.Tasks">
            <summary>
            Gets the tasks.
            </summary>
        </member>
        <member name="P:BEditor.Plugin.PluginManager.Loaded">
            <summary>
            Gets the loaded plugins.
            </summary>
        </member>
        <member name="M:BEditor.Plugin.PluginManager.GetNames">
            <summary>
            Gets all plugin names.
            </summary>
            <returns>All plugin names.</returns>
        </member>
        <member name="M:BEditor.Plugin.PluginManager.Load(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Load the assembly from the name of the plugin.
            </summary>
            <param name="pluginName">The name of the plugin to load.</param>
            <exception cref="T:System.AggregateException">Plugin failded to load.</exception>
        </member>
        <member name="M:BEditor.Plugin.PluginManager.Get``1">
            <summary>
            Gets the plugin of the specified type.
            </summary>
            <typeparam name="T">The type of plugin.</typeparam>
            <returns>Returns the plugin.</returns>
        </member>
        <member name="T:BEditor.Plugin.PluginObject">
            <summary>
            Represents a plug-in that extends the functionality of the application.
            </summary>
        </member>
        <member name="M:BEditor.Plugin.PluginObject.#ctor(BEditor.Plugin.PluginConfig)">
            <summary>
            Initializes a new instance of the <see cref="T:BEditor.Plugin.PluginObject"/> class.
            </summary>
            <param name="config">The plugin config.</param>
        </member>
        <member name="P:BEditor.Plugin.PluginObject.PluginName">
            <summary>
            Gets the name of the plugin.
            </summary>
        </member>
        <member name="P:BEditor.Plugin.PluginObject.Description">
            <summary>
            Gets the description of the plugin.
            </summary>
        </member>
        <member name="P:BEditor.Plugin.PluginObject.Id">
            <summary>
            Gets the id.
            </summary>
        </member>
        <member name="P:BEditor.Plugin.PluginObject.App">
            <summary>
            Gets the Application.
            </summary>
        </member>
        <member name="P:BEditor.Plugin.PluginObject.AssemblyName">
            <summary>
            Gets the name of the assembly for this plugin.
            </summary>
        </member>
        <member name="P:BEditor.Plugin.PluginObject.BaseDirectory">
            <summary>
            Gets the base directory.
            </summary>
        </member>
        <member name="P:BEditor.Plugin.PluginObject.Settings">
            <summary>
            Gets or sets the settings for this plugin.
            </summary>
        </member>
        <member name="T:BEditor.Plugin.SettingRecord">
             <summary>
             Represents the base class of the plugin settings.
             </summary>
             <example>
             public record CustomSetting(string value) : SettingRecord;
            
             public SettingRecord Settings { get; set; } = new CustomSetting("Sample text");.
             </example>
        </member>
        <member name="M:BEditor.Plugin.SettingRecord.#ctor">
             <summary>
             Represents the base class of the plugin settings.
             </summary>
             <example>
             public record CustomSetting(string value) : SettingRecord;
            
             public SettingRecord Settings { get; set; } = new CustomSetting("Sample text");.
             </example>
        </member>
        <member name="M:BEditor.Plugin.SettingRecord.Save(System.String)">
            <summary>
            Saves this configuration to the specified file.
            </summary>
            <param name="filename">The file to save.</param>
            <returns>Returns <see langword="true"/> if the save was successful, <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:BEditor.Plugin.SettingRecord.SaveAsync(System.String)">
            <summary>
            Saves this configuration to the specified file.
            </summary>
            <param name="filename">The file to save.</param>
            <returns>Returns <see langword="true"/> if the save was successful, <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:BEditor.Plugin.SettingRecord.LoadFrom``1(System.String)">
            <summary>
            Loads the settings from a file.
            </summary>
            <typeparam name="T">Type of the object to be loaded.</typeparam>
            <param name="filename">The name of the file to load.</param>
            <returns>Returns the restored object on success, <see langword="null"/> otherwise.</returns>
        </member>
        <member name="M:BEditor.Plugin.SettingRecord.LoadFromAsync``1(System.String)">
            <summary>
            Loads the settings from a file.
            </summary>
            <typeparam name="T">Type of the object to be loaded.</typeparam>
            <param name="filename">The name of the file to load.</param>
            <returns>Returns the restored object on success, <see langword="null"/> otherwise.</returns>
        </member>
        <member name="T:BEditor.PluginTask">
            <summary>
            Represents the task to be executed after the plugin is loaded.
            </summary>
        </member>
        <member name="M:BEditor.PluginTask.#ctor(System.Func{BEditor.IProgressDialog,System.Threading.Tasks.ValueTask},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:BEditor.PluginTask"/> struct.
            </summary>
            <param name="task">The function to run.</param>
            <param name="name">The name of the <see cref="T:BEditor.PluginTask"/>.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="task"/> or <paramref name="name"/> is <see langword="null"/>.</exception>
        </member>
        <member name="P:BEditor.PluginTask.Name">
            <summary>
            Gets the name of this <see cref="T:BEditor.PluginTask"/>.
            </summary>
        </member>
        <member name="P:BEditor.PluginTask.IsExecuted">
            <summary>
            Gets a value indicating whether the task has been executed.
            </summary>
        </member>
        <member name="M:BEditor.PluginTask.op_Equality(BEditor.PluginTask,BEditor.PluginTask)">
            <summary>
            Compares two <see cref="T:BEditor.PluginTask"/> structures. The result specifies whether the two <see cref="T:BEditor.PluginTask"/> structures are equal.
            </summary>
            <param name="left">A <see cref="T:BEditor.PluginTask"/> to compare.</param>
            <param name="right">A <see cref="T:BEditor.PluginTask"/> to compare.</param>
            <returns>true if the left and right <see cref="T:BEditor.PluginTask"/> structures are equal; otherwise, false.</returns>
        </member>
        <member name="M:BEditor.PluginTask.op_Inequality(BEditor.PluginTask,BEditor.PluginTask)">
            <summary>
            Determines whether the coordinates of the specified points are not equal.
            </summary>
            <param name="left">A <see cref="T:BEditor.PluginTask"/> to compare.</param>
            <param name="right">A <see cref="T:BEditor.PluginTask"/> to compare.</param>
            <returns>true if the left and right <see cref="T:BEditor.PluginTask"/> structures differ; otherwise, false.</returns>
        </member>
        <member name="M:BEditor.PluginTask.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:BEditor.PluginTask.Equals(BEditor.PluginTask)">
            <inheritdoc/>
        </member>
        <member name="M:BEditor.PluginTask.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:BEditor.PluginTask.RunTaskAsync(BEditor.IProgressDialog)">
            <summary>
            Run the task.
            </summary>
            <param name="progress">The progress of this <see cref="T:BEditor.PluginTask"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask"/> representing the result of the asynchronous operation.</returns>
        </member>
        <member name="T:BEditor.ProjectOpenedEventArgs">
            <summary>
            Provides data for the <see cref="E:BEditor.IApplication.ProjectOpened"/> event.
            </summary>
        </member>
        <member name="M:BEditor.ProjectOpenedEventArgs.#ctor(BEditor.Data.Project)">
            <summary>
            Initializes a new instance of the <see cref="T:BEditor.ProjectOpenedEventArgs"/> class.
            </summary>
            <param name="project">The opened project.</param>
        </member>
        <member name="P:BEditor.ProjectOpenedEventArgs.Project">
            <summary>
            Gets the <see cref="P:BEditor.ProjectOpenedEventArgs.Project"/>.
            </summary>
        </member>
        <member name="T:BEditor.Resources.Strings">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:BEditor.Resources.Strings.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:BEditor.Resources.Strings.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:BEditor.Resources.Strings.AddClip">
            <summary>
              Looks up a localized string similar to Add a new clip.
            </summary>
        </member>
        <member name="P:BEditor.Resources.Strings.AddEffect">
            <summary>
              Looks up a localized string similar to Add a new effect.
            </summary>
        </member>
        <member name="P:BEditor.Resources.Strings.Additive">
            <summary>
              Looks up a localized string similar to Additive.
            </summary>
        </member>
        <member name="P:BEditor.Resources.Strings.AddKeyframe">
            <summary>
              Looks up a localized string similar to Add a keyframe.
            </summary>
        </member>
        <member name="P:BEditor.Resources.Strings.AlphaBlend">
            <summary>
              Looks up a localized string similar to Alpha blend.
            </summary>
        </member>
        <member name="P:BEditor.Resources.Strings.Ambient">
            <summary>
              Looks up a localized string similar to Ambient.
            </summary>
        </member>
        <member name="P:BEditor.Resources.Strings.BindCommand">
            <summary>
              Looks up a localized string similar to Bind the value of the property.
            </summary>
        </member>
        <member name="P:BEditor.Resources.Strings.Blend">
            <summary>
              Looks up a localized string similar to Blend.
            </summary>
        </member>
        <member name="P:BEditor.Resources.Strings.CenterX">
            <summary>
              Looks up a localized string similar to Center x.
            </summary>
        </member>
        <member name="P:BEditor.Resources.Strings.CenterY">
            <summary>
              Looks up a localized string similar to Center y.
            </summary>
        </member>
        <member name="P:BEditor.Resources.Strings.CenterZ">
            <summary>
              Looks up a localized string similar to Center z.
            </summary>
        </member>
        <member name="P:BEditor.Resources.Strings.ChangeColor">
            <summary>
              Looks up a localized string similar to Change color.
            </summary>
        </member>
        <member name="P:BEditor.Resources.Strings.ChangeEasing">
            <summary>
              Looks up a localized string similar to Change easing.
            </summary>
        </member>
        <member name="P:BEditor.Resources.Strings.ChangeFile">
            <summary>
              Looks up a localized string similar to Change file.
            </summary>
        </member>
        <member name="P:BEditor.Resources.Strings.ChangeFolder">
            <summary>
              Looks up a localized string similar to Change folder.
            </summary>
        </member>
        <member name="P:BEditor.Resources.Strings.ChangeFont">
            <summary>
              Looks up a localized string similar to Change font.
            </summary>
        </member>
        <member name="P:BEditor.Resources.Strings.ChangeIsChecked">
            <summary>
              Looks up a localized string similar to Change the state of the checkbox.
            </summary>
        </member>
        <member name="P:BEditor.Resources.Strings.ChangeLength">
            <summary>
              Looks up a localized string similar to Change length.
            </summary>
        </member>
        <member name="P:BEditor.Resources.Strings.ChangeSelectItem">
            <summary>
              Looks up a localized string similar to Change selected item.
            </summary>
        </member>
        <member name="P:BEditor.Resources.Strings.ChangeText">
            <summary>
              Looks up a localized string similar to Change text.
            </summary>
        </member>
        <member name="P:BEditor.Resources.Strings.ChangeValue">
            <summary>
              Looks up a localized string similar to Change value.
            </summary>
        </member>
        <member name="P:BEditor.Resources.Strings.ChildElementsNotFound">
            <summary>
              Looks up a localized string similar to Child elements not found..
            </summary>
        </member>
        <member name="P:BEditor.Resources.Strings.Color">
            <summary>
              Looks up a localized string similar to Color.
            </summary>
        </member>
        <member name="P:BEditor.Resources.Strings.Coordinate">
            <summary>
              Looks up a localized string similar to Coordinate.
            </summary>
        </member>
        <member name="P:BEditor.Resources.Strings.Diffuse">
            <summary>
              Looks up a localized string similar to Diffuse.
            </summary>
        </member>
        <member name="P:BEditor.Resources.Strings.Disconnect">
            <summary>
              Looks up a localized string similar to Disconnect property value.
            </summary>
        </member>
        <member name="P:BEditor.Resources.Strings.DownEffect">
            <summary>
              Looks up a localized string similar to Change the order of the effects (below).
            </summary>
        </member>
        <member name="P:BEditor.Resources.Strings.EnableDisableEffect">
            <summary>
              Looks up a localized string similar to Enable/Disable effects.
            </summary>
        </member>
        <member name="P:BEditor.Resources.Strings.FailedToConvertValue">
            <summary>
              Looks up a localized string similar to Failed to convert value..
            </summary>
        </member>
        <member name="P:BEditor.Resources.Strings.FailedToLoad">
            <summary>
              Looks up a localized string similar to {0} failed to load..
            </summary>
        </member>
        <member name="P:BEditor.Resources.Strings.FailedToRemove">
            <summary>
              Looks up a localized string similar to Failed to remove..
            </summary>
        </member>
        <member name="P:BEditor.Resources.Strings.Font">
            <summary>
              Looks up a localized string similar to Font.
            </summary>
        </member>
        <member name="P:BEditor.Resources.Strings.KeyframeHasBeenMovedOutOfRange">
             <summary>
               Looks up a localized string similar to The keyframe has been moved out of range.
            {0} -&gt; {1}.
             </summary>
        </member>
        <member name="P:BEditor.Resources.Strings.KeyHasAlreadyBeenRegisterd">
            <summary>
              Looks up a localized string similar to This key has already been registered..
            </summary>
        </member>
        <member name="P:BEditor.Resources.Strings.Material">
            <summary>
              Looks up a localized string similar to Material.
            </summary>
        </member>
        <member name="P:BEditor.Resources.Strings.MessageBy">
            <summary>
              Looks up a localized string similar to Message by {0}.
            </summary>
        </member>
        <member name="P:BEditor.Resources.Strings.MoveClip">
            <summary>
              Looks up a localized string similar to Move clip.
            </summary>
        </member>
        <member name="P:BEditor.Resources.Strings.MoveKeyframe">
            <summary>
              Looks up a localized string similar to Move keyframe.
            </summary>
        </member>
        <member name="P:BEditor.Resources.Strings.Multiplication">
            <summary>
              Looks up a localized string similar to Multiplication.
            </summary>
        </member>
        <member name="P:BEditor.Resources.Strings.Opacity">
            <summary>
              Looks up a localized string similar to Opacity.
            </summary>
        </member>
        <member name="P:BEditor.Resources.Strings.ParentElementNotFound">
            <summary>
              Looks up a localized string similar to Parent element not found..
            </summary>
        </member>
        <member name="P:BEditor.Resources.Strings.Pitch">
            <summary>
              Looks up a localized string similar to Pitch.
            </summary>
        </member>
        <member name="P:BEditor.Resources.Strings.Primitive">
            <summary>
              Looks up a localized string similar to Primitive.
            </summary>
        </member>
        <member name="P:BEditor.Resources.Strings.ProjectFile">
            <summary>
              Looks up a localized string similar to Project file.
            </summary>
        </member>
        <member name="P:BEditor.Resources.Strings.RemoveClip">
            <summary>
              Looks up a localized string similar to Remove clip.
            </summary>
        </member>
        <member name="P:BEditor.Resources.Strings.RemoveEffect">
            <summary>
              Looks up a localized string similar to Remove effect.
            </summary>
        </member>
        <member name="P:BEditor.Resources.Strings.RemoveKeyframe">
            <summary>
              Looks up a localized string similar to Remove keyframe.
            </summary>
        </member>
        <member name="P:BEditor.Resources.Strings.RemoveLayer">
            <summary>
              Looks up a localized string similar to Remove layer.
            </summary>
        </member>
        <member name="P:BEditor.Resources.Strings.RemoveTarget">
            <summary>
              Looks up a localized string similar to Remove target.
            </summary>
        </member>
        <member name="P:BEditor.Resources.Strings.Rotate">
            <summary>
              Looks up a localized string similar to Rotate.
            </summary>
        </member>
        <member name="P:BEditor.Resources.Strings.RotateX">
            <summary>
              Looks up a localized string similar to Rotate x.
            </summary>
        </member>
        <member name="P:BEditor.Resources.Strings.RotateY">
            <summary>
              Looks up a localized string similar to Rotate y.
            </summary>
        </member>
        <member name="P:BEditor.Resources.Strings.RotateZ">
            <summary>
              Looks up a localized string similar to Rotate z.
            </summary>
        </member>
        <member name="P:BEditor.Resources.Strings.Scale">
            <summary>
              Looks up a localized string similar to Scale.
            </summary>
        </member>
        <member name="P:BEditor.Resources.Strings.Shininess">
            <summary>
              Looks up a localized string similar to Shininess.
            </summary>
        </member>
        <member name="P:BEditor.Resources.Strings.Specular">
            <summary>
              Looks up a localized string similar to Specular.
            </summary>
        </member>
        <member name="P:BEditor.Resources.Strings.SplitClip">
            <summary>
              Looks up a localized string similar to Split a clip.
            </summary>
        </member>
        <member name="P:BEditor.Resources.Strings.Start">
            <summary>
              Looks up a localized string similar to Start.
            </summary>
        </member>
        <member name="P:BEditor.Resources.Strings.Subtract">
            <summary>
              Looks up a localized string similar to Subtract.
            </summary>
        </member>
        <member name="P:BEditor.Resources.Strings.TheOwnerTypeDoesNotMatch">
            <summary>
              Looks up a localized string similar to The type of the owner of the property does not match the type of this object..
            </summary>
        </member>
        <member name="P:BEditor.Resources.Strings.TheValueWasNotTypeButType">
            <summary>
              Looks up a localized string similar to The value was not {0} type, but {1} type..
            </summary>
        </member>
        <member name="P:BEditor.Resources.Strings.Type">
            <summary>
              Looks up a localized string similar to Type.
            </summary>
        </member>
        <member name="P:BEditor.Resources.Strings.UnknownCommand">
            <summary>
              Looks up a localized string similar to Unknown command.
            </summary>
        </member>
        <member name="P:BEditor.Resources.Strings.UpdatePosition">
            <summary>
              Looks up a localized string similar to Update the position.
            </summary>
        </member>
        <member name="P:BEditor.Resources.Strings.UpEffect">
            <summary>
              Looks up a localized string similar to Change the order of the effects (top).
            </summary>
        </member>
        <member name="P:BEditor.Resources.Strings.Volume">
            <summary>
              Looks up a localized string similar to Volume.
            </summary>
        </member>
        <member name="P:BEditor.Resources.Strings.X">
            <summary>
              Looks up a localized string similar to X.
            </summary>
        </member>
        <member name="P:BEditor.Resources.Strings.Y">
            <summary>
              Looks up a localized string similar to Y.
            </summary>
        </member>
        <member name="P:BEditor.Resources.Strings.Z">
            <summary>
              Looks up a localized string similar to Z.
            </summary>
        </member>
        <member name="T:BEditor.Serialize">
            <summary>
            Represents a class that uses the <see cref="N:System.Text.Json"/> to provide methods for serialization, cloning, etc.
            </summary>
        </member>
        <member name="M:BEditor.Serialize.LoadFromStreamAsync``1(System.IO.Stream)">
            <summary>
            Reads and restores the contents of an object from a stream.
            </summary>
            <typeparam name="T">Type of the object to be loaded.</typeparam>
            <param name="stream">Stream to load.</param>
            <returns>Returns the restored object on success, <see langword="null"/> otherwise.</returns>
        </member>
        <member name="M:BEditor.Serialize.LoadFromStream``1(System.IO.Stream)">
            <summary>
            Reads and restores the contents of an object from a stream.
            </summary>
            <typeparam name="T">Type of the object to be loaded.</typeparam>
            <param name="stream">Stream to load.</param>
            <returns>Returns the restored object on success, <see langword="null"/> otherwise.</returns>
        </member>
        <member name="M:BEditor.Serialize.LoadFromFileAsync``1(System.String)">
            <summary>
            Reads and restores the contents of an object from a file.
            </summary>
            <typeparam name="T">Type of the object to be loaded.</typeparam>
            <param name="path">The name of the file to load.</param>
            <returns>Returns the restored object on success, <see langword="null"/> otherwise.</returns>
        </member>
        <member name="M:BEditor.Serialize.LoadFromFile``1(System.String)">
            <summary>
            Reads and restores the contents of an object from a file.
            </summary>
            <typeparam name="T">Type of the object to be loaded.</typeparam>
            <param name="path">The name of the file to load.</param>
            <returns>Returns the restored object on success, <see langword="null"/> otherwise.</returns>
        </member>
        <member name="M:BEditor.Serialize.SaveToStreamAsync``1(``0,System.IO.Stream)">
            <summary>
            Save the contents of an object to a stream.
            </summary>
            <typeparam name="T">Type of the object to be saved.</typeparam>
            <param name="obj">The object to save.</param>
            <param name="stream">The stream to save to.</param>
            <returns>Returns <see langword="true"/> if the save was successful, <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:BEditor.Serialize.SaveToStream``1(``0,System.IO.Stream)">
            <summary>
            Save the contents of an object to a stream.
            </summary>
            <typeparam name="T">Type of the object to be saved.</typeparam>
            <param name="obj">The object to save.</param>
            <param name="stream">The stream to save to.</param>
            <returns>Returns <see langword="true"/> if the save was successful, <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:BEditor.Serialize.SaveToFileAsync``1(``0,System.String)">
            <summary>
            Saves the contents of an object to a file.
            </summary>
            <typeparam name="T">Type of the object to be saved.</typeparam>
            <param name="obj">The object to save.</param>
            <param name="path">The name of the file to save to.</param>
            <returns>Returns <see langword="true"/> if the save was successful, <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:BEditor.Serialize.SaveToFile``1(``0,System.String)">
            <summary>
            Saves the contents of an object to a file.
            </summary>
            <typeparam name="T">Type of the object to be saved.</typeparam>
            <param name="obj">The object to save.</param>
            <param name="path">The name of the file to save to.</param>
            <returns>Returns <see langword="true"/> if the save was successful, <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:BEditor.Serialize.DeepCloneAsync``1(``0)">
            <summary>
            DeepClone using <see cref="N:System.Text.Json"/>.
            </summary>
            <typeparam name="T">Type of the object to be clone.</typeparam>
            <param name="obj">The object to clone.</param>
            <returns>Returns the cloned object if it can be replicated, or <see langword="null"/> if it fails.</returns>
        </member>
        <member name="M:BEditor.Serialize.DeepClone``1(``0)">
            <summary>
            DeepClone using <see cref="N:System.Text.Json"/>.
            </summary>
            <typeparam name="T">Type of the object to be clone.</typeparam>
            <param name="obj">The object to clone.</param>
            <returns>Returns the cloned object if it can be replicated, or <see langword="null"/> if it fails.</returns>
        </member>
        <member name="T:BEditor.Status">
            <summary>
            Represents the status of the application.
            </summary>
        </member>
        <member name="F:BEditor.Status.Idle">
            <summary>
            Represents the state of doing nothing.
            </summary>
        </member>
        <member name="F:BEditor.Status.Edit">
            <summary>
            Represents the state of editing.
            </summary>
        </member>
        <member name="F:BEditor.Status.Saved">
            <summary>
            Represents that the file has just been saved.
            </summary>
        </member>
        <member name="F:BEditor.Status.Playing">
            <summary>
            Represents that the media player is playing.
            </summary>
        </member>
        <member name="F:BEditor.Status.Output">
            <summary>
            Represents that the output is in progress.
            </summary>
        </member>
    </members>
</doc>
