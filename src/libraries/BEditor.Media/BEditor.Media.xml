<?xml version="1.0"?>
<doc>
    <assembly>
        <name>BEditor.Media</name>
    </assembly>
    <members>
        <member name="T:BEditor.Media.ContainerMetadata">
            <summary>
            Represents multimedia file metadata info.
            </summary>
        </member>
        <member name="M:BEditor.Media.ContainerMetadata.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:BEditor.Media.ContainerMetadata"/> class.
            </summary>
        </member>
        <member name="P:BEditor.Media.ContainerMetadata.Title">
            <summary>
            Gets or sets the multimedia title.
            </summary>
        </member>
        <member name="P:BEditor.Media.ContainerMetadata.Author">
            <summary>
            Gets or sets the multimedia author info.
            </summary>
        </member>
        <member name="P:BEditor.Media.ContainerMetadata.Album">
            <summary>
            Gets or sets the multimedia album name.
            </summary>
        </member>
        <member name="P:BEditor.Media.ContainerMetadata.Year">
            <summary>
            Gets or sets multimedia release date/year.
            </summary>
        </member>
        <member name="P:BEditor.Media.ContainerMetadata.Genre">
            <summary>
            Gets or sets the multimedia genre.
            </summary>
        </member>
        <member name="P:BEditor.Media.ContainerMetadata.Description">
            <summary>
            Gets or sets the multimedia description.
            </summary>
        </member>
        <member name="P:BEditor.Media.ContainerMetadata.Language">
            <summary>
            Gets or sets the multimedia language.
            </summary>
        </member>
        <member name="P:BEditor.Media.ContainerMetadata.Copyright">
            <summary>
            Gets or sets the multimedia copyright info.
            </summary>
        </member>
        <member name="P:BEditor.Media.ContainerMetadata.Rating">
            <summary>
            Gets or sets the multimedia rating.
            </summary>
        </member>
        <member name="P:BEditor.Media.ContainerMetadata.TrackNumber">
            <summary>
            Gets or sets the multimedia track number string.
            </summary>
        </member>
        <member name="T:BEditor.Media.DecoderNotFoundException">
            <summary>
            The exception that is thrown when the decoder is not found.
            </summary>
        </member>
        <member name="M:BEditor.Media.DecoderNotFoundException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:BEditor.Media.DecoderNotFoundException"/> class.
            </summary>
        </member>
        <member name="M:BEditor.Media.DecoderNotFoundException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:BEditor.Media.DecoderNotFoundException"/> class with a specified error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:BEditor.Media.DecoderNotFoundException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:BEditor.Media.DecoderNotFoundException"/> class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="inner">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="M:BEditor.Media.DecoderNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:BEditor.Media.DecoderNotFoundException"/> class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:BEditor.Media.Decoding.AudioStreamInfo">
            <summary>
            Represents informations about the audio stream.
            </summary>
        </member>
        <member name="M:BEditor.Media.Decoding.AudioStreamInfo.#ctor(System.String,BEditor.Media.MediaType,System.TimeSpan,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:BEditor.Media.Decoding.AudioStreamInfo"/> class.
            </summary>
            <param name="codecName">The codec name of the stream.</param>
            <param name="type">The media type of the stream.</param>
            <param name="duration">The duration of the stream.</param>
            <param name="samplerate">The number of samples per second of the audio stream.</param>
            <param name="numchannels">The number of audio channels stored in the stream.</param>
        </member>
        <member name="M:BEditor.Media.Decoding.AudioStreamInfo.#ctor(System.String,BEditor.Media.MediaType,System.TimeSpan,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:BEditor.Media.Decoding.AudioStreamInfo"/> class.
            </summary>
            <param name="codecName">The codec name of the stream.</param>
            <param name="type">The media type of the stream.</param>
            <param name="duration">The duration of the stream.</param>
            <param name="samplerate">The number of samples per second of the audio stream.</param>
            <param name="numchannels">The number of audio channels stored in the stream.</param>
            <param name="numsamples">The number of audio samples stored in the stream.</param>
        </member>
        <member name="P:BEditor.Media.Decoding.AudioStreamInfo.SampleRate">
            <summary>
            Gets the number of samples per second of the audio stream.
            </summary>
        </member>
        <member name="P:BEditor.Media.Decoding.AudioStreamInfo.NumChannels">
            <summary>
            Gets the number of audio channels stored in the stream.
            </summary>
        </member>
        <member name="P:BEditor.Media.Decoding.AudioStreamInfo.NumSamples">
            <summary>
            Gets the number of audio samples stored in the stream.
            </summary>
        </member>
        <member name="T:BEditor.Media.Decoding.IAudioStream">
            <summary>
            Represents an audio stream in the <see cref="T:BEditor.Media.Decoding.MediaFile"/>.
            </summary>
        </member>
        <member name="P:BEditor.Media.Decoding.IAudioStream.Info">
            <summary>
            Gets informations about this stream.
            </summary>
        </member>
        <member name="P:BEditor.Media.Decoding.IAudioStream.BEditor#Media#Decoding#IMediaStream#Info">
            <inheritdoc/>
        </member>
        <member name="M:BEditor.Media.Decoding.IAudioStream.GetNextFrame">
            <summary>
            Reads the next frame from the audio stream.
            </summary>
            <returns>The decoded audio data.</returns>
        </member>
        <member name="M:BEditor.Media.Decoding.IAudioStream.TryGetNextFrame(BEditor.Media.Sound{BEditor.Media.PCM.StereoPCMFloat}@)">
            <summary>
            Reads the next frame from the audio stream.
            A <see langword="false"/> return value indicates that reached end of stream.
            The method throws exception if another error has occurred.
            </summary>
            <param name="sound">The decoded audio data.</param>
            <returns><see langword="false"/> if reached end of the stream.</returns>
        </member>
        <member name="M:BEditor.Media.Decoding.IAudioStream.GetFrame(System.TimeSpan)">
            <summary>
            Reads the video frame found at the specified timestamp.
            </summary>
            <param name="time">The frame timestamp.</param>
            <returns>The decoded audio frame.</returns>
        </member>
        <member name="M:BEditor.Media.Decoding.IAudioStream.GetFrame(System.TimeSpan,System.Int32)">
            <summary>
            Reads the video frame found at the specified timestamp.
            </summary>
            <param name="time">The frame timestamp.</param>
            <param name="samples">The audio duration.</param>
            <returns>The decoded audio frame.</returns>
        </member>
        <member name="M:BEditor.Media.Decoding.IAudioStream.GetFrame(System.TimeSpan,System.TimeSpan)">
            <summary>
            Reads the video frame found at the specified timestamp.
            </summary>
            <param name="time">The frame timestamp.</param>
            <param name="duration">The audio duration.</param>
            <returns>The decoded audio frame.</returns>
        </member>
        <member name="M:BEditor.Media.Decoding.IAudioStream.TryGetFrame(System.TimeSpan,BEditor.Media.Sound{BEditor.Media.PCM.StereoPCMFloat}@)">
            <summary>
            Reads the audio data found at the specified timestamp.
            A <see langword="false"/> return value indicates that reached end of stream.
            The method throws exception if another error has occurred.
            </summary>
            <param name="time">The frame timestamp.</param>
            <param name="sound">The decoded audio data.</param>
            <returns><see langword="false"/> if reached end of the stream.</returns>
        </member>
        <member name="T:BEditor.Media.Decoding.IInputContainer">
            <summary>
            Represents the multimedia file container.
            </summary>
        </member>
        <member name="P:BEditor.Media.Decoding.IInputContainer.Video">
            <summary>
            Gets the video streams.
            </summary>
        </member>
        <member name="P:BEditor.Media.Decoding.IInputContainer.Audio">
            <summary>
            Gets the audio streams.
            </summary>
        </member>
        <member name="P:BEditor.Media.Decoding.IInputContainer.Info">
            <summary>
            Gets informations about the media container.
            </summary>
        </member>
        <member name="T:BEditor.Media.Decoding.IMediaStream">
            <summary>
            A base for streams of any kind of media.
            </summary>
        </member>
        <member name="P:BEditor.Media.Decoding.IMediaStream.Info">
            <summary>
            Gets informations about this stream.
            </summary>
        </member>
        <member name="T:BEditor.Media.Decoding.IVideoStream">
            <summary>
            Represents a video stream in the <see cref="T:BEditor.Media.Decoding.MediaFile"/>.
            </summary>
        </member>
        <member name="P:BEditor.Media.Decoding.IVideoStream.Info">
            <summary>
            Gets informations about this stream.
            </summary>
        </member>
        <member name="P:BEditor.Media.Decoding.IVideoStream.BEditor#Media#Decoding#IMediaStream#Info">
            <inheritdoc/>
        </member>
        <member name="M:BEditor.Media.Decoding.IVideoStream.GetNextFrame">
            <summary>
            Reads the next frame from the video stream.
            </summary>
            <returns>A decoded bitmap.</returns>
        </member>
        <member name="M:BEditor.Media.Decoding.IVideoStream.TryGetNextFrame(BEditor.Drawing.Image{BEditor.Drawing.Pixel.BGRA32}@)">
            <summary>
            Reads the next frame from the video stream.
            A <see langword="false"/> return value indicates that reached end of stream.
            The method throws exception if another error has occurred.
            </summary>
            <param name="image">The decoded video frame.</param>
            <returns><see langword="false"/> if reached end of the stream.</returns>
        </member>
        <member name="M:BEditor.Media.Decoding.IVideoStream.GetFrame(System.TimeSpan)">
            <summary>
            Reads the video frame found at the specified timestamp.
            </summary>
            <param name="time">The frame timestamp.</param>
            <returns>The decoded video frame.</returns>
        </member>
        <member name="M:BEditor.Media.Decoding.IVideoStream.TryGetFrame(System.TimeSpan,BEditor.Drawing.Image{BEditor.Drawing.Pixel.BGRA32}@)">
            <summary>
            Reads the video frame found at the specified timestamp.
            A <see langword="false"/> return value indicates that reached end of stream.
            The method throws exception if another error has occurred.
            </summary>
            <param name="time">The frame timestamp.</param>
            <param name="image">The decoded video frame.</param>
            <returns><see langword="false"/> if reached end of the stream.</returns>
        </member>
        <member name="T:BEditor.Media.Decoding.MediaFile">
            <summary>
            Represents a multimedia file.
            </summary>
        </member>
        <member name="M:BEditor.Media.Decoding.MediaFile.#ctor(BEditor.Media.Decoding.IInputContainer)">
            <summary>
            Initializes a new instance of the <see cref="T:BEditor.Media.Decoding.MediaFile"/> class.
            </summary>
            <param name="container">The input container.</param>
        </member>
        <member name="P:BEditor.Media.Decoding.MediaFile.VideoStreams">
            <summary>
            Gets all the video streams in the media file.
            </summary>
        </member>
        <member name="P:BEditor.Media.Decoding.MediaFile.Video">
            <summary>
            Gets the first video stream in the media file.
            </summary>
        </member>
        <member name="P:BEditor.Media.Decoding.MediaFile.HasVideo">
            <summary>
            Gets a value indicating whether the file contains video streams.
            </summary>
        </member>
        <member name="P:BEditor.Media.Decoding.MediaFile.AudioStreams">
            <summary>
            Gets all the audio streams in the media file.
            </summary>
        </member>
        <member name="P:BEditor.Media.Decoding.MediaFile.Audio">
            <summary>
            Gets the first audio stream in the media file.
            </summary>
        </member>
        <member name="P:BEditor.Media.Decoding.MediaFile.HasAudio">
            <summary>
            Gets a value indicating whether the file contains video streams.
            </summary>
        </member>
        <member name="P:BEditor.Media.Decoding.MediaFile.Info">
            <summary>
            Gets informations about the media container.
            </summary>
        </member>
        <member name="M:BEditor.Media.Decoding.MediaFile.Open(System.String)">
            <summary>
            Opens a media file from the specified path with default settings.
            </summary>
            <param name="path">A path to the media file.</param>
            <returns>The opened <see cref="T:BEditor.Media.Decoding.MediaFile"/>.</returns>
        </member>
        <member name="M:BEditor.Media.Decoding.MediaFile.Open(System.String,BEditor.Media.Decoding.MediaOptions)">
            <summary>
            Opens a media file from the specified path.
            </summary>
            <param name="path">A path to the media file.</param>
            <param name="options">The decoder settings.</param>
            <returns>The opened <see cref="T:BEditor.Media.Decoding.MediaFile"/>.</returns>
        </member>
        <member name="M:BEditor.Media.Decoding.MediaFile.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:BEditor.Media.Decoding.MediaInfo">
            <summary>
            Contains informations about the media container.
            </summary>
        </member>
        <member name="M:BEditor.Media.Decoding.MediaInfo.#ctor(System.String,System.String,System.Int64,System.TimeSpan,System.TimeSpan,BEditor.Media.ContainerMetadata)">
            <summary>
            Initializes a new instance of the <see cref="T:BEditor.Media.Decoding.MediaInfo"/> class.
            </summary>
            <param name="filepath">The file path used to open the container.</param>
            <param name="format">The container format name.</param>
            <param name="bitrate">The container bitrate in bytes per second (B/s) units. 0 if unknown.</param>
            <param name="duration">The duration of the media container.</param>
            <param name="starttime">The start time of the media container.</param>
            <param name="metadata">The container file metadata. Streams may contain additional metadata.</param>
        </member>
        <member name="P:BEditor.Media.Decoding.MediaInfo.FilePath">
            <summary>
            Gets the file path used to open the container.
            </summary>
        </member>
        <member name="P:BEditor.Media.Decoding.MediaInfo.FileInfo">
            <summary>
            Gets a <see cref="T:System.IO.FileInfo"/> object for the media file.
            It contains file size, directory, last access, creation and write timestamps.
            Returns <see langword="null"/> if not available, for example when <see cref="T:System.IO.Stream"/> was used to open the <see cref="T:BEditor.Media.Decoding.MediaFile"/>.
            </summary>
        </member>
        <member name="P:BEditor.Media.Decoding.MediaInfo.ContainerFormat">
            <summary>
            Gets the container format name.
            </summary>
        </member>
        <member name="P:BEditor.Media.Decoding.MediaInfo.Bitrate">
            <summary>
            Gets the container bitrate in bytes per second (B/s) units. 0 if unknown.
            </summary>
        </member>
        <member name="P:BEditor.Media.Decoding.MediaInfo.Duration">
            <summary>
            Gets the duration of the media container.
            </summary>
        </member>
        <member name="P:BEditor.Media.Decoding.MediaInfo.StartTime">
            <summary>
            Gets the start time of the media container.
            </summary>
        </member>
        <member name="P:BEditor.Media.Decoding.MediaInfo.Metadata">
            <summary>
            Gets the container file metadata. Streams may contain additional metadata.
            </summary>
        </member>
        <member name="T:BEditor.Media.Decoding.MediaMode">
            <summary>
            Represents the audio/video streams loading modes.
            </summary>
        </member>
        <member name="F:BEditor.Media.Decoding.MediaMode.Video">
            <summary>
            Enables loading only video streams.
            </summary>
        </member>
        <member name="F:BEditor.Media.Decoding.MediaMode.Audio">
            <summary>
            Enables loading only audio streams.
            </summary>
        </member>
        <member name="F:BEditor.Media.Decoding.MediaMode.AudioVideo">
            <summary>
            Enables loading both audio and video streams if they exist.
            </summary>
        </member>
        <member name="T:BEditor.Media.Decoding.MediaOptions">
            <summary>
            Represents the multimedia file container options.
            </summary>
        </member>
        <member name="M:BEditor.Media.Decoding.MediaOptions.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:BEditor.Media.Decoding.MediaOptions"/> class.
            </summary>
        </member>
        <member name="P:BEditor.Media.Decoding.MediaOptions.StreamsToLoad">
            <summary>
            Gets or sets which streams (audio/video) will be loaded.
            </summary>
        </member>
        <member name="P:BEditor.Media.Decoding.MediaOptions.SampleRate">
            <summary>
            Gets or sets the sample rate.
            </summary>
        </member>
        <member name="T:BEditor.Media.Decoding.StreamInfo">
            <summary>
            Represents generic informations about the stream, specialized by subclasses for specific
            kinds of streams.
            </summary>
        </member>
        <member name="M:BEditor.Media.Decoding.StreamInfo.#ctor(System.String,BEditor.Media.MediaType,System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:BEditor.Media.Decoding.StreamInfo"/> class.
            </summary>
            <param name="codecName">The codec name of the stream.</param>
            <param name="type">The media type of the stream.</param>
            <param name="duration">The duration of the stream.</param>
        </member>
        <member name="P:BEditor.Media.Decoding.StreamInfo.CodecName">
            <summary>
            Gets the codec name.
            </summary>
        </member>
        <member name="P:BEditor.Media.Decoding.StreamInfo.Type">
            <summary>
            Gets the stream's type.
            </summary>
        </member>
        <member name="P:BEditor.Media.Decoding.StreamInfo.Duration">
            <summary>
            Gets the stream duration.
            </summary>
        </member>
        <member name="T:BEditor.Media.Decoding.VideoStreamInfo">
            <summary>
            Represents informations about the video stream.
            </summary>
        </member>
        <member name="M:BEditor.Media.Decoding.VideoStreamInfo.#ctor(System.String,BEditor.Media.MediaType,System.TimeSpan,BEditor.Drawing.Size,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:BEditor.Media.Decoding.VideoStreamInfo"/> class.
            </summary>
            <param name="codecName">The codec name of the stream.</param>
            <param name="type">The media type of the stream.</param>
            <param name="duration">The duration of the stream.</param>
            <param name="framesize">The video frame dimensions.</param>
            <param name="framenum">The number of frames.</param>
            <param name="framerate">The frame rate.</param>
        </member>
        <member name="M:BEditor.Media.Decoding.VideoStreamInfo.#ctor(System.String,BEditor.Media.MediaType,System.TimeSpan,BEditor.Drawing.Size,System.Int32,BEditor.Media.Rational)">
            <summary>
            Initializes a new instance of the <see cref="T:BEditor.Media.Decoding.VideoStreamInfo"/> class.
            </summary>
            <param name="codecName">The codec name of the stream.</param>
            <param name="type">The media type of the stream.</param>
            <param name="duration">The duration of the stream.</param>
            <param name="framesize">The video frame dimensions.</param>
            <param name="framenum">The number of frames.</param>
            <param name="framerate">The frame rate.</param>
        </member>
        <member name="P:BEditor.Media.Decoding.VideoStreamInfo.FrameRate">
            <summary>
            Gets the frame rate.
            </summary>
        </member>
        <member name="P:BEditor.Media.Decoding.VideoStreamInfo.AvgFrameRate">
            <summary>
            Gets the average frame rate.
            </summary>
        </member>
        <member name="P:BEditor.Media.Decoding.VideoStreamInfo.RealFrameRate">
            <summary>
            Gets the frame rate.
            </summary>
        </member>
        <member name="P:BEditor.Media.Decoding.VideoStreamInfo.NumberOfFrames">
            <summary>
            Gets the number of frames value taken from the container metadata or estimated in constant frame rate videos. Returns null if not available.
            </summary>
        </member>
        <member name="P:BEditor.Media.Decoding.VideoStreamInfo.FrameSize">
            <summary>
            Gets the video frame dimensions.
            </summary>
        </member>
        <member name="T:BEditor.Media.DecodingRegistory">
            <summary>
            Register and record supported decoding.
            </summary>
        </member>
        <member name="M:BEditor.Media.DecodingRegistory.EnumerateDecodings">
            <summary>
            Enumerate the registered decodings.
            </summary>
            <returns>Returns the registered decodings.</returns>
        </member>
        <member name="M:BEditor.Media.DecodingRegistory.Open(System.String,BEditor.Media.Decoding.MediaOptions)">
            <summary>
            Open the media file by specifying the file name and options.
            </summary>
            <param name="file">The media file to be opened.</param>
            <param name="options">The option used to open the media file.</param>
            <returns>Returns the input container opened by this method.</returns>
        </member>
        <member name="M:BEditor.Media.DecodingRegistory.GuessDecodings(System.String)">
            <summary>
            Guess decoding from file name.
            </summary>
            <param name="file">The file name to guess.</param>
            <returns>Returns the guessed decodings.</returns>
        </member>
        <member name="M:BEditor.Media.DecodingRegistory.Register(BEditor.Media.IRegisterdDecoding)">
            <summary>
            Register the decoding.
            </summary>
            <param name="decoding">The decoding to register.</param>
        </member>
        <member name="T:BEditor.Media.Encoding.AudioEncoderSettings">
            <summary>
            Represents an audio encoder configuration.
            </summary>
        </member>
        <member name="M:BEditor.Media.Encoding.AudioEncoderSettings.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:BEditor.Media.Encoding.AudioEncoderSettings"/> class with default video settings values.
            </summary>
            <param name="sampleRate">The sample rate of the stream.</param>
            <param name="channels">The number of channels in the stream.</param>
        </member>
        <member name="P:BEditor.Media.Encoding.AudioEncoderSettings.Bitrate">
            <summary>
            Gets or sets the audio stream bitrate (bytes per second). The default value is 128,000 B/s.
            </summary>
        </member>
        <member name="P:BEditor.Media.Encoding.AudioEncoderSettings.SampleRate">
            <summary>
            Gets or sets the audio stream sample rate (samples per second). The default value is 44,100 samples/sec.
            </summary>
        </member>
        <member name="P:BEditor.Media.Encoding.AudioEncoderSettings.Channels">
            <summary>
            Gets or sets the number of channels in the audio stream. The default value is 2.
            </summary>
        </member>
        <member name="P:BEditor.Media.Encoding.AudioEncoderSettings.CodecOptions">
            <summary>
            Gets or sets the dictionary with custom codec options.
            </summary>
        </member>
        <member name="T:BEditor.Media.Encoding.IAudioOutputStream">
            <summary>
            Represents an audio encoder stream.
            </summary>
        </member>
        <member name="P:BEditor.Media.Encoding.IAudioOutputStream.Configuration">
            <summary>
            Gets the video encoding configuration used to create this stream.
            </summary>
        </member>
        <member name="P:BEditor.Media.Encoding.IAudioOutputStream.CurrentDuration">
            <summary>
            Gets the current duration of this stream.
            </summary>
        </member>
        <member name="M:BEditor.Media.Encoding.IAudioOutputStream.AddFrame(BEditor.Media.Sound{BEditor.Media.PCM.StereoPCMFloat})">
            <summary>
            Writes the specified audio data to the stream as the next frame.
            </summary>
            <param name="sound">The audio data to write.</param>
        </member>
        <member name="T:BEditor.Media.Encoding.IOutputContainer">
            <summary>
            Represents the multimedia file container used for encoding.
            </summary>
        </member>
        <member name="P:BEditor.Media.Encoding.IOutputContainer.Video">
            <summary>
            Gets the video streams.
            </summary>
        </member>
        <member name="P:BEditor.Media.Encoding.IOutputContainer.Audio">
            <summary>
            Gets the audio streams.
            </summary>
        </member>
        <member name="M:BEditor.Media.Encoding.IOutputContainer.SetMetadata(BEditor.Media.ContainerMetadata)">
            <summary>
            Applies a set of metadata fields to the output file.
            </summary>
            <param name="metadata">The metadata object to set.</param>
        </member>
        <member name="M:BEditor.Media.Encoding.IOutputContainer.AddVideoStream(BEditor.Media.Encoding.VideoEncoderSettings)">
            <summary>
            Adds a new video stream to the container. Usable only in encoding, before locking file.
            </summary>
            <param name="config">The stream configuration.</param>
        </member>
        <member name="M:BEditor.Media.Encoding.IOutputContainer.AddAudioStream(BEditor.Media.Encoding.AudioEncoderSettings)">
            <summary>
            Adds a new audio stream to the container. Usable only in encoding, before locking file.
            </summary>
            <param name="config">The stream configuration.</param>
        </member>
        <member name="M:BEditor.Media.Encoding.IOutputContainer.Create">
            <summary>
            Creates a multimedia file.
            </summary>
            <returns>A new <see cref="T:BEditor.Media.Encoding.MediaOutput"/>.</returns>
        </member>
        <member name="T:BEditor.Media.Encoding.IVideoOutputStream">
            <summary>
            Represents a video encoder stream.
            </summary>
        </member>
        <member name="P:BEditor.Media.Encoding.IVideoOutputStream.Configuration">
            <summary>
            Gets the video encoding configuration used to create this stream.
            </summary>
        </member>
        <member name="P:BEditor.Media.Encoding.IVideoOutputStream.CurrentDuration">
            <summary>
            Gets the current duration of this stream.
            </summary>
        </member>
        <member name="M:BEditor.Media.Encoding.IVideoOutputStream.AddFrame(BEditor.Drawing.Image{BEditor.Drawing.Pixel.BGRA32})">
            <summary>
            Writes the specified bitmap to the video stream as the next frame.
            </summary>
            <param name="image">The image to write.</param>
        </member>
        <member name="T:BEditor.Media.Encoding.MediaBuilder">
            <summary>
            Represents a multimedia file creator.
            </summary>
        </member>
        <member name="M:BEditor.Media.Encoding.MediaBuilder.CreateContainer(System.String)">
            <summary>
            Sets up a multimedia container with the format guessed from the file extension.
            </summary>
            <param name="path">A path to create the output file.</param>
            <exception cref="T:System.NotSupportedException">Not supported format.</exception>
            <returns>The <see cref="T:BEditor.Media.Encoding.MediaBuilder"/> instance.</returns>
        </member>
        <member name="M:BEditor.Media.Encoding.MediaBuilder.CreateContainer(System.String,BEditor.Media.IRegisterdEncoding)">
            <summary>
            Sets the multimedia container from an instance of <see cref="T:BEditor.Media.IRegisterdEncoding"/>.
            </summary>
            <param name="path">A path to create the output file.</param>
            <param name="encoding">The encoding.</param>
            <exception cref="T:System.NotSupportedException">Not supported format.</exception>
            <returns>The <see cref="T:BEditor.Media.Encoding.MediaBuilder"/> instance.</returns>
        </member>
        <member name="M:BEditor.Media.Encoding.MediaBuilder.UseMetadata(BEditor.Media.ContainerMetadata)">
            <summary>
            Applies a set of metadata fields to the output file.
            </summary>
            <param name="metadata">The metadata object to set.</param>
            <returns>The <see cref="T:BEditor.Media.Encoding.MediaBuilder"/> instance.</returns>
        </member>
        <member name="M:BEditor.Media.Encoding.MediaBuilder.WithVideo(System.Action{BEditor.Media.Encoding.VideoEncoderSettings})">
            <summary>
            Adds a new video stream to the file.
            </summary>
            <param name="settings">The video stream settings.</param>
            <returns>This <see cref="T:BEditor.Media.Encoding.MediaBuilder"/> object.</returns>
        </member>
        <member name="M:BEditor.Media.Encoding.MediaBuilder.WithAudio(System.Action{BEditor.Media.Encoding.AudioEncoderSettings})">
            <summary>
            Adds a new audio stream to the file.
            </summary>
            <param name="settings">The video stream settings.</param>
            <returns>This <see cref="T:BEditor.Media.Encoding.MediaBuilder"/> object.</returns>
        </member>
        <member name="M:BEditor.Media.Encoding.MediaBuilder.WithVideo">
            <summary>
            Adds a new video stream to the file.
            </summary>
            <returns>This <see cref="T:BEditor.Media.Encoding.MediaBuilder"/> object.</returns>
        </member>
        <member name="M:BEditor.Media.Encoding.MediaBuilder.WithAudio">
            <summary>
            Adds a new audio stream to the file.
            </summary>
            <returns>This <see cref="T:BEditor.Media.Encoding.MediaBuilder"/> object.</returns>
        </member>
        <member name="M:BEditor.Media.Encoding.MediaBuilder.Create">
            <summary>
            Creates a multimedia file.
            </summary>
            <returns>A new <see cref="T:BEditor.Media.Encoding.MediaOutput"/>.</returns>
        </member>
        <member name="T:BEditor.Media.Encoding.MediaOutput">
            <summary>
            Represents a multimedia output file.
            </summary>
        </member>
        <member name="M:BEditor.Media.Encoding.MediaOutput.#ctor(BEditor.Media.Encoding.IOutputContainer)">
            <summary>
            Initializes a new instance of the <see cref="T:BEditor.Media.Encoding.MediaOutput"/> class.
            </summary>
            <param name="container">The <see cref="T:BEditor.Media.Encoding.IOutputContainer"/> object.</param>
        </member>
        <member name="M:BEditor.Media.Encoding.MediaOutput.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:BEditor.Media.Encoding.MediaOutput"/> class.
            </summary>
        </member>
        <member name="P:BEditor.Media.Encoding.MediaOutput.VideoStreams">
            <summary>
            Gets the video streams in the media file.
            </summary>
        </member>
        <member name="P:BEditor.Media.Encoding.MediaOutput.AudioStreams">
            <summary>
            Gets the audio streams in the media file.
            </summary>
        </member>
        <member name="P:BEditor.Media.Encoding.MediaOutput.Video">
            <summary>
            Gets the first video stream in the media file.
            </summary>
        </member>
        <member name="P:BEditor.Media.Encoding.MediaOutput.Audio">
            <summary>
            Gets the first audio stream in the media file.
            </summary>
        </member>
        <member name="M:BEditor.Media.Encoding.MediaOutput.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:BEditor.Media.Encoding.VideoEncoderSettings">
            <summary>
            Represents a video encoder configuration.
            </summary>
        </member>
        <member name="M:BEditor.Media.Encoding.VideoEncoderSettings.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:BEditor.Media.Encoding.VideoEncoderSettings"/> class with default video settings values.
            </summary>
            <param name="width">The video frame width.</param>
            <param name="height">The video frame height.</param>
            <param name="framerate">The video frames per seconds (fps) value.</param>
        </member>
        <member name="P:BEditor.Media.Encoding.VideoEncoderSettings.Bitrate">
            <summary>
            Gets or sets the video stream bitrate (bytes per second). The default value is 5,000,000 B/s.
            If CRF (for H.264/H.265) is set, this value will be ignored.
            </summary>
        </member>
        <member name="P:BEditor.Media.Encoding.VideoEncoderSettings.KeyframeRate">
            <summary>
            Gets or sets the GoP value. The default value is 12.
            </summary>
        </member>
        <member name="P:BEditor.Media.Encoding.VideoEncoderSettings.VideoWidth">
            <summary>
            Gets or sets the video frame width.
            </summary>
        </member>
        <member name="P:BEditor.Media.Encoding.VideoEncoderSettings.VideoHeight">
            <summary>
            Gets or sets the video frame height.
            </summary>
        </member>
        <member name="P:BEditor.Media.Encoding.VideoEncoderSettings.Framerate">
            <summary>
            Gets or sets video frame rate (FPS) value. The default value is 30 frames/s.
            </summary>
        </member>
        <member name="P:BEditor.Media.Encoding.VideoEncoderSettings.FramerateRational">
            <summary>
            Gets or sets video frame rate (FPS) value. The default value is 30 frames/s.
            </summary>
        </member>
        <member name="P:BEditor.Media.Encoding.VideoEncoderSettings.CodecOptions">
            <summary>
            Gets or sets the dictionary with custom codec options.
            </summary>
        </member>
        <member name="T:BEditor.Media.EncodingRegistory">
            <summary>
            Register and record supported encoding.
            </summary>
        </member>
        <member name="M:BEditor.Media.EncodingRegistory.EnumerateEncodings">
            <summary>
            Enumerate the registered encoding.
            </summary>
            <returns>Returns the registered encodings.</returns>
        </member>
        <member name="M:BEditor.Media.EncodingRegistory.Create(System.String)">
            <summary>
            Create a container from the name of the file to be output.
            </summary>
            <param name="file">The file name to output.</param>
            <returns>Returns the output container created by this method.</returns>
        </member>
        <member name="M:BEditor.Media.EncodingRegistory.Create(System.String,BEditor.Media.Encoding.IOutputContainer@,BEditor.Media.IRegisterdEncoding@)">
            <summary>
            Create a container from the name of the file to be output.
            </summary>
            <param name="file">The file name to output.</param>
            <param name="container">Returns the output container created by this method.</param>
            <param name="encoding">The encoding.</param>
        </member>
        <member name="M:BEditor.Media.EncodingRegistory.GuessEncodings(System.String)">
            <summary>
            Guess encoding from file name.
            </summary>
            <param name="file">The file name to guess.</param>
            <returns>Returns the guessed encodings.</returns>
        </member>
        <member name="M:BEditor.Media.EncodingRegistory.Register(BEditor.Media.IRegisterdEncoding)">
            <summary>
            Register the encoding.
            </summary>
            <param name="encoding">The encoding to register.</param>
        </member>
        <member name="T:BEditor.Media.Frame">
            <summary>
            Represents the frame number.
            </summary>
        </member>
        <member name="F:BEditor.Media.Frame.MaxValue">
            <summary>
            Represents the largest possible value of an <see cref="T:BEditor.Media.Frame"/>.
            </summary>
        </member>
        <member name="F:BEditor.Media.Frame.MinValue">
            <summary>
            Represents the smallest possible value of <see cref="T:BEditor.Media.Frame"/>.
            </summary>
        </member>
        <member name="F:BEditor.Media.Frame.Zero">
            <summary>
            Represents the value of 0 in <see cref="T:BEditor.Media.Frame"/>.
            </summary>
        </member>
        <member name="M:BEditor.Media.Frame.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:BEditor.Media.Frame"/> struct.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="P:BEditor.Media.Frame.Value">
            <summary>
            Gets the number of the frame.
            </summary>
        </member>
        <member name="M:BEditor.Media.Frame.op_Implicit(BEditor.Media.Frame)~System.Int32">
            <summary>
            Converts the <see cref="T:BEditor.Media.Frame"/> to a 32-bit signed integer.
            </summary>
            <param name="frame">A frame.</param>
        </member>
        <member name="M:BEditor.Media.Frame.op_Implicit(System.Int32)~BEditor.Media.Frame">
            <summary>
            Converts the 32-bit signed integer to a <see cref="T:BEditor.Media.Frame"/>.
            </summary>
            <param name="value">A 32-bit signed integer.</param>
        </member>
        <member name="M:BEditor.Media.Frame.op_Equality(BEditor.Media.Frame,BEditor.Media.Frame)">
            <summary>
            Indicates whether two <see cref="T:BEditor.Media.Frame"/> instances are equal.
            </summary>
            <param name="left">The first time interval to compare.</param>
            <param name="right">The second time interval to compare.</param>
            <returns>true if the values of <paramref name="left"/> and <paramref name="right"/> are equal; otherwise, false.</returns>
        </member>
        <member name="M:BEditor.Media.Frame.op_Inequality(BEditor.Media.Frame,BEditor.Media.Frame)">
            <summary>
            Indicates whether two <see cref="T:BEditor.Media.Frame"/> instances are not equal.
            </summary>
            <param name="left">The first time interval to compare.</param>
            <param name="right">The second time interval to compare.</param>
            <returns>true if the values of <paramref name="left"/> and <paramref name="right"/> are not equal; otherwise, false.</returns>
        </member>
        <member name="M:BEditor.Media.Frame.op_LessThan(BEditor.Media.Frame,BEditor.Media.Frame)">
            <summary>
            Indicates whether a specified <see cref="T:BEditor.Media.Frame"/> is less than another specified <see cref="T:BEditor.Media.Frame"/>.
            </summary>
            <param name="left">The first time interval to compare.</param>
            <param name="right">The second time interval to compare.</param>
            <returns>true if the value of <paramref name="left"/> is less than the value of <paramref name="right"/>; otherwise, false.</returns>
        </member>
        <member name="M:BEditor.Media.Frame.op_GreaterThan(BEditor.Media.Frame,BEditor.Media.Frame)">
            <summary>
            Indicates whether a specified <see cref="T:BEditor.Media.Frame"/> is greater than another specified <see cref="T:BEditor.Media.Frame"/>.
            </summary>
            <param name="left">The first time interval to compare.</param>
            <param name="right">The second time interval to compare.</param>
            <returns>true if the value of <paramref name="left"/> is greater than the value of <paramref name="right"/>; otherwise, false.</returns>
        </member>
        <member name="M:BEditor.Media.Frame.op_LessThanOrEqual(BEditor.Media.Frame,BEditor.Media.Frame)">
            <summary>
            Indicates whether a specified <see cref="T:BEditor.Media.Frame"/> is less than or equal another specified <see cref="T:BEditor.Media.Frame"/>.
            </summary>
            <param name="left">The first time interval to compare.</param>
            <param name="right">The second time interval to compare.</param>
            <returns>true if the value of <paramref name="left"/> is less than or equal the value of <paramref name="right"/>; otherwise, false.</returns>
        </member>
        <member name="M:BEditor.Media.Frame.op_GreaterThanOrEqual(BEditor.Media.Frame,BEditor.Media.Frame)">
            <summary>
            Indicates whether a specified <see cref="T:BEditor.Media.Frame"/> is greater than or equal another specified <see cref="T:BEditor.Media.Frame"/>.
            </summary>
            <param name="left">The first time interval to compare.</param>
            <param name="right">The second time interval to compare.</param>
            <returns>true if the value of <paramref name="left"/> is greater than or equal the value of <paramref name="right"/>; otherwise, false.</returns>
        </member>
        <member name="M:BEditor.Media.Frame.op_Addition(BEditor.Media.Frame,BEditor.Media.Frame)">
            <summary>
            Adds two specified <see cref="T:BEditor.Media.Frame"/> instances.
            </summary>
            <param name="left">The first time interval to add.</param>
            <param name="right">The second time interval to add.</param>
            <returns>An object whose value is the sum of the values of <paramref name="left"/> and <paramref name="right"/>.</returns>
        </member>
        <member name="M:BEditor.Media.Frame.op_Subtraction(BEditor.Media.Frame,BEditor.Media.Frame)">
            <summary>
            Subtracts a specified <see cref="T:BEditor.Media.Frame"/> from another specified <see cref="T:BEditor.Media.Frame"/>.
            </summary>
            <param name="left">The minuend.</param>
            <param name="right">The subtrahend.</param>
            <returns>An object whose value is the result of the value of <paramref name="left"/> minus the value of <paramref name="right"/>.</returns>
        </member>
        <member name="M:BEditor.Media.Frame.op_Division(BEditor.Media.Frame,BEditor.Media.Frame)">
            <summary>
            Returns a new <see cref="T:BEditor.Media.Frame"/> value which is the result of division of <paramref name="left"/> instance and the specified <paramref name="right"/>.
            </summary>
            <param name="left">Divident or the value to be divided.</param>
            <param name="right">The value to be divided by.</param>
            <returns>A new value that represents result of division of <paramref name="left"/> instance by the value of the <paramref name="right"/>.</returns>
        </member>
        <member name="M:BEditor.Media.Frame.op_Multiply(BEditor.Media.Frame,BEditor.Media.Frame)">
            <summary>
            Returns a new <see cref="T:BEditor.Media.Frame"/> object whose value is the result of multiplying the specified <see cref="T:BEditor.Media.Frame"/> instance and the specified factor.
            </summary>
            <param name="left">The value to be multiplied.</param>
            <param name="right">The value to be multiplied by.</param>
            <returns>A new object that represents the value of the specified <see cref="T:BEditor.Media.Frame"/> instance multiplied by the value of the specified factor.</returns>
        </member>
        <member name="M:BEditor.Media.Frame.FromMilliseconds(System.Double,System.Double)">
            <summary>
            Creates the <see cref="T:BEditor.Media.Frame"/> from milliseconds.
            </summary>
            <param name="milliseconds">A number of milliseconds.</param>
            <param name="framerate">The number of frames per second.</param>
            <returns>An object that represents value.</returns>
        </member>
        <member name="M:BEditor.Media.Frame.FromSeconds(System.Double,System.Double)">
            <summary>
            Creates the <see cref="T:BEditor.Media.Frame"/> from seconds.
            </summary>
            <param name="seconds">A number of seconds.</param>
            <param name="framerate">The number of frames per second.</param>
            <returns>An object that represents value.</returns>
        </member>
        <member name="M:BEditor.Media.Frame.FromMinutes(System.Double,System.Double)">
            <summary>
            Creates the <see cref="T:BEditor.Media.Frame"/> from minutes.
            </summary>
            <param name="minutes">A number of minutes.</param>
            <param name="framerate">The number of frames per second.</param>
            <returns>An object that represents value.</returns>
        </member>
        <member name="M:BEditor.Media.Frame.FromHours(System.Double,System.Double)">
            <summary>
            Creates the <see cref="T:BEditor.Media.Frame"/> from hours.
            </summary>
            <param name="hours">A number of hours.</param>
            <param name="framerate">The number of frames per second.</param>
            <returns>An object that represents value.</returns>
        </member>
        <member name="M:BEditor.Media.Frame.FromTimeSpan(System.TimeSpan,System.Double)">
            <summary>
            Creates the <see cref="T:BEditor.Media.Frame"/> from <see cref="T:System.TimeSpan"/>.
            </summary>
            <param name="timeSpan">The <see cref="T:System.TimeSpan"/> representing the frame number.</param>
            <param name="framerate">The number of frames per second.</param>
            <returns>An object that represents value.</returns>
        </member>
        <member name="M:BEditor.Media.Frame.ToTimeSpan(System.Double)">
            <summary>
            Converts this <see cref="T:BEditor.Media.Frame"/> to a <see cref="T:System.TimeSpan"/>.
            </summary>
            <param name="framerate">The number of frames per second.</param>
            <returns>An object that represents value.</returns>
        </member>
        <member name="M:BEditor.Media.Frame.ToMilliseconds(System.Double)">
            <summary>
            Converts this <see cref="T:BEditor.Media.Frame"/> to milliseconds.
            </summary>
            <param name="framerate">The number of frames per second.</param>
            <returns>An object that represents value.</returns>
        </member>
        <member name="M:BEditor.Media.Frame.ToSeconds(System.Double)">
            <summary>
            Converts this <see cref="T:BEditor.Media.Frame"/> to seconds.
            </summary>
            <param name="framerate">The number of frames per second.</param>
            <returns>An object that represents value.</returns>
        </member>
        <member name="M:BEditor.Media.Frame.ToMinutes(System.Double)">
            <summary>
            Converts this <see cref="T:BEditor.Media.Frame"/> to minutes.
            </summary>
            <param name="framerate">The number of frames per second.</param>
            <returns>An object that represents value.</returns>
        </member>
        <member name="M:BEditor.Media.Frame.ToHours(System.Double)">
            <summary>
            Converts this <see cref="T:BEditor.Media.Frame"/> to hours.
            </summary>
            <param name="framerate">The number of frames per second.</param>
            <returns>An object that represents value.</returns>
        </member>
        <member name="M:BEditor.Media.Frame.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:BEditor.Media.Frame.Equals(BEditor.Media.Frame)">
            <inheritdoc/>
        </member>
        <member name="M:BEditor.Media.Frame.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:BEditor.Media.Frame.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc/>
        </member>
        <member name="T:BEditor.Media.IRegisterdDecoding">
            <summary>
            Provides the ability to create a decoder.
            </summary>
        </member>
        <member name="P:BEditor.Media.IRegisterdDecoding.Name">
            <summary>
            Gets the decoder name.
            </summary>
        </member>
        <member name="M:BEditor.Media.IRegisterdDecoding.Open(System.String,BEditor.Media.Decoding.MediaOptions)">
            <summary>
            Open the media file.
            </summary>
            <param name="file">File name of the media file.</param>
            <param name="options">The decoder settings.</param>
            <returns>Returns the input container opened by this method.</returns>
        </member>
        <member name="M:BEditor.Media.IRegisterdDecoding.IsSupported(System.String)">
            <summary>
            Gets the value if the specified media file is supported.
            </summary>
            <param name="file">File name of the media file.</param>
            <returns>Returns a value if the specified media file is supported.</returns>
        </member>
        <member name="M:BEditor.Media.IRegisterdDecoding.SupportExtensions">
            <summary>
            Gets the supported extensions.
            </summary>
            <returns>Returns the supported extensions.</returns>
        </member>
        <member name="T:BEditor.Media.IRegisterdEncoding">
            <summary>
            Provides the ability to create a encoder.
            </summary>
        </member>
        <member name="P:BEditor.Media.IRegisterdEncoding.Name">
            <summary>
            Gets the decoder name.
            </summary>
        </member>
        <member name="M:BEditor.Media.IRegisterdEncoding.Create(System.String)">
            <summary>
            Create the media file.
            </summary>
            <param name="file">The file name to output.</param>
            <returns>Returns the output container created by this method.</returns>
        </member>
        <member name="M:BEditor.Media.IRegisterdEncoding.IsSupported(System.String)">
            <summary>
            Gets the value if the specified media file is supported.
            </summary>
            <param name="file">File name of the media file.</param>
            <returns>Returns a value if the specified media file is supported.</returns>
        </member>
        <member name="M:BEditor.Media.IRegisterdEncoding.SupportExtensions">
            <summary>
            Gets the supported extensions.
            </summary>
            <returns>Returns the supported extensions.</returns>
        </member>
        <member name="T:BEditor.Media.ISupportEncodingSettings">
            <summary>
            Controls the default settings of the encoder.
            </summary>
        </member>
        <member name="M:BEditor.Media.ISupportEncodingSettings.GetDefaultVideoSettings">
            <summary>
            Gets the default settings for video encoder.
            </summary>
            <returns>Returns the default encoder setting.</returns>
        </member>
        <member name="M:BEditor.Media.ISupportEncodingSettings.GetDefaultAudioSettings">
            <summary>
            Gets the default settings for audio encoder.
            </summary>
            <returns>Returns the default encoder setting.</returns>
        </member>
        <member name="T:BEditor.Media.MediaType">
            <summary>
            Represents the multimedia stream types.
            </summary>
        </member>
        <member name="F:BEditor.Media.MediaType.None">
            <summary>
            Other media type not supported by the BEditor.Media.
            </summary>
        </member>
        <member name="F:BEditor.Media.MediaType.Video">
            <summary>
            Video.
            </summary>
        </member>
        <member name="F:BEditor.Media.MediaType.Audio">
            <summary>
            Audio.
            </summary>
        </member>
        <member name="T:BEditor.Media.PCM.IPCM`1">
            <summary>
            Represents audio data.
            </summary>
            <typeparam name="T">The type of the PCM class itself.</typeparam>
        </member>
        <member name="M:BEditor.Media.PCM.IPCM`1.Combine(`0)">
            <summary>
            Returns the value with the specified data appended to this data.
            </summary>
            <param name="s">Data to be added.</param>
            <returns>Returns the sum of this audio data and <paramref name="s"/>.</returns>
        </member>
        <member name="T:BEditor.Media.PCM.IPCMConvertable`1">
            <summary>
            Provides the ability to convert this audio data to specified data.
            </summary>
            <typeparam name="T">The type of data that can be converted.</typeparam>
        </member>
        <member name="M:BEditor.Media.PCM.IPCMConvertable`1.ConvertTo(`0@)">
            <summary>
            Converts to the specified type.
            </summary>
            <param name="dst">The converted data.</param>
        </member>
        <member name="M:BEditor.Media.PCM.IPCMConvertable`1.ConvertFrom(`0)">
            <summary>
            Converts from the specified type.
            </summary>
            <param name="src">The data to be converted.</param>
        </member>
        <member name="T:BEditor.Media.PCM.PCM16">
            <summary>
            Represents the audio data in 16-bit float format.
            </summary>
        </member>
        <member name="F:BEditor.Media.PCM.PCM16.Value">
            <summary>
            Represents the audio data.
            </summary>
        </member>
        <member name="M:BEditor.Media.PCM.PCM16.#ctor(System.Int16)">
            <summary>
            Initializes a new instance of the <see cref="T:BEditor.Media.PCM.PCM16"/> struct.
            </summary>
            <param name="value">The audio data.</param>
        </member>
        <member name="M:BEditor.Media.PCM.PCM16.op_Implicit(BEditor.Media.PCM.PCM16)~System.Int16">
            <summary>
            Converts the <see cref="T:BEditor.Media.PCM.PCMFloat"/> to a 16-bit signed integer.
            </summary>
            <param name="value">The Pcm data.</param>
        </member>
        <member name="M:BEditor.Media.PCM.PCM16.op_Implicit(System.Int16)~BEditor.Media.PCM.PCM16">
            <summary>
            Converts the 16-bit signed integer to a <see cref="T:BEditor.Media.PCM.PCM16"/>.
            </summary>
            <param name="value">The 16-bit signed integer.</param>
        </member>
        <member name="M:BEditor.Media.PCM.PCM16.Combine(BEditor.Media.PCM.PCM16)">
            <inheritdoc/>
        </member>
        <member name="M:BEditor.Media.PCM.PCM16.ConvertFrom(BEditor.Media.PCM.PCM32)">
            <inheritdoc/>
        </member>
        <member name="M:BEditor.Media.PCM.PCM16.ConvertFrom(BEditor.Media.PCM.PCMFloat)">
            <inheritdoc/>
        </member>
        <member name="M:BEditor.Media.PCM.PCM16.ConvertTo(BEditor.Media.PCM.PCM32@)">
            <inheritdoc/>
        </member>
        <member name="M:BEditor.Media.PCM.PCM16.ConvertTo(BEditor.Media.PCM.PCMFloat@)">
            <inheritdoc/>
        </member>
        <member name="M:BEditor.Media.PCM.PCM16.ToString">
            <inheritdoc/>
        </member>
        <member name="T:BEditor.Media.PCM.PCM32">
            <summary>
            Represents the audio data in 32-bit float format.
            </summary>
        </member>
        <member name="F:BEditor.Media.PCM.PCM32.Value">
            <summary>
            Represents the audio data.
            </summary>
        </member>
        <member name="M:BEditor.Media.PCM.PCM32.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:BEditor.Media.PCM.PCM32"/> struct.
            </summary>
            <param name="value">The audio data.</param>
        </member>
        <member name="M:BEditor.Media.PCM.PCM32.op_Implicit(BEditor.Media.PCM.PCM32)~System.Int32">
            <summary>
            Converts the <see cref="T:BEditor.Media.PCM.PCM32"/> to a 32-bit signed integer.
            </summary>
            <param name="value">The Pcm data.</param>
        </member>
        <member name="M:BEditor.Media.PCM.PCM32.op_Implicit(System.Int32)~BEditor.Media.PCM.PCM32">
            <summary>
            Converts the 32-bit signed integer to a <see cref="T:BEditor.Media.PCM.PCM32"/>.
            </summary>
            <param name="value">The 32-bit signed integer.</param>
        </member>
        <member name="M:BEditor.Media.PCM.PCM32.Combine(BEditor.Media.PCM.PCM32)">
            <inheritdoc/>
        </member>
        <member name="M:BEditor.Media.PCM.PCM32.ConvertFrom(BEditor.Media.PCM.PCM16)">
            <inheritdoc/>
        </member>
        <member name="M:BEditor.Media.PCM.PCM32.ConvertFrom(BEditor.Media.PCM.PCMFloat)">
            <inheritdoc/>
        </member>
        <member name="M:BEditor.Media.PCM.PCM32.ConvertTo(BEditor.Media.PCM.PCM16@)">
            <inheritdoc/>
        </member>
        <member name="M:BEditor.Media.PCM.PCM32.ConvertTo(BEditor.Media.PCM.PCMFloat@)">
            <inheritdoc/>
        </member>
        <member name="T:BEditor.Media.PCM.PCMFloat">
            <summary>
            Represents the audio data in 32-bit float format.
            </summary>
        </member>
        <member name="F:BEditor.Media.PCM.PCMFloat.Value">
            <summary>
            Represents the audio data.
            </summary>
        </member>
        <member name="M:BEditor.Media.PCM.PCMFloat.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:BEditor.Media.PCM.PCMFloat"/> struct.
            </summary>
            <param name="value">The audio data.</param>
        </member>
        <member name="M:BEditor.Media.PCM.PCMFloat.op_Implicit(BEditor.Media.PCM.PCMFloat)~System.Single">
            <summary>
            Converts the <see cref="T:BEditor.Media.PCM.PCMFloat"/> to a 32-bit float.
            </summary>
            <param name="value">The Pcm data.</param>
        </member>
        <member name="M:BEditor.Media.PCM.PCMFloat.op_Implicit(System.Single)~BEditor.Media.PCM.PCMFloat">
            <summary>
            Converts the 32-bit float to a <see cref="T:BEditor.Media.PCM.PCMFloat"/>.
            </summary>
            <param name="value">The 32-bit float.</param>
        </member>
        <member name="M:BEditor.Media.PCM.PCMFloat.Combine(BEditor.Media.PCM.PCMFloat)">
            <inheritdoc/>
        </member>
        <member name="M:BEditor.Media.PCM.PCMFloat.ConvertFrom(BEditor.Media.PCM.PCM16)">
            <inheritdoc/>
        </member>
        <member name="M:BEditor.Media.PCM.PCMFloat.ConvertFrom(BEditor.Media.PCM.PCM32)">
            <inheritdoc/>
        </member>
        <member name="M:BEditor.Media.PCM.PCMFloat.ConvertTo(BEditor.Media.PCM.PCM16@)">
            <inheritdoc/>
        </member>
        <member name="M:BEditor.Media.PCM.PCMFloat.ConvertTo(BEditor.Media.PCM.PCM32@)">
            <inheritdoc/>
        </member>
        <member name="T:BEditor.Media.PCM.StereoPCM16">
            <summary>
            Represents the stereo audio data in 16-bit integer format.
            </summary>
        </member>
        <member name="F:BEditor.Media.PCM.StereoPCM16.Left">
            <summary>
            Represents the audio data of the left channel.
            </summary>
        </member>
        <member name="F:BEditor.Media.PCM.StereoPCM16.Right">
            <summary>
            Represents the audio data of the right channel.
            </summary>
        </member>
        <member name="M:BEditor.Media.PCM.StereoPCM16.#ctor(System.Int16,System.Int16)">
            <summary>
            Initializes a new instance of the <see cref="T:BEditor.Media.PCM.StereoPCM16"/> struct.
            </summary>
            <param name="left">The audio data of the left channel.</param>
            <param name="right">The audio data of the right channel.</param>
        </member>
        <member name="M:BEditor.Media.PCM.StereoPCM16.Combine(BEditor.Media.PCM.StereoPCM16)">
            <inheritdoc/>
        </member>
        <member name="M:BEditor.Media.PCM.StereoPCM16.ConvertFrom(BEditor.Media.PCM.StereoPCM32)">
            <inheritdoc/>
        </member>
        <member name="M:BEditor.Media.PCM.StereoPCM16.ConvertFrom(BEditor.Media.PCM.StereoPCMFloat)">
            <inheritdoc/>
        </member>
        <member name="M:BEditor.Media.PCM.StereoPCM16.ConvertTo(BEditor.Media.PCM.StereoPCM32@)">
            <inheritdoc/>
        </member>
        <member name="M:BEditor.Media.PCM.StereoPCM16.ConvertTo(BEditor.Media.PCM.StereoPCMFloat@)">
            <inheritdoc/>
        </member>
        <member name="M:BEditor.Media.PCM.StereoPCM16.ToString">
            <inheritdoc/>
        </member>
        <member name="T:BEditor.Media.PCM.StereoPCM32">
            <summary>
            Represents the stereo audio data in 32-bit integer format.
            </summary>
        </member>
        <member name="F:BEditor.Media.PCM.StereoPCM32.Left">
            <summary>
            Represents the audio data of the left channel.
            </summary>
        </member>
        <member name="F:BEditor.Media.PCM.StereoPCM32.Right">
            <summary>
            Represents the audio data of the right channel.
            </summary>
        </member>
        <member name="M:BEditor.Media.PCM.StereoPCM32.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:BEditor.Media.PCM.StereoPCM32"/> struct.
            </summary>
            <param name="left">The audio data of the left channel.</param>
            <param name="right">The audio data of the right channel.</param>
        </member>
        <member name="M:BEditor.Media.PCM.StereoPCM32.Combine(BEditor.Media.PCM.StereoPCM32)">
            <inheritdoc/>
        </member>
        <member name="M:BEditor.Media.PCM.StereoPCM32.ConvertFrom(BEditor.Media.PCM.StereoPCM16)">
            <inheritdoc/>
        </member>
        <member name="M:BEditor.Media.PCM.StereoPCM32.ConvertFrom(BEditor.Media.PCM.StereoPCMFloat)">
            <inheritdoc/>
        </member>
        <member name="M:BEditor.Media.PCM.StereoPCM32.ConvertTo(BEditor.Media.PCM.StereoPCM16@)">
            <inheritdoc/>
        </member>
        <member name="M:BEditor.Media.PCM.StereoPCM32.ConvertTo(BEditor.Media.PCM.StereoPCMFloat@)">
            <inheritdoc/>
        </member>
        <member name="T:BEditor.Media.PCM.StereoPCMFloat">
            <summary>
            Represents the stereo audio data in 32-bit float format.
            </summary>
        </member>
        <member name="F:BEditor.Media.PCM.StereoPCMFloat.Left">
            <summary>
            Represents the audio data of the left channel.
            </summary>
        </member>
        <member name="F:BEditor.Media.PCM.StereoPCMFloat.Right">
            <summary>
            Represents the audio data of the right channel.
            </summary>
        </member>
        <member name="M:BEditor.Media.PCM.StereoPCMFloat.#ctor(System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:BEditor.Media.PCM.StereoPCMFloat"/> struct.
            </summary>
            <param name="left">The audio data of the left channel.</param>
            <param name="right">The audio data of the right channel.</param>
        </member>
        <member name="M:BEditor.Media.PCM.StereoPCMFloat.Combine(BEditor.Media.PCM.StereoPCMFloat)">
            <inheritdoc/>
        </member>
        <member name="M:BEditor.Media.PCM.StereoPCMFloat.ConvertFrom(BEditor.Media.PCM.StereoPCM32)">
            <inheritdoc/>
        </member>
        <member name="M:BEditor.Media.PCM.StereoPCMFloat.ConvertFrom(BEditor.Media.PCM.StereoPCM16)">
            <inheritdoc/>
        </member>
        <member name="M:BEditor.Media.PCM.StereoPCMFloat.ConvertTo(BEditor.Media.PCM.StereoPCM32@)">
            <inheritdoc/>
        </member>
        <member name="M:BEditor.Media.PCM.StereoPCMFloat.ConvertTo(BEditor.Media.PCM.StereoPCM16@)">
            <inheritdoc/>
        </member>
        <member name="M:BEditor.Media.PCM.StereoPCMFloat.ToString">
            <inheritdoc/>
        </member>
        <member name="T:BEditor.Media.Rational">
            <summary>
            The rational.
            </summary>
        </member>
        <member name="M:BEditor.Media.Rational.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:BEditor.Media.Rational"/> struct.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:BEditor.Media.Rational.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:BEditor.Media.Rational"/> struct.
            </summary>
            <param name="numerator">The numerator.</param>
            <param name="denominator">The denominator.</param>
        </member>
        <member name="P:BEditor.Media.Rational.Numerator">
            <summary>
            Gets or sets the numerator.
            </summary>
        </member>
        <member name="P:BEditor.Media.Rational.Denominator">
            <summary>
            Gets or sets the denominator.
            </summary>
        </member>
        <member name="M:BEditor.Media.Rational.op_Implicit(BEditor.Media.Rational)~System.Double">
            <summary>
            Converts the <see cref="T:BEditor.Media.Rational"/> to a <see cref="T:System.Double"/>.
            </summary>
            <param name="value">A value.</param>
        </member>
        <member name="M:BEditor.Media.Rational.op_Implicit(BEditor.Media.Rational)~System.Single">
            <summary>
            Converts the <see cref="T:BEditor.Media.Rational"/> to a <see cref="T:System.Single"/>.
            </summary>
            <param name="value">A value.</param>
        </member>
        <member name="M:BEditor.Media.Rational.op_Implicit(BEditor.Media.Rational)~System.Int32">
            <summary>
            Converts the <see cref="T:BEditor.Media.Rational"/> to a <see cref="T:System.Int32"/>.
            </summary>
            <param name="value">A value.</param>
        </member>
        <member name="M:BEditor.Media.Rational.op_Multiply(BEditor.Media.Rational,BEditor.Media.Rational)">
            <summary>
            Returns a new <see cref="T:BEditor.Media.Rational"/> object whose value is the result of multiplying the specified <see cref="T:BEditor.Media.Rational"/> instance and the specified factor.
            </summary>
            <param name="left">The value to be multiplied.</param>
            <param name="right">The value to be multiplied by.</param>
            <returns>A new object that represents the value of the specified <see cref="T:BEditor.Media.Rational"/> instance multiplied by the value of the specified factor.</returns>
        </member>
        <member name="M:BEditor.Media.Rational.op_Division(BEditor.Media.Rational,BEditor.Media.Rational)">
            <summary>
            Returns a new <see cref="T:BEditor.Media.Rational"/> value which is the result of division of <paramref name="left"/> instance and the specified <paramref name="right"/>.
            </summary>
            <param name="left">Divident or the value to be divided.</param>
            <param name="right">The value to be divided by.</param>
            <returns>A new value that represents result of division of <paramref name="left"/> instance by the value of the <paramref name="right"/>.</returns>
        </member>
        <member name="M:BEditor.Media.Rational.op_Equality(BEditor.Media.Rational,BEditor.Media.Rational)">
            <summary>
            Indicates whether two <see cref="T:BEditor.Media.Rational"/> instances are equal.
            </summary>
            <param name="left">The first rational to compare.</param>
            <param name="right">The second rational to compare.</param>
            <returns>true if the values of <paramref name="left"/> and <paramref name="right"/> are equal; otherwise, false.</returns>
        </member>
        <member name="M:BEditor.Media.Rational.op_Inequality(BEditor.Media.Rational,BEditor.Media.Rational)">
            <summary>
            Indicates whether two <see cref="T:BEditor.Media.Rational"/> instances are not equal.
            </summary>
            <param name="left">The first rational to compare.</param>
            <param name="right">The second rational to compare.</param>
            <returns>true if the values of <paramref name="left"/> and <paramref name="right"/> are not equal; otherwise, false.</returns>
        </member>
        <member name="M:BEditor.Media.Rational.ToString">
            <inheritdoc/>
        </member>
        <member name="M:BEditor.Media.Rational.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:BEditor.Media.Rational.Equals(BEditor.Media.Rational)">
            <inheritdoc/>
        </member>
        <member name="M:BEditor.Media.Rational.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="T:BEditor.Media.Resources.Strings">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:BEditor.Media.Resources.Strings.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:BEditor.Media.Resources.Strings.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="T:BEditor.Media.Sound`1">
            <summary>
            Represents the audio.
            </summary>
            <typeparam name="T">The type of audio data.</typeparam>
        </member>
        <member name="M:BEditor.Media.Sound`1.#ctor(System.Int32,System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:BEditor.Media.Sound`1"/> class.
            </summary>
            <param name="rate">The sample rate.</param>
            <param name="duration">The audio duration.</param>
        </member>
        <member name="M:BEditor.Media.Sound`1.#ctor(System.Int32,BEditor.Media.Rational)">
            <summary>
            Initializes a new instance of the <see cref="T:BEditor.Media.Sound`1"/> class.
            </summary>
            <param name="rate">The sample rate.</param>
            <param name="samples">The number of samples.</param>
        </member>
        <member name="M:BEditor.Media.Sound`1.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:BEditor.Media.Sound`1"/> class.
            </summary>
            <param name="rate">The sample rate.</param>
            <param name="samples">The number of samples.</param>
        </member>
        <member name="M:BEditor.Media.Sound`1.#ctor(System.Int32,System.Int32,`0[])">
            <summary>
            Initializes a new instance of the <see cref="T:BEditor.Media.Sound`1"/> class with a specified data.
            </summary>
            <param name="rate">The sample rate.</param>
            <param name="samples">The number of samples.</param>
            <param name="data">The audio data.</param>
        </member>
        <member name="M:BEditor.Media.Sound`1.#ctor(System.Int32,System.Int32,`0*)">
            <summary>
            Initializes a new instance of the <see cref="T:BEditor.Media.Sound`1"/> class with a specified data.
            </summary>
            <param name="rate">The sample rate.</param>
            <param name="samples">The number of samples.</param>
            <param name="data">The audio data.</param>
        </member>
        <member name="M:BEditor.Media.Sound`1.#ctor(System.Int32,System.Int32,System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:BEditor.Media.Sound`1"/> class with a specified data.
            </summary>
            <param name="rate">The sample rate.</param>
            <param name="length">The length of data.</param>
            <param name="data">The audio data.</param>
        </member>
        <member name="M:BEditor.Media.Sound`1.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:BEditor.Media.Sound`1"/> class.
            </summary>
        </member>
        <member name="P:BEditor.Media.Sound`1.Data">
            <summary>
            Gets the audio data.
            </summary>
        </member>
        <member name="P:BEditor.Media.Sound`1.SampleRate">
            <summary>
            Gets the sample rate of <see cref="T:BEditor.Media.Sound`1"/>.
            </summary>
        </member>
        <member name="P:BEditor.Media.Sound`1.NumSamples">
            <summary>
            Gets the number of samples.
            </summary>
        </member>
        <member name="P:BEditor.Media.Sound`1.Duration">
            <summary>
            Gets the sound duration.
            </summary>
        </member>
        <member name="P:BEditor.Media.Sound`1.DurationRational">
            <summary>
            Gets the number of seconds of sound.
            </summary>
        </member>
        <member name="P:BEditor.Media.Sound`1.DataSize">
            <summary>
            Gets the data size of <see cref="T:BEditor.Media.Sound`1"/>.
            </summary>
        </member>
        <member name="P:BEditor.Media.Sound`1.IsDisposed">
            <summary>
            Gets a value indicating whether this instance has been disposed.
            </summary>
        </member>
        <member name="M:BEditor.Media.Sound`1.Convert``1">
            <summary>
            Converts the data in this <see cref="T:BEditor.Media.Sound`1"/> to the specified type.
            </summary>
            <typeparam name="TConvert">The type of audio data to convert to.</typeparam>
            <returns>Returns the converted sound.</returns>
        </member>
        <member name="M:BEditor.Media.Sound`1.ThrowIfDisposed">
            <summary>
            If this object has already been discarded, throw an exception.
            </summary>
        </member>
        <member name="M:BEditor.Media.Sound`1.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:BEditor.Media.Sound`1.Clone">
            <inheritdoc cref="M:System.ICloneable.Clone"/>
        </member>
        <member name="M:BEditor.Media.Sound`1.Slice(System.TimeSpan)">
            <summary>
            Forms a slice of the current <see cref="T:BEditor.Media.Sound`1"/>, starting at the specified time.
            </summary>
            <param name="start">The time at which to begin the slice.</param>
            <returns>A sound that consists of all elements of the current sound from start to the end of the sound.</returns>
        </member>
        <member name="M:BEditor.Media.Sound`1.Slice(System.TimeSpan,System.TimeSpan)">
            <summary>
            Forms a slice of the specified length from the current <see cref="T:BEditor.Media.Sound`1"/> starting at the specified time.
            </summary>
            <param name="start">The time at which to begin this slice.</param>
            <param name="length">The desired length for the slice.</param>
            <returns>A sound that consists of length elements from the current sound starting at start.</returns>
        </member>
        <member name="M:BEditor.Media.Sound`1.Slice(BEditor.Media.Rational)">
            <summary>
            Forms a slice of the current <see cref="T:BEditor.Media.Sound`1"/>, starting at the specified index.
            </summary>
            <param name="start">The index at which to begin the slice.</param>
            <returns>A sound that consists of all elements of the current sound from start to the end of the sound.</returns>
        </member>
        <member name="M:BEditor.Media.Sound`1.Slice(BEditor.Media.Rational,BEditor.Media.Rational)">
            <summary>
            Forms a slice out of the current <see cref="T:BEditor.Media.Sound`1"/> starting at a specified index for a specified length.
            </summary>
            <param name="start">The index at which to begin this slice.</param>
            <param name="length">The desired length for the slice.</param>
            <returns>A sound that consists of length elements from the current sound starting at start.</returns>
        </member>
        <member name="M:BEditor.Media.Sound`1.Slice(System.Int32)">
            <summary>
            Forms a slice of the current <see cref="T:BEditor.Media.Sound`1"/>, starting at the specified index.
            </summary>
            <param name="start">The index at which to begin the slice.</param>
            <returns>A sound that consists of all elements of the current sound from start to the end of the sound.</returns>
        </member>
        <member name="M:BEditor.Media.Sound`1.Slice(System.Int32,System.Int32)">
            <summary>
            Forms a slice out of the current <see cref="T:BEditor.Media.Sound`1"/> starting at a specified index for a specified length.
            </summary>
            <param name="start">The index at which to begin this slice.</param>
            <param name="length">The desired length for the slice.</param>
            <returns>A sound that consists of length elements from the current sound starting at start.</returns>
        </member>
        <member name="M:BEditor.Media.Sound`1.Combine(BEditor.Media.Sound{`0})">
            <summary>
            Combine the specified <see cref="T:BEditor.Media.Sound`1"/> to this <see cref="T:BEditor.Media.Sound`1"/>.
            </summary>
            <param name="sound">The sound to combine.</param>
        </member>
        <member name="M:BEditor.Media.Sound`1.Resamples(System.Int32)">
            <summary>
            Resamples the <see cref="T:BEditor.Media.Sound`1"/>.
            </summary>
            <param name="frequency">The new sampling frequency.</param>
            <returns>Returns a sound that has been resampled to the specified frequency.</returns>
        </member>
        <member name="M:BEditor.Media.Sound`1.System#ICloneable#Clone">
            <inheritdoc/>
        </member>
        <member name="T:BEditor.Media.Sound">
            <inheritdoc cref="T:BEditor.Media.Sound"/>
            <summary>
            Provides extended methods for <see cref="T:BEditor.Media.Sound`1"/>.
            </summary>
        </member>
        <member name="M:BEditor.Media.Sound.Convert``2(BEditor.Media.Sound{``1})">
            <summary>
            Converts the data in this <see cref="T:BEditor.Media.Sound`1"/> to the specified type.
            </summary>
            <typeparam name="TConvert">The type of audio data to convert to.</typeparam>
            <typeparam name="TSource">The type of audio data from which to convert.</typeparam>
            <param name="sound">The Sound to convert.</param>
            <returns>Returns the converted sound.</returns>
        </member>
        <member name="M:BEditor.Media.Sound.SetChannelData(BEditor.Media.Sound{BEditor.Media.PCM.StereoPCMFloat},System.Int32,System.Span{System.Single})">
            <summary>
            Set the channel data.
            </summary>
            <param name="sound">The Sound to set the channel data.</param>
            <param name="channel">The number of channels to set.</param>
            <param name="data">The channel data to be set.</param>
        </member>
        <member name="M:BEditor.Media.Sound.SetChannelData(BEditor.Media.Sound{BEditor.Media.PCM.StereoPCMFloat},System.Int32,System.Int32,System.Span{System.Single})">
            <summary>
            Set the channel data.
            </summary>
            <param name="sound">The Sound to set the channel data.</param>
            <param name="start">The number of samples to start with.</param>
            <param name="channel">The number of channels to set.</param>
            <param name="data">The channel data to be set.</param>
        </member>
        <member name="M:BEditor.Media.Sound.Extract(BEditor.Media.Sound{BEditor.Media.PCM.StereoPCMFloat})">
            <summary>
            Extracts the channel data into multiple arrays.
            </summary>
            <param name="sound">The <see cref="T:BEditor.Media.Sound`1"/> that expands the channel data.</param>
            <returns>Returns an array with the left channel data in the first and the right channel data in the second.</returns>
        </member>
        <member name="M:BEditor.Media.Sound.Resamples(BEditor.Media.Sound{BEditor.Media.PCM.StereoPCMFloat},System.Int32)">
            <summary>
            Resamples the <see cref="T:BEditor.Media.Sound`1"/>.
            </summary>
            <param name="sound">The sound to resamples.</param>
            <param name="frequency">The new sampling frequency.</param>
            <returns>Returns a sound that has been resampled to the specified frequency.</returns>
        </member>
        <member name="M:BEditor.Media.Sound.Gain(BEditor.Media.Sound{BEditor.Media.PCM.StereoPCMFloat},System.Single)">
            <summary>
            Adjusts the gain of the sound.
            </summary>
            <param name="sound">The sound to adjust the gain.</param>
            <param name="gain">The gain.</param>
        </member>
        <member name="M:BEditor.Media.Sound.RMS(BEditor.Media.Sound{BEditor.Media.PCM.StereoPCMFloat})">
            <summary>
            Calculates the RMS of a sound.
            </summary>
            <param name="sound">The sound to calculate RMS.</param>
            <returns>Returns the RMS.</returns>
        </member>
        <member name="M:BEditor.Media.Sound.Delay(BEditor.Media.Sound{BEditor.Media.PCM.StereoPCMFloat},System.Single,System.Single,System.Int32)">
            <summary>
            Applies the delay effect.
            </summary>
            <param name="sound">The sound to apply effect.</param>
            <param name="amp">The attenuation rate.</param>
            <param name="delay">The delay time.</param>
            <param name="repeat">The number of repetitions.</param>
        </member>
    </members>
</doc>
